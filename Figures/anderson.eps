%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: anderson.eps
%%Creator: Adobe Illustrator(R) 13.0
%%For: Sean
%%CreationDate: 10/16/20
%%BoundingBox: 0 0 1072 635
%%HiResBoundingBox: 0 0 1071.6387 634.7812
%%CropBox: 0 0 1071.6387 634.7812
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 13.0.2%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 13.0.2 x434 R agm 4.4379 ct 5.1039%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                        
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 73 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: (Page 1) 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.1-c036 46.277092, Fri Feb 23 2007 14:16:18        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS3</xap:CreatorTool>
         <xap:CreateDate>2020-10-12T13:00:04-04:00</xap:CreateDate>
         <xap:ModifyDate>2020-10-16T06:56:49-04:00</xap:ModifyDate>
         <xap:MetadataDate>2020-10-16T06:56:49-04:00</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>152</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAmAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q8q1b8ldB0+61DzTb&#xA;alqC6jBJcapGGlRkE/L6x+0hbjzQd+nL+ZqqvQU8t6ci8RNfEf5V/esfvMxOKoG70e3SdlS4vQop&#xA;t9eu/D/jLmRjgCFUY9HR7iAC6vQgf94v127+JSpFP73bcg4ZQFKm3+HrD/ft5/0nXn/VbMZULfaJ&#xA;aRopSe9BJ3/068/6q5biiDzVAJpKhpC13esrNVB9duxxHECn974gnLvDj3Kv/RcP/LTe/wDSbd/9&#xA;VcfDj3K79Fw/8tN7/wBJt3/1Vx8OPcqrpeiQtxjnur2V1jHN/rt2KsKAmgl75XliANlTH/D1h/v2&#xA;8/6Trz/qtlCqc3ly0ZAI7i8RuSkn67eH4QwLD+97rUYqhr7RraKRQk94ARU/6bdnv7y5diiCN1Q3&#xA;6Mi/5aLz/pNu/wDqrlvhxVYNKHrMxu7wxlVCp9cu9iCamvq96j7sfDiq/wDRkX/LRef9Jt3/ANVc&#xA;fDirv0ZF/wAtF5/0m3f/AFVx8OKrItKCqRJd3jtyYg/XLsbFiVH972G2PhxVf+jIv+Wi8/6Tbv8A&#xA;6q4+HFVkulBlAju7xG5KSfrl2dgwLD+97jbHw4qv/RkX/LRef9Jt3/1Vx8OKu/RkX/LRef8ASbd/&#xA;9VcfDiqw6UPWVhd3gjCsGT65d7kkUNfV7UP34+HFV/6Mi/5aLz/pNu/+quPhxV36Mi/5aLz/AKTb&#xA;v/qrj4cVWRaUFUiS7vHbkxB+uXY2LEqP73sNsfDiq/8ARkX/AC0Xn/Sbd/8AVXHw4ql+tLHY28BW&#xA;a9L3dzBZowvrocGuZViD/wB4a8S1aZdh0oycQ5VGUv8ASi0sm/w9Yf79vP8ApOvP+q2a5Dv8PWH+&#xA;/bz/AKTrz/qtiqEh05bLzPaehPcmGayujNDNc3E6FkltgjBZpHVSoZhUDviqe4qlvmf/AJRrVv8A&#xA;mDuP+TTYqmWKpTqDUum+Q/VmXiHpVTtW/wBIj/1hkpjYqnWYSoLVDSNPmf1Zdh5ql3P2zJpXc/bG&#xA;ldz9saVF6Y1Z2/1D+sZTmGypnmMrsVS7VDSVP9X+OZOHkqC5+2XUruftjSu5+2NK7n7Y0ruftjSu&#xA;5+2NK7n7Y0ruftjSu5+2NK7n7Y0ruftjSu5+2NK7n7Y0ruftjSsf85T+nbaQeNeWs6Wn/BXsY/jm&#xA;f2fGzP8A4Vk/3BZR3Z9mhYuxVLbj/lJbD/mDvP8Ak7a4qmWKsY8y+avK7aNqtkusWTXpt7mAWwuY&#xA;jL6qq8bR8OXLmHUqVpWopirJ8VSjUf8AetvkP1Zl4vpVTtf96Yv9YZKf0lU7zCVA6r/dx/M/qy/B&#xA;zKpbmSrsVdiqM0r/AHob/UP6xlOfkqaZiq7FUt1X+8T/AFf45k4OSoHL1dirsVdirsVdirsVdirs&#xA;VdirsVdirsVUZLlFYxoDLMBUxpSor0qTQL9OKsd87Rym30Z5HrTXdK4ogKrQ38VK7nkR93tmx7N+&#xA;qf8AwrL/ALiTKHP4H7npGc8xdiqW3H/KS2H/ADB3n/J21xVhnlb8xtd1vzYNPa1todLuPrL2DtXn&#xA;NDaSCKSSN1kkaqs6/BNBFUGqlgMVXeY/yk8gx22q62mm8dSCXV76ollA9dv3zNwDcfikjRiKUPEe&#xA;GKvQIYYYUEcMaxxjoiAKN/YYqleo/wC9bfIfqzLxfSqna/70xf6wyU/pKp3mEqB1X+7j+Z/Vl+Dm&#xA;VS3MlXYq7FUZpX+9Df6h/WMpz8lTTMVXYqluq/3if6v8cycHJUDl6uxV2KuxV2KuxV2KuxV2KuxV&#xA;2Kqcs8cdAx+Nq8EH2moKkKO+KrONzKwLN6MfXgtC59mboP8AY/8ABYqqxxxxoEjUIorRQKDc1OKs&#xA;B/PP6wPy8uXt+YliubSQNHXkvCdDyqNxTrXMzRyrjP8AtWT/AHJbdPEGYB5F6Z5Vv7nUfK+j6hdM&#xA;GubyxtridgAoMksKuxAHTc5oYGwG/tHDHFqcmOP0xnID3CRCaZJw0qmhhXzTZSiNRK9ldhpAByIE&#xA;trQE9cVeP/lFb6cfzR1X9GSWl1c2cN1/iC9tPrLB5bi5Bt14XEUMMJURSAi2+FqfFUiuKvY/M/8A&#xA;yjWrf8wdx/yabFXl3nyH/nJG31S9k8sXVpdadcXBOmQQx2oeCJeJpOblV5BkDD4STzp8QHwlVl/l&#xA;d/Mz+X7F/M6ldcZC14jekWBLsUDeiFj5CPjXiAK5l4vpVV8m2msWei6Ra61OLrVoIIY7+5UlhJMq&#xA;gOwYhSanvTJ5ORVGeaNJ803ur6JPo98trY2k3PVIS7oZo/XgfiAqsG/dxyDcjr75gqmuq/3cfzP6&#xA;svwcyqW5kqwLUPLHn+X8ytP1m21cR+VoZZGu9N+sTLzRrVI1HohfTb98rNuffFWe4qx3zhD+Yc50&#xA;uDyTcR2lzJdEajdTLE8cdsIXILrIrsy+qEBEY5HpyX7Qpz8lQSaZ+ftlputyPrem6jMNPH6Ii+qq&#xA;ZzeLbHlxYfVoVLXHT1FZSKbLuDiqlcemf85KxXFrHNq9jNDNeoWlRbesNp6EjMlxW2XlSQIpMQqx&#xA;O3AbhVOvIukfmbYR6hJ5+1S21K8uplexFofgihVApXiIoFBLCuw365k4OSspy9XYq7FXYq7FUn83&#xA;HzAPLd//AIe/47Xp/wChf3f2+Q/36CnSv2hirAZNP/5yBW6gjGo2LwubcPKphCrwjZrgylrXlR3K&#xA;qvBO37OKso/LnTvzAstPvv8AG1/Bf6hNc87Z7b7CwLEiAcQkSqSyFiAKVOKsuxVazogBZgoJoKmm&#xA;+KqQeeZaoPSjYAq7A+pud/gI+Hbx+kYqqRxJGDxG7GrMTUk+5OKr8VdirGvPay6h5N1i00+J7uee&#xA;0lWJYgWDN04qR1PsMhk+k+5twH95H3hlfkeOSLyXoEUqlJE020V0YEMrCBAQQehGa+H0j3OX2vIH&#xA;WZiNwck/90U6ybr0tuP+UlsP+YO8/wCTtrirzXyxqMeo/nTq+n+neyfoVJUF3JLaOq19F/RZ0tUv&#xA;PTb1lZVe6dTxHw/CQqrIPM35peQTb6toSaxFJqno3FqYI0lcCbgF4GRUMdQ0qA/FsWFeoxVnMM0M&#xA;yCSGRZIz0dCGG3uMVSvUf962+Q/VmXi+lVO1/wB6Yv8AWGSn9JVO8wlQOq/3cfzP6svwcyqW5kq7&#xA;FXYqjNK/3ob/AFD+sZTn5KmmYquxVLdV/vE/1f45k4OSoHL1dirsVdirsVdirsVaJAFT0xVQM8so&#xA;It12IYCaQEKCDQUXYsO+2x8cVXpbRq/qNWSStQ7mpG1PhHRdv5QMVVcVaJAFT0xVRNyzj/R09Woa&#xA;khIEYKmlCd2+4HFW/q/JuUzmShBCdEBA/lHXx+Ku/TFUTB/fx/6w/XkZciqe5gq7FUqmmhbzTZRC&#xA;RTKlldlowRyAMtrQkdcVeReWLG31b8+9S1O8umureNbg6VDdWlxDPBcWZhSSOC4liUhEE/xRrOUb&#xA;lXh4KvR/M3kvyiNL1bUl0WyXUPq80/1oW8Qk9VIjxk5Ba8hxG/sMVZXiqUaj/vW3yH6sy8X0qp2v&#xA;+9MX+sMlP6Sqd5hKgdV/u4/mf1Zfg5lUtzJV2KuxVGaV/vQ3+of1jKc/JU0zFV2Kpbqv94n+r/HM&#xA;nByVA5ersVdirsVdirsVUTcAuUiUyMCVYinFSBX4ifn2rirQt+dDcESNRapT93yU1qFNe/jiqviq&#xA;1mVFLMQqjqSaDFVIzSSVEC92UySBlUEbVCmhb6Nj44q4WqsQ059ZxQgMBwBHdV7b99z74qr4q7FV&#xA;8H9/H/rD9eRlyKp7mCrsVS24/wCUlsP+YO8/5O2uKvNPKV9z/PzzPF+l7Cettw+pxWPpXf7v0fge&#xA;6+rx8xFX/loetfsimyr0vzP/AMo1q3/MHcf8mmxVMsVSjUf962+Q/VmXi+lVO1/3pi/1hkp/SVTv&#xA;MJUDqv8Adx/M/qy/BzKpbmSrsVdiqM0r/ehv9Q/rGU5+SppmKrsVS3Vf7xP9X+OZODkqBy9XYq7F&#xA;XYqoyXKIxRR6kwoTEtOQDGgJqdhseuKrTBJMP9II4EENAm6EH+YkBj+AxVXAAFB0xVqSSONC8jBE&#xA;FKsxAG5oNziqn6s7tSOLigajPIabU6qoqTvtvTFXJbKCGkZpXoKlj8NVNQQg+EGvelcVVsVdirsV&#xA;diq+D+/j/wBYfryMuRVPcwVdiqW3H/KS2H/MHef8nbXFXivlrV9ej/5yL1uw064gvIppJv0tHNaW&#xA;6FLVVg9MQX4C3UrxMTyib4F/Zruyqsn1788fKFxHqGhJb3wvJkuLNXMUfpep/cglhITxJkUig3Fd&#xA;vhair1KGVZUDqGAPZ1ZDt/ksAcVSvUf962+Q/VmXi+lVO1/3pi/1hkp/SVTvMJUDqv8Adx/M/qy/&#xA;BzKpbmSrsVdiqM0r/ehv9Q/rGU5+SppmKrsVYXpOr319qnmGC7mEi2GqPa2aUVSkC2ltLx+EAt8c&#xA;zGpqd/lm5z4IY4YjEUZ4+I+/imPuAZSjsD+OqaZjMXYqpyzRxj4qk0qEUFmNPBRueuKrStw7nkRH&#xA;EDsFNWYU/aNPh38PvxVUjRY0CIKKOg6/rxVqSRI1LOaAAnxO3gBucVWepPJ/dr6YDbtIPtLStVUE&#xA;Hr/NTFW47dFKuxMsyjj6zgcqfQAB9AxVVxV2KuxV2KuxV2Kr4P7+P/WH68jLkVT3MFXYqlU0qHzT&#xA;ZRANyWyuySVYLvLa9GI4n6DirzDyFo/ky3/OHV9V0y5vF1S8S9ikiurO8iaQxva+vG93cSNHMsBE&#xA;ZjRI1ZQxqWHRV6d5mghHlzVWEa8hZ3BBoK1Mbmv3k4qm2KpRqP8AvW3yH6sy8X0qp2v+9MX+sMlP&#xA;6Sqd5hKgdV/u4/mf1Zfg5lUtzJV2KuxVGaV/vQ3+of1jKc/JU0zFV2KvJ9F/8mVrX/MXqf8A1D6N&#xA;m2131af/AKF5f9NC7WH+Iz/4Zi+7MzZ3RFLOQqjqTlLqlHncTD92PRQ0IkcVYg9aJ+zt05dD1XFV&#xA;SKCOP7Iqx2LsSzHeu7HfvirpZ4oh8bbkEhACzEL14qtWNK9hiqwm6kb4aQx16n4nI+XRfxxVdFbx&#xA;RnkAS9KeoxLNQmtORqae2KquKuxV2KuxV2KuxV2KuxVfB/fx/wCsP15GXIqnuYKuxVLbj/lJbD/m&#xA;DvP+TtrirxvyBdWk3/OSHm6QyXcWoPbyxS20wUxmOF4FQrMjOjim6oArJuGJNcVeyeZ/+Ua1b/mD&#xA;uP8Ak02KpliqUaj/AL1t8h+rMvF9Kqdr/vTF/rDJT+kqneYSoHVf7uP5n9WX4OZVLcyVdirsVRml&#xA;f70N/qH9YynPyVNMxVcSAKnYDqcVeQ6LM0v5j60behDXOplJjuhrBo3ShqfH38c22u56f/hEv+mh&#xA;dpA/4FP/AIZi+7MzhbaMSeq1ZJASVd9ytRT4ey7eHXvlLq10k8aMErWUglYxTkQPb+J2xVYBcSj4&#xA;v3CniQFIL9akNUFRttt9BxVUjhjjFFH0kljvvuTU4qvxV2KuxV2KuxV2KuxV2KuxV2Kr4P7+P/WH&#xA;68jLkVT3MFXYqltx/wApLYf8wd5/ydtcVeQ+RdG0+3/5yF8xXdpeXEkiWtxBcxXeoS3jEs1tIojh&#xA;mghkhWPfrNKu440GKpvrfmX845or+GXy5ax6I63Mc9w5CzJb8ivOguHFfS5NUA9Bt8VEVerQmYoD&#xA;MqpJ3VGLj7yqfqxVK9R/3rb5D9WZeL6VU7X/AHpi/wBYZKf0lU7zCVA6r/dx/M/qy/BzKpbmSrsV&#xA;diqM0r/ehv8AUP6xlOfkqNa7ViUt19dxyB4n4FZdqO/bfqNz7Ziq39W5nlO3qbhhHsEUgU2HU+Px&#xA;E4q8g0XUJx+cnmTTHsrhVtfWvPrZRvSZdQSxjiUNSg/450hqTv26HNrrCJHARvw4CD5HxCaPm7KO&#xA;SP5Ocb9RyYzXuGa/vHzDPuFxLQu3pIQp9NPtg9SC+4oemw+nKnWqkcUUQIjQIGJZuIpVj1J8SfHF&#xA;V+KuxV2KuxV2KuxV2KuxV2KuxV2KuxVfB/fx/wCsP15GXIqnuYKuxVKpjN/imyBVRELK74uGJYn1&#xA;bWtV40H34q8s8m2zQ/8AOQXmIwT3cUEsN01zYPffWIWkrZlZxYrBCbQNyYI8jv6lG4nbdV6t5n/5&#xA;RrVv+YO4/wCTTYqmWKpRqP8AvW3yH6sy8X0qp2v+9MX+sMlP6Sqd5hKgdV/u4/mf1Zfg5lUtzJV2&#xA;Kqbzxo4Qkl2pRFBY79yB0G3U7YqxweZdQtvPY0m4XlZT2tiBbxvw4S3VzcI0hkC82+GBfh2GWavH&#xA;GOkhkr1SymPw4Yn9LmaXS+KJG64Yyl8q2+16AbiFP3UK+oyHgY4qHgQtaNuFXalK5q3DW+jcTL/p&#xA;L+mpArFCzDf/AIyjgx+gL71xVLL/AEvT4NUk1CGBY7y5gjgnlWo5RwPK8akdPha4kPTvmTg5Kp5e&#xA;rsVdirsVdirsVdirsVdirsVdirsVdirsVXwf38f+sP15GXIqnuYKuxVLbj/lJbD/AJg7z/k7a4q8&#xA;98n6brn/ACt3WdR1HRLvR7V7eV7KSSRLqG5eZ4kmkE1vEojPG2iIinmc/wC+wtHoq9C8z/8AKNat&#xA;/wAwdx/yabFUyxVKNR/3rb5D9WZeL6VU7X/emL/WGSn9JVO8wlQOq/3cfzP6svwcyqVSyxxKGc0B&#xA;IUUBJJPQADfMlVP9/OveGJgwIP8AeHsGBBov4n5HFWleKN2jhiLOWHqlRQVoByZzSpoBXqcVQY8u&#xA;3Go+Y7C6uPQaxt45Wu4wvGVpEdGtKOF5MsfKXkCwX4vs5TqSTAAnYG/i3Yc8sd8P8UTE+4szVVVQ&#xA;qgKo6AbDMVpbxVLdV/vE/wBX+OZODkqBy9XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqvg/v4/wDW&#xA;H68jLkVT3MFXYqltx/ykth/zB3n/ACdtcVTLFXmXnDTfzb5Xkttq1p/h5Yrlrq3dU9V4DI7hRSCo&#xA;K23wbPuaGoo3JV6VCJggEzK8ndkUoPuLP+vFUr1H/etvkP1Zl4vpVTtf96Yv9YZKf0lU6d0jRpJG&#xA;CIgLO7GgAG5JJzCVhOqeZbhfPE2iyyiO2ktLF7GKRRUzSnUHmdePx0MdooPMgDjsPi32MYQjghL+&#xA;KeScf9LGBH3ybceCU4ykOUBZ91xj98gi4TFu9uPrE3FQ1w2wZa/78AoR1NF2r4YGpVNsZVpcEOKM&#xA;DGtVQqx6MtTy22329sVVgAAABQDYAYqjdK/3ob/UP6xlOfkqaZiq7FUt1X+8T/V/jmTg5KgcvV2K&#xA;uxV2KuxV2KuxV2KuxV2KuxV2KuxV2Kr4P7+P/WH68jLkVT3MFXYqlUwm/wAU2RLKYjZXfFApDA+r&#xA;a1q3Kh+7FU1xVLfM/wDyjWrf8wdx/wAmmxVMsVSjUf8AetvkP1Zl4vpVi3mPzlbeX5tHu5njj0y5&#xA;v0tr69lWQxxxSQTOjqyA/wC7Y0FacaHelajKhijLHklI/RCx/poj7iWePGZyEYi5HYMxiZpRFJEP&#xA;rTcQyXTkJFxkNSU4g1oOm3+y65qmJFbMe1/yXY3Xm7SvNNyyS3mnWl5ZopiUMfrTwsp9QUbjEsci&#xA;hW5f3hNR3yMRJ2PKO48idifiGUcsoggHaQo+6wfvA+SYZkMHYq7FUZpX+9Df6h/WMpz8lTTMVXYq&#xA;luq/3if6v8cycHJUDl6uxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVfB/fx/6w/XkZciqe5gq7FUtu&#xA;P+UlsP8AmDvP+TtriqZYqlvmf/lGtW/5g7j/AJNNiqLmu0QMIx6kgrQdEDDajPTiu5+ftirz/TJP&#xA;PV55m8xjXEij0mOeL/DkqIyI8DRAt6kLMJWZSeLc+I5V4imZkKv0/TQ58+L+L4Xy8m+fh+FGv7zi&#xA;lf8AVqPD9vEyOHT7SaWOO6RbpC4ISZVdQR0otOO1PDDk+ktMZEGxzZIAAAAKAbADMJCB1X+7j+Z/&#xA;Vl+DmVSyo+7rmSreKuxVGaUQZ2I6cD+sZTn5KmmYquJA64qluq/3if6v8cycHJUDl6tVFad8VbxV&#xA;2KtAg9MVbxVokDrireKuxVqorTvireKuxVoEHpireKr4SBNGTsAw/XkZciqe5gq7FUsuP+UlsP8A&#xA;mCvP+TtriqZ4qxP8ytO1O70BZbG5njWzlWa7tLcuDdQfZkhYx8mCsrHkeD0FTxJAxVE6No17Np1p&#xA;eS6jqFvPPGlw1tcJZGSB5I/ijp9WCoy8ircQO+KoqXy5cSuXfWb0sf8AJs/+yfLI5SBSsV81HWdE&#xA;1XSo7WPVdUinZn+tQfVuMDqVjpIq2cn21m+CpFW60FWBOUkUrMf0Tf8A/V6vP+As/wDsnypVObQr&#xA;uYASazekDcfDZj/sXyUZkclYP5Qv9U1rX7+wkt9W061jE0q6jMIPTlaGRIAAsllFxLruBX9k9qMZ&#xA;+NJWZ/4Yl/6vF7/wNp/2T4+NJUq80WN9o2hXWp2tzqOp3FuEKWMItfUk5OqUHG1c7Bq9O2PjSVT8&#xA;kW+pajosd3JNqWkSKTCLSdbYuFSlK87SNqj7LfD9oGhI3MZZCeasi/RN/wD9Xq8/4Cz/AOyfIKxH&#xA;8wdZ17y9Dp62kGs68buej/VIrYpD6I9VTI0dpKwLOoVarxPdh3VZTNoFzMQZNYvSRsPhtB+q3ycZ&#xA;kclU/wDDMn/V3vf+BtP+yfJeNJWJabNrNz53vtFmtdVtbSH93FrLm1aKZY05gqotKLRnINW7pStW&#xA;4PjSVlv+GZP+rve/8Daf9k+PjSVB6xo91p+kX1/Be6hezWlvLPFZQi09SZo0LrEn+j/acjiMfGkq&#xA;TeQE1HzBoj314uqaHKJ3UWdyLYuQyrKXq1pF+1KVNBSoNCRj40lZL/hmT/q73v8AwNp/2T4+NJWP&#xA;ec7TVtIsraWyN/qokmpMitBH6SxI0yyn07KclecYU7d9q9MfGkqcabodzeada3c1/qFpLcQxyyWs&#xA;q2nqRM6hjG/+j/aUmhx8aSon/DMn/V3vf+BtP+yfHxpKw57zWP8AlYP+H/qWsfUogETXv9F+rsJY&#xA;kmbiBaEfCw4mrDoaeGPjSVmP+GZP+rve/wDA2n/ZPj40lU7ny9PDbyypqd9K0aM6xKtpyYqKhR/o&#xA;/U4+NJWL/l/Lq3mC1uXvbfVdC9IpJGlx9Wb1DOXdqcrSLcUD0/lda0aqq+NJWWf4Zk/6u97/AMDa&#xA;f9k+PjSVjfndNV0Syie0TU9YS4LRzJB9XBjB4gE8LSU0oxJPamA5ZKmnlGfXNd0G31O9n1LSLmbl&#xA;6mn3C2ZkjINKNW1Tf6PlUbmtU5/RN/8A9Xq8/wCAs/8AsnxVhup6z5g0fXZ746ZqWsmy9extamIR&#xA;vHKtjP6iCC0RiZGcxrVivJCDQElVXomKuxV2KuxV2KuxV2KuxV2KuxVgv5l+UPN2sSWGp+VdXksd&#xA;T08SL9Tknkisp0dalZkiHJiSoUHkKde2KoDXvKX5k6v5lsp5tTii0WJ9OuLm2triSFC9tPBLPGsQ&#xA;i5NVo5CGaX4lKqV2rirEJPyp/Oy21bUNS0nzLHbTXGoTPaq1xI8a2U/BqFHhcB/ViVj1+EcdwaYq&#xA;yPzfo35xSa3croeqGC31O8SK1nVxJFbWZgcSs0LQgQvG3Eq3OTm3YYqhvL3kv857PzBpt5d63Eum&#xA;/XGn1a2a6e6kkh9OGNELNbQq1FjcCirQmtSfixVfpfkP82F0/VtM1HXS9pPC8VjIbt5pQxuIXicS&#xA;GCN42jRJialuXqKv+68VS698jfn/AC6nzXzJE+n24jNpGLp4JC0duYQZGW2bkS0jO1ahiBUGgoqr&#xA;XPkL874bQ/ofzIlrcXM8U90k9wbgJxjKkJI1sCfjKs/wjnT7P7OKq8Hk387bfRQltrUCatNrcWoX&#xA;00ty83qWkVjbwPGrG3RVWWeB39MR0AYCp3xVKbf8uvz4N1cx3OuQtZX+o6fe3TG/lMirZ2xiuVTj&#xA;apxFzN6coVaBBGB8VTir2DynY6lYeV9IsdUl9bUrWzghvZjI0xeaONVkb1GCs9WBNSN8VTXFXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FX//2Q==</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/">
         <xapMM:DocumentID>uuid:B7A0312D1D0EEB119D2CC0335C49806D</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:EB8D03180F11EB11B4C0BEF5232D7BA6</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource"/>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:stFnt="http://ns.adobe.com/xap/1.0/sType/Font#"
            xmlns:xapG="http://ns.adobe.com/xap/1.0/g/">
         <xapTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>800.000000</stDim:w>
            <stDim:h>600.000000</stDim:h>
            <stDim:unit>Points</stDim:unit>
         </xapTPg:MaxPageSize>
         <xapTPg:NPages>1</xapTPg:NPages>
         <xapTPg:HasVisibleTransparency>True</xapTPg:HasVisibleTransparency>
         <xapTPg:HasVisibleOverprint>False</xapTPg:HasVisibleOverprint>
         <xapTPg:Fonts>
            <rdf:Bag>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>Helvetica-Bold</stFnt:fontName>
                  <stFnt:fontFamily>Helvetica</stFnt:fontFamily>
                  <stFnt:fontFace>Bold</stFnt:fontFace>
                  <stFnt:fontType>TrueType</stFnt:fontType>
                  <stFnt:versionString>6.1d18e1</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>Helvetica.dfont</stFnt:fontFileName>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>Helvetica</stFnt:fontName>
                  <stFnt:fontFamily>Helvetica</stFnt:fontFamily>
                  <stFnt:fontFace>Regular</stFnt:fontFace>
                  <stFnt:fontType>TrueType</stFnt:fontType>
                  <stFnt:versionString>6.1d18e1</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>Helvetica.dfont</stFnt:fontFileName>
               </rdf:li>
            </rdf:Bag>
         </xapTPg:Fonts>
         <xapTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xapTPg:PlateNames>
         <xapTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xapG:groupName>Default Swatch Group</xapG:groupName>
                  <xapG:groupType>0</xapG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xapTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -634.781 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 634.781 li
1071.64 634.781 li
1071.64 0 li
cp
clp
[1 0 0 1 0 0 ]ct
71.487 623.367 mo
71.487 51.867 li
1063.4 51.867 li
1063.4 623.367 li
71.487 623.367 li
false sop
/0 
[/DeviceRGB] /CSA add_res
1 1 1 rgb
ef
66.609 579.24 mo
66.609 7.992 li
1058.02 7.992 li
1058.02 578.988 li
66.357 578.988 li
66.357 579.492 li
1058.27 579.492 li
1058.45 579.411 li
1058.53 579.24 li
1058.53 7.74 li
1058.45 7.56 li
1058.27 7.488 li
66.357 7.488 li
66.186 7.56 li
66.114 7.74 li
66.114 579.24 li
66.609 579.24 li
f
66.114 7.821 mo
66.114 17.739 li
66.609 17.739 li
66.609 7.821 li
66.114 7.821 li
66.609 579.24 mo
66.609 569.241 li
66.114 569.241 li
66.114 579.24 li
66.609 579.24 li
66.609 579.24 mo
66.609 7.74 li
66.114 7.74 li
66.114 579.24 li
66.609 579.24 li
66.357 579.492 mo
1058.27 579.492 li
1058.27 578.988 li
66.357 578.988 li
66.357 579.492 li
1058.53 579.24 mo
1058.53 7.74 li
1058.02 7.74 li
1058.02 579.24 li
1058.53 579.24 li
66.609 579.24 mo
66.609 7.74 li
66.114 7.74 li
66.114 579.24 li
66.609 579.24 li
66.357 7.992 mo
1058.27 7.992 li
1058.27 7.488 li
66.357 7.488 li
66.357 7.992 li
66.357 579.492 mo
1058.27 579.492 li
1058.27 578.988 li
66.357 578.988 li
66.357 579.492 li
0 0 0 rgb
f
%ADOBeginSubsetFont: Helvetica Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2020 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /Helvetica def/FontInfo 5 dict dup begin/ItalicAngle 0 def/FSType 0 defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 48 /zero putdef/FontBBox {-951 -481 1446 1122} defendsystemdict begindup /Private7 dict dup begin/|- {def} def/| {put} def/BlueValues [0 0] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings2 dict dup begin/.notdef <1C60D8A8C9B66F631635D26BA635582B3FDE9B3DD75794781396E648A7CA97DB1343CA> |-/zero <1C60D8A8C9B7EF322BB70D1045F9F84CF5A9E636DA48B0B84345CFB17CDCD64AA529BD23C358113A6F12A7F927F67801E7716DEDB8FBB50D28956279879C3943A67386E5304D963AB3E064E7022317006AA79A8777799C5D39502A7CB330EAEEC28837821C5437B109C741C1D7BCD8EEC785ED017624EE945A52A677F5B0E3B0C4781A3901> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/EOYKKX+Helvetica /Helvetica findfont ct_VMDictPut/EOYKKX+Helvetica*1 [48{/.notdef}rp /zero 207{/.notdef}rp]EOYKKX+Helvetica nfEOYKKX+Helvetica*1 [16 0 0 -16 0 0 ]msf61.9434 596.91 mo(0)sh156.276 7.821 mo
156.276 17.739 li
156.78 17.739 li
156.78 7.821 li
156.276 7.821 li
156.78 579.24 mo
156.78 569.241 li
156.276 569.241 li
156.276 579.24 li
156.78 579.24 li
f
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2020 Adobe System Incorporated. All rights reserved.systemdict beginEOYKKX+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/one <1C60D8A8C9B7EF322B8DEEDAE6F72EF3709E16C7A593AF17F17D72A3907C7468090579C66DE0263BFE> |-systemdict /gcheck known {setglobal} if end {end} ifendEOYKKX+Helvetica /Encoding getdup 49 /one putpop%ADOEndSubsetFont
/EOYKKX+Helvetica*1 [48{/.notdef}rp /zero /one 206{/.notdef}rp]EOYKKX+Helvetica nfEOYKKX+Helvetica*1 [16 0 0 -16 0 0 ]msf147.693 596.91 mo(10)[8.89844 0 ]xsh246.447 7.821 mo
246.447 17.739 li
246.942 17.739 li
246.942 7.821 li
246.447 7.821 li
246.942 579.24 mo
246.942 569.241 li
246.447 569.241 li
246.447 579.24 li
246.942 579.24 li
f
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2020 Adobe System Incorporated. All rights reserved.systemdict beginEOYKKX+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/two <1C60D8A8C9B7EF327699F81B0CD59DC4BD38D48AF11B5B9C1D7787A22BDC09D7BCED9A76C2312055A28AC829584109043EE366AF8632D6D62E9BBD6A4357093750D4015EA59C9F538C44C55AD0DB14FEE0C7267845EB7EFBD514024AA1A03530A8941AD7B5F508335B2FDCA37E6B0627146A6F144DB9DD7DCA6BE86290FB46DD6A2918F4C2C2BDEECA159D78> |-systemdict /gcheck known {setglobal} if end {end} ifendEOYKKX+Helvetica /Encoding getdup 50 /two putpop%ADOEndSubsetFont
/EOYKKX+Helvetica*1 [48{/.notdef}rp /zero /one /two 205{/.notdef}rp]EOYKKX+Helvetica nfEOYKKX+Helvetica*1 [16 0 0 -16 0 0 ]msf237.865 596.91 mo(20)[8.89844 0 ]xsh336.609 7.821 mo
336.609 17.739 li
337.113 17.739 li
337.113 7.821 li
336.609 7.821 li
337.113 579.24 mo
337.113 569.241 li
336.609 569.241 li
336.609 579.24 li
337.113 579.24 li
f
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2020 Adobe System Incorporated. All rights reserved.systemdict beginEOYKKX+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/three <1C60D8A8C9B7EF322B8D6E3793F9C339FF2D01F55F75395A69A42725328E1B8E66EAFF6BAC335B6E345906CE7152DDCE6F991DD2E99A50D14EF5FE716864AD89B92005EB56184F6465E294CACBF73EC4E77A27D9ACFF3348FE551D23745FD8C1F5363E223D2FE146B2E36748D97805004E8C37168D3D6622BBF76ADD739801325A4BB7457A49C531154E36C58F381AB30F164CAE6510100AF5FE6405CBE42D3AEC01131A86CADB27645F055DEC901ADBC964660F336098380F7A314362D92502B680C534E053458ABD592A4A4D87F9589307764B161F9884> |-systemdict /gcheck known {setglobal} if end {end} ifendEOYKKX+Helvetica /Encoding getdup 51 /three putpop%ADOEndSubsetFont
/EOYKKX+Helvetica*1 [48{/.notdef}rp /zero /one /two /three 204{/.notdef}rp]EOYKKX+Helvetica nfEOYKKX+Helvetica*1 [16 0 0 -16 0 0 ]msf328.029 596.91 mo(30)[8.89844 0 ]xsh426.777 7.82129 mo
426.777 17.7383 li
427.277 17.7383 li
427.277 7.82129 li
cp
427.277 579.238 mo
427.277 569.238 li
426.777 569.238 li
426.777 579.238 li
cp
f
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2020 Adobe System Incorporated. All rights reserved.systemdict beginEOYKKX+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/four <1C60D8A8C9B7EF32298E3DD46F18108137336D1A5C627A90D059BB18158BA2A55FF5DE20CE460964DAF45C08A7D9820A784F4A44F7E1> |-systemdict /gcheck known {setglobal} if end {end} ifendEOYKKX+Helvetica /Encoding getdup 52 /four putpop%ADOEndSubsetFont
/EOYKKX+Helvetica*1 [48{/.notdef}rp /zero /one /two /three /four 203{/.notdef}rp]EOYKKX+Helvetica nfEOYKKX+Helvetica*1 [16 0 0 -16 0 0 ]msf418.193 596.91 mo(40)[8.89844 0 ]xsh516.942 7.821 mo
516.942 17.739 li
517.446 17.739 li
517.446 7.821 li
516.942 7.821 li
517.446 579.24 mo
517.446 569.241 li
516.942 569.241 li
516.942 579.24 li
517.446 579.24 li
f
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2020 Adobe System Incorporated. All rights reserved.systemdict beginEOYKKX+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/five <1C60D8A8C9B7EF3277A9C7C54B35CB479E4C110330EAD203F40A20826414A4CC0E90EF4AAF68DCFEF4ABE6CFF07A7C5FBDADC90A7F87ECB382B602F56451722980F3A3AC74E582BA9C9CEC3027EC489F453112D8FBBD217B656538AC90D034F616E885784C813B1555F6DEF92ECF082193A9672305F8A984DE35F68D1502A8C10EB08C528E24E38813C68D1F86D01BCA9E> |-systemdict /gcheck known {setglobal} if end {end} ifendEOYKKX+Helvetica /Encoding getdup 53 /five putpop%ADOEndSubsetFont
/EOYKKX+Helvetica*1 [48{/.notdef}rp /zero /one /two /three /four /five 202{/.notdef}rp]EOYKKX+Helvetica nfEOYKKX+Helvetica*1 [16 0 0 -16 0 0 ]msf508.357 596.91 mo(50)[8.89844 0 ]xsh607.113 7.821 mo
607.113 17.739 li
607.608 17.739 li
607.608 7.821 li
607.113 7.821 li
607.608 579.24 mo
607.608 569.241 li
607.113 569.241 li
607.113 579.24 li
607.608 579.24 li
f
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2020 Adobe System Incorporated. All rights reserved.systemdict beginEOYKKX+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/six <1C60D8A8C9B7EF322BACEC3D6ABEF2D493EDC493AA22ED42125C47DF2396DE843240A24151C3116F0DCEE068EC75B404A70B0E3A92C2307D093030C4F08B5CC0A75F4F4D7C70C5CD3B07E718D5DA84710CE02FF093BE8B5ED477F329DF9AC8554D46651B2A99890C549B5152AB0899BB31DC610CEE59FE1F4C3BE037BFF7F7AE7EDC6D596E9E9398287209A7C703150F7EA84F1C65DCD68CCC47A3B7F9EF77F610D53784F89B61AB4160F9D214F618A6C0032B66C3DB575FE49E073B7AB1C1C6CA> |-systemdict /gcheck known {setglobal} if end {end} ifendEOYKKX+Helvetica /Encoding getdup 54 /six putpop%ADOEndSubsetFont
/EOYKKX+Helvetica*1 [48{/.notdef}rp /zero /one /two /three /four /five /six 201{/.notdef}rp]EOYKKX+Helvetica nfEOYKKX+Helvetica*1 [16 0 0 -16 0 0 ]msf598.529 596.91 mo(60)[8.89844 0 ]xsh697.275 7.821 mo
697.275 17.739 li
697.779 17.739 li
697.779 7.821 li
697.275 7.821 li
697.779 579.24 mo
697.779 569.241 li
697.275 569.241 li
697.275 579.24 li
697.779 579.24 li
f
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2020 Adobe System Incorporated. All rights reserved.systemdict beginEOYKKX+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/seven <1C60D8A8C9B7EF326C86E2C8FFDAFAAAF8B2EE45CDE12ADFFACC9341D807009D1D241E6029AF890199C52728BBB0F3ADB8945AB4753C3621AAE632A8EC4FD7F79CCD78EF> |-systemdict /gcheck known {setglobal} if end {end} ifendEOYKKX+Helvetica /Encoding getdup 55 /seven putpop%ADOEndSubsetFont
/EOYKKX+Helvetica*1 [48{/.notdef}rp /zero /one /two /three /four /five /six /seven 200{/.notdef}rp]EOYKKX+Helvetica nfEOYKKX+Helvetica*1 [16 0 0 -16 0 0 ]msf688.693 596.91 mo(70)[8.89844 0 ]xsh787.446 7.821 mo
787.446 17.739 li
787.941 17.739 li
787.941 7.821 li
787.446 7.821 li
787.941 579.24 mo
787.941 569.241 li
787.446 569.241 li
787.446 579.24 li
787.941 579.24 li
f
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2020 Adobe System Incorporated. All rights reserved.systemdict beginEOYKKX+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/eight <1C60D8A8C9B7EF322BB1E6B7658B273FB04B6EA2FDD83BE014315CEA310C9045661E4654F5FAA18E921C35D5D5266AB0AB839D962ABE974A291E63893114CACA79253F9F2FA5DBD832A15E9A146C3FAF70E186074467C5FF9BFF3446DA2979E197C33ECF2E6672D0ABB4DD84DADA6F0875D027C1012708E022D3B91B078729D3EB37FF9AB4379F6AE8761C6A64E65D5782F4A15C32B5788322C1277C7EEACA49FCEF1A946497EBAE7710FA41A32E95C02F9037E734AB7501DA6FA4D1255B1B5E2A30AD357C72139096879BB9225AA54D6163D99B65B907C933335C31755E7599F49EDF67E30B707AA1BB3DFB155476D77FA4345C2EDAF4F74461> |-systemdict /gcheck known {setglobal} if end {end} ifendEOYKKX+Helvetica /Encoding getdup 56 /eight putpop%ADOEndSubsetFont
/EOYKKX+Helvetica*1 [48{/.notdef}rp /zero /one /two /three /four /five /six /seven /eight 199{/.notdef}rp]EOYKKX+Helvetica nfEOYKKX+Helvetica*1 [16 0 0 -16 0 0 ]msf778.865 596.91 mo(80)[8.89844 0 ]xsh877.608 7.821 mo
877.608 17.739 li
878.112 17.739 li
878.112 7.821 li
877.608 7.821 li
878.112 579.24 mo
878.112 569.241 li
877.608 569.241 li
877.608 579.24 li
878.112 579.24 li
f
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2020 Adobe System Incorporated. All rights reserved.systemdict beginEOYKKX+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/nine <1C60D8A8C9B7EF326B464DF43714564059769E71FFFC685FC18F48C77D53AC88FCBBC12F494C4F63EED0BC4E888DFF584BE7D2D816586B9A4264CD850BFF6D2740D48815051A0D66B2C6D52B7F71CA6A6822ACB78F611F031D0F31B29F8F7C82DE8795DAD0A78F20A0C158D57307DA2BB022E8173A55705FD29D68A57A980A4A8A50AA38F194766F67D892E4FFF95162BD634B3243B2EC97981B62535F84C02C407EE586AAFD00BF4926CA361322725073A4D1FB7F2047C32550A5DE15> |-systemdict /gcheck known {setglobal} if end {end} ifendEOYKKX+Helvetica /Encoding getdup 57 /nine putpop%ADOEndSubsetFont
/EOYKKX+Helvetica*1 [48{/.notdef}rp /zero /one /two /three /four /five /six /seven /eight /nine 198{/.notdef}rp]EOYKKX+Helvetica nfEOYKKX+Helvetica*1 [16 0 0 -16 0 0 ]msf869.029 596.91 mo(90)[8.89844 0 ]xsh967.779 7.821 mo
967.779 17.739 li
968.274 17.739 li
968.274 7.821 li
967.779 7.821 li
968.274 579.24 mo
968.274 569.241 li
967.779 569.241 li
967.779 579.24 li
968.274 579.24 li
f
EOYKKX+Helvetica*1 [16 0 0 -16 0 0 ]msf954.693 596.91 mo(100)[8.89844 8.89844 0 ]xsh1058.03 7.82129 mo
1058.03 17.7383 li
1058.53 17.7383 li
1058.53 7.82129 li
cp
1058.53 579.238 mo
1058.53 569.238 li
1058.03 569.238 li
1058.03 579.238 li
cp
f
EOYKKX+Helvetica*1 [16 0 0 -16 0 0 ]msf1044.94 596.91 mo(110)[8.89844 8.89844 0 ]xsh1058.28 578.988 mo
1048.28 578.988 li
1048.28 579.488 li
1058.28 579.488 li
cp
66.3599 579.488 mo
76.2769 579.488 li
76.2769 578.988 li
66.3599 578.988 li
cp
f
EOYKKX+Helvetica*1 [16 0 0 -16 0 0 ]msf54.6074 585.152 mo(0)sh1058.28 483.738 mo
1048.28 483.738 li
1048.28 484.238 li
1058.28 484.238 li
cp
66.3599 484.238 mo
76.2769 484.238 li
76.2769 483.738 li
66.3599 483.738 li
cp
f
EOYKKX+Helvetica*1 [16 0 0 -16 0 0 ]msf36.7793 489.902 mo(100)[8.89844 8.89844 0 ]xsh1058.28 388.488 mo
1048.28 388.488 li
1048.28 388.988 li
1058.28 388.988 li
cp
66.3599 388.988 mo
76.2769 388.988 li
76.2769 388.488 li
66.3599 388.488 li
cp
f
EOYKKX+Helvetica*1 [16 0 0 -16 0 0 ]msf36.7793 394.652 mo(200)[8.89844 8.89844 0 ]xsh1058.28 293.238 mo
1048.28 293.238 li
1048.28 293.738 li
1058.28 293.738 li
cp
66.3599 293.738 mo
76.2769 293.738 li
76.2769 293.238 li
66.3599 293.238 li
cp
f
EOYKKX+Helvetica*1 [16 0 0 -16 0 0 ]msf36.7793 299.41 mo(300)[8.89844 8.89844 0 ]xsh1058.28 197.988 mo
1048.28 197.988 li
1048.28 198.488 li
1058.28 198.488 li
cp
66.3599 198.488 mo
76.2769 198.488 li
76.2769 197.988 li
66.3599 197.988 li
cp
f
EOYKKX+Helvetica*1 [16 0 0 -16 0 0 ]msf36.7793 204.152 mo(400)[8.89844 8.89844 0 ]xsh1058.28 102.738 mo
1048.28 102.738 li
1048.28 103.238 li
1058.28 103.238 li
cp
66.3599 103.238 mo
76.2769 103.238 li
76.2769 102.738 li
66.3599 102.738 li
cp
f
EOYKKX+Helvetica*1 [16 0 0 -16 0 0 ]msf36.7793 108.902 mo(500)[8.89844 8.89844 0 ]xsh1058.28 7.57129 mo
1048.28 7.57129 li
1048.28 8.07129 li
1058.28 8.07129 li
cp
66.3599 8.07129 mo
76.2769 8.07129 li
76.2769 7.57129 li
66.3599 7.57129 li
cp
f
EOYKKX+Helvetica*1 [16 0 0 -16 0 0 ]msf36.7793 13.7383 mo(600)[8.89844 8.89844 0 ]xsh1058.53 579.24 mo
1058.53 7.74 li
1058.02 7.74 li
1058.02 579.24 li
1058.53 579.24 li
66.609 579.24 mo
66.609 7.74 li
66.114 7.74 li
66.114 579.24 li
66.609 579.24 li
66.357 7.992 mo
1058.27 7.992 li
1058.27 7.488 li
66.357 7.488 li
66.357 7.992 li
66.357 579.492 mo
1058.27 579.492 li
1058.27 578.988 li
66.357 578.988 li
66.357 579.492 li
f
108.443 554.155 mo
108.443 549.571 li
104.443 549.571 li
104.443 554.155 li
0 0 1 rgb
f
112.941 560.988 mo
112.941 546.489 li
108.945 546.489 li
108.945 560.988 li
112.941 560.988 li
0 0 0 rgb
f
117.441 559.818 mo
117.441 547.155 li
113.445 547.155 li
113.445 559.818 li
117.441 559.818 li
1 0 0 rgb
f
159.444 533.403 mo
159.444 515.907 li
155.439 515.907 li
155.439 533.403 li
159.444 533.403 li
0 0 1 rgb
f
163.944 537.489 mo
163.944 527.742 li
159.939 527.742 li
159.939 537.489 li
163.944 537.489 li
0 0 0 rgb
f
168.443 537.571 mo
168.443 531.155 li
164.443 531.155 li
164.443 537.571 li
1 0 0 rgb
f
217.193 504.571 mo
217.193 477.905 li
213.193 477.905 li
213.193 504.571 li
0 0 1 rgb
f
221.697 518.742 mo
221.697 502.317 li
217.692 502.317 li
217.692 518.742 li
221.697 518.742 li
0 0 0 rgb
f
226.197 507.987 mo
226.197 493.236 li
222.192 493.236 li
222.192 507.987 li
226.197 507.987 li
1 0 0 rgb
f
352.692 438.318 mo
352.692 412.074 li
348.696 412.074 li
348.696 438.318 li
352.692 438.318 li
0 0 1 rgb
f
357.192 455.49 mo
357.192 445.491 li
353.196 445.491 li
353.196 455.49 li
357.192 455.49 li
0 0 0 rgb
f
361.693 444.238 mo
361.693 419.238 li
357.693 419.238 li
357.693 444.238 li
1 0 0 rgb
f
447.277 397.821 mo
447.277 276.738 li
443.277 276.738 li
443.277 397.821 li
0 0 1 rgb
f
451.773 408.735 mo
451.773 387.99 li
447.777 387.99 li
447.777 408.735 li
451.773 408.735 li
0 0 0 rgb
f
456.273 397.071 mo
456.273 300.402 li
452.277 300.402 li
452.277 397.071 li
456.273 397.071 li
1 0 0 rgb
f
965.529 131.742 mo
965.529 17.901 li
961.524 17.901 li
961.524 131.742 li
965.529 131.742 li
0 0 1 rgb
f
970.029 161.406 mo
970.029 103.401 li
966.024 103.401 li
966.024 161.406 li
970.029 161.406 li
0 0 0 rgb
f
gsave
66.357 579.321 mo
1058.36 579.321 li
1058.36 7.821 li
66.357 7.821 li
66.357 579.321 li
clp
974.61 164.988 mo
974.61 110.405 li
970.61 110.405 li
970.61 164.988 li
1 0 0 rgb
f
66.483 573.876 mo
66.915 573.633 li
66.672 573.192 li
66.24 573.435 li
66.483 573.876 li
70.407 571.68 mo
75.645 568.755 li
75.402 568.314 li
70.164 571.239 li
70.407 571.68 li
79.137 566.802 mo
79.578 566.559 li
79.335 566.127 li
78.894 566.37 li
79.137 566.802 li
83.07 564.606 mo
88.308 561.681 li
88.065 561.249 li
82.827 564.174 li
83.07 564.606 li
91.8 559.737 mo
92.241 559.485 li
91.989 559.053 li
91.557 559.296 li
91.8 559.737 li
95.733 557.541 mo
100.971 554.616 li
100.728 554.175 li
95.49 557.1 li
95.733 557.541 li
104.463 552.663 mo
104.895 552.42 li
104.652 551.979 li
104.22 552.222 li
104.463 552.663 li
108.387 550.467 mo
113.625 547.542 li
113.382 547.11 li
108.144 550.035 li
108.387 550.467 li
117.117 545.589 mo
117.558 545.346 li
117.315 544.914 li
116.874 545.157 li
117.117 545.589 li
121.05 543.402 mo
126.288 540.468 li
126.045 540.036 li
120.807 542.961 li
121.05 543.402 li
129.78 538.524 mo
130.212 538.281 li
129.969 537.84 li
129.537 538.083 li
129.78 538.524 li
133.704 536.328 mo
138.942 533.403 li
138.699 532.962 li
133.461 535.887 li
133.704 536.328 li
142.434 531.45 mo
142.875 531.207 li
142.632 530.775 li
142.191 531.018 li
142.434 531.45 li
146.367 529.254 mo
151.605 526.329 li
151.362 525.897 li
146.124 528.822 li
146.367 529.254 li
155.097 524.385 mo
155.538 524.133 li
155.286 523.701 li
154.854 523.944 li
155.097 524.385 li
159.03 522.189 mo
164.268 519.264 li
164.025 518.823 li
158.787 521.748 li
159.03 522.189 li
167.76 517.311 mo
168.192 517.068 li
167.949 516.627 li
167.517 516.87 li
167.76 517.311 li
171.684 515.115 mo
176.922 512.19 li
176.679 511.758 li
171.441 514.683 li
171.684 515.115 li
180.414 510.237 mo
180.855 509.994 li
180.612 509.562 li
180.171 509.805 li
180.414 510.237 li
184.347 508.05 mo
189.585 505.125 li
189.342 504.684 li
184.104 507.609 li
184.347 508.05 li
193.077 503.172 mo
193.509 502.929 li
193.266 502.488 li
192.834 502.731 li
193.077 503.172 li
197.001 500.976 mo
202.239 498.051 li
201.996 497.61 li
196.758 500.544 li
197.001 500.976 li
205.731 496.098 mo
206.172 495.855 li
205.929 495.423 li
205.488 495.666 li
205.731 496.098 li
209.664 493.902 mo
214.902 490.977 li
214.659 490.545 li
209.421 493.47 li
209.664 493.902 li
218.394 489.033 mo
218.835 488.79 li
218.583 488.349 li
218.151 488.592 li
218.394 489.033 li
222.327 486.837 mo
227.565 483.912 li
227.322 483.471 li
222.075 486.396 li
222.327 486.837 li
231.057 481.959 mo
231.489 481.716 li
231.246 481.275 li
230.814 481.527 li
231.057 481.959 li
234.981 479.763 mo
240.219 476.838 li
239.976 476.406 li
234.738 479.331 li
234.981 479.763 li
243.711 474.885 mo
244.152 474.642 li
243.909 474.21 li
243.468 474.453 li
243.711 474.885 li
247.644 472.698 mo
252.882 469.773 li
252.639 469.332 li
247.401 472.257 li
247.644 472.698 li
256.374 467.82 mo
256.806 467.577 li
256.563 467.136 li
256.131 467.379 li
256.374 467.82 li
260.298 465.624 mo
265.536 462.699 li
265.293 462.258 li
260.055 465.192 li
260.298 465.624 li
269.028 460.746 mo
269.469 460.503 li
269.226 460.071 li
268.785 460.314 li
269.028 460.746 li
272.961 458.55 mo
278.199 455.625 li
277.956 455.193 li
272.718 458.118 li
272.961 458.55 li
281.691 453.681 mo
282.132 453.438 li
281.88 452.997 li
281.448 453.24 li
281.691 453.681 li
285.624 451.485 mo
290.862 448.56 li
290.619 448.119 li
285.372 451.044 li
285.624 451.485 li
294.354 446.607 mo
294.786 446.364 li
294.543 445.932 li
294.111 446.175 li
294.354 446.607 li
298.278 444.411 mo
303.516 441.486 li
303.273 441.054 li
298.035 443.979 li
298.278 444.411 li
307.008 439.542 mo
307.449 439.29 li
307.206 438.858 li
306.765 439.101 li
307.008 439.542 li
310.941 437.346 mo
316.179 434.421 li
315.936 433.98 li
310.698 436.905 li
310.941 437.346 li
319.671 432.468 mo
320.103 432.225 li
319.86 431.784 li
319.428 432.027 li
319.671 432.468 li
323.595 430.272 mo
328.833 427.347 li
328.59 426.915 li
323.352 429.84 li
323.595 430.272 li
332.325 425.394 mo
332.766 425.151 li
332.523 424.719 li
332.082 424.962 li
332.325 425.394 li
336.258 423.207 mo
341.496 420.273 li
341.253 419.841 li
336.015 422.766 li
336.258 423.207 li
344.988 418.329 mo
345.42 418.086 li
345.177 417.645 li
344.745 417.888 li
344.988 418.329 li
348.921 416.133 mo
354.159 413.208 li
353.907 412.767 li
348.669 415.692 li
348.921 416.133 li
357.651 411.255 mo
358.083 411.012 li
357.84 410.58 li
357.399 410.823 li
357.651 411.255 li
361.575 409.059 mo
366.813 406.134 li
366.57 405.702 li
361.332 408.627 li
361.575 409.059 li
370.305 404.19 mo
370.746 403.947 li
370.503 403.506 li
370.062 403.749 li
370.305 404.19 li
374.238 401.994 mo
379.476 399.069 li
379.233 398.628 li
373.995 401.553 li
374.238 401.994 li
382.968 397.116 mo
383.4 396.873 li
383.157 396.432 li
382.725 396.675 li
382.968 397.116 li
386.892 394.92 mo
392.13 391.995 li
391.887 391.563 li
386.649 394.488 li
386.892 394.92 li
395.622 390.042 mo
396.063 389.799 li
395.82 389.367 li
395.379 389.61 li
395.622 390.042 li
399.555 387.855 mo
404.793 384.93 li
404.55 384.489 li
399.312 387.414 li
399.555 387.855 li
408.285 382.977 mo
408.717 382.734 li
408.474 382.293 li
408.042 382.536 li
408.285 382.977 li
412.209 380.781 mo
417.447 377.856 li
417.204 377.415 li
411.966 380.349 li
412.209 380.781 li
420.948 375.903 mo
421.38 375.66 li
421.137 375.228 li
420.696 375.471 li
420.948 375.903 li
424.872 373.707 mo
430.11 370.782 li
429.867 370.35 li
424.629 373.275 li
424.872 373.707 li
433.602 368.838 mo
434.043 368.595 li
433.8 368.154 li
433.359 368.397 li
433.602 368.838 li
437.535 366.642 mo
442.773 363.717 li
442.53 363.276 li
437.292 366.201 li
437.535 366.642 li
446.265 361.764 mo
446.697 361.521 li
446.454 361.08 li
446.022 361.332 li
446.265 361.764 li
450.189 359.568 mo
455.427 356.643 li
455.184 356.211 li
449.946 359.136 li
450.189 359.568 li
458.919 354.69 mo
459.36 354.447 li
459.117 354.015 li
458.676 354.258 li
458.919 354.69 li
462.852 352.503 mo
468.09 349.578 li
467.847 349.137 li
462.609 352.062 li
462.852 352.503 li
471.582 347.625 mo
472.014 347.382 li
471.771 346.941 li
471.339 347.184 li
471.582 347.625 li
475.506 345.429 mo
480.744 342.504 li
480.501 342.072 li
475.263 344.997 li
475.506 345.429 li
484.236 340.551 mo
484.677 340.308 li
484.434 339.876 li
483.993 340.119 li
484.236 340.551 li
488.169 338.364 mo
493.407 335.43 li
493.164 334.998 li
487.926 337.923 li
488.169 338.364 li
496.899 333.486 mo
497.34 333.243 li
497.088 332.802 li
496.656 333.045 li
496.899 333.486 li
500.832 331.29 mo
506.07 328.365 li
505.827 327.924 li
500.58 330.849 li
500.832 331.29 li
509.562 326.412 mo
509.994 326.169 li
509.751 325.737 li
509.319 325.98 li
509.562 326.412 li
513.486 324.216 mo
518.724 321.291 li
518.481 320.859 li
513.243 323.784 li
513.486 324.216 li
522.216 319.347 mo
522.657 319.095 li
522.414 318.663 li
521.973 318.906 li
522.216 319.347 li
526.149 317.151 mo
531.387 314.226 li
531.144 313.785 li
525.906 316.71 li
526.149 317.151 li
534.879 312.273 mo
535.311 312.03 li
535.068 311.589 li
534.636 311.832 li
534.879 312.273 li
538.803 310.077 mo
544.041 307.152 li
543.798 306.72 li
538.56 309.645 li
538.803 310.077 li
547.533 305.199 mo
547.974 304.956 li
547.731 304.524 li
547.29 304.767 li
547.533 305.199 li
551.466 303.012 mo
556.704 300.087 li
556.461 299.646 li
551.223 302.571 li
551.466 303.012 li
560.196 298.134 mo
560.628 297.891 li
560.385 297.45 li
559.953 297.693 li
560.196 298.134 li
564.129 295.938 mo
569.367 293.013 li
569.115 292.572 li
563.877 295.506 li
564.129 295.938 li
572.859 291.06 mo
573.291 290.817 li
573.048 290.385 li
572.607 290.628 li
572.859 291.06 li
576.783 288.864 mo
582.021 285.939 li
581.778 285.507 li
576.54 288.432 li
576.783 288.864 li
585.513 283.995 mo
585.954 283.752 li
585.711 283.311 li
585.27 283.554 li
585.513 283.995 li
589.446 281.799 mo
594.684 278.874 li
594.441 278.433 li
589.203 281.358 li
589.446 281.799 li
598.176 276.921 mo
598.608 276.678 li
598.365 276.237 li
597.933 276.489 li
598.176 276.921 li
602.1 274.725 mo
607.338 271.8 li
607.095 271.368 li
601.857 274.293 li
602.1 274.725 li
610.83 269.847 mo
611.271 269.604 li
611.028 269.172 li
610.587 269.415 li
610.83 269.847 li
614.763 267.66 mo
620.001 264.735 li
619.758 264.294 li
614.52 267.219 li
614.763 267.66 li
623.493 262.782 mo
623.925 262.539 li
623.682 262.098 li
623.25 262.341 li
623.493 262.782 li
627.417 260.586 mo
632.655 257.661 li
632.412 257.229 li
627.174 260.154 li
627.417 260.586 li
636.147 255.708 mo
636.588 255.465 li
636.345 255.033 li
635.904 255.276 li
636.147 255.708 li
640.08 253.521 mo
645.318 250.587 li
645.075 250.155 li
639.837 253.08 li
640.08 253.521 li
648.81 248.643 mo
649.251 248.4 li
648.999 247.959 li
648.567 248.202 li
648.81 248.643 li
652.743 246.447 mo
657.981 243.522 li
657.738 243.081 li
652.491 246.006 li
652.743 246.447 li
661.473 241.569 mo
661.905 241.326 li
661.662 240.894 li
661.23 241.137 li
661.473 241.569 li
665.397 239.373 mo
670.635 236.448 li
670.392 236.016 li
665.154 238.941 li
665.397 239.373 li
674.127 234.504 mo
674.568 234.261 li
674.325 233.82 li
673.884 234.063 li
674.127 234.504 li
678.06 232.308 mo
683.298 229.383 li
683.055 228.942 li
677.817 231.867 li
678.06 232.308 li
686.79 227.43 mo
687.222 227.187 li
686.979 226.746 li
686.547 226.998 li
686.79 227.43 li
690.714 225.234 mo
695.952 222.309 li
695.709 221.877 li
690.471 224.802 li
690.714 225.234 li
699.444 220.356 mo
699.885 220.113 li
699.642 219.681 li
699.201 219.924 li
699.444 220.356 li
703.377 218.169 mo
708.615 215.244 li
708.372 214.803 li
703.134 217.728 li
703.377 218.169 li
712.107 213.291 mo
712.539 213.048 li
712.296 212.607 li
711.864 212.85 li
712.107 213.291 li
716.031 211.095 mo
721.278 208.17 li
721.026 207.729 li
715.788 210.663 li
716.031 211.095 li
724.77 206.217 mo
725.202 205.974 li
724.959 205.542 li
724.518 205.785 li
724.77 206.217 li
728.694 204.021 mo
733.932 201.096 li
733.689 200.664 li
728.451 203.589 li
728.694 204.021 li
737.424 199.152 mo
737.865 198.909 li
737.622 198.468 li
737.181 198.711 li
737.424 199.152 li
741.357 196.956 mo
746.595 194.031 li
746.352 193.59 li
741.114 196.515 li
741.357 196.956 li
750.087 192.078 mo
750.519 191.835 li
750.276 191.403 li
749.844 191.646 li
750.087 192.078 li
754.011 189.882 mo
759.249 186.957 li
759.006 186.525 li
753.768 189.45 li
754.011 189.882 li
762.741 185.013 mo
763.182 184.761 li
762.939 184.329 li
762.498 184.572 li
762.741 185.013 li
766.674 182.817 mo
771.912 179.892 li
771.669 179.451 li
766.431 182.376 li
766.674 182.817 li
775.404 177.939 mo
775.836 177.696 li
775.593 177.255 li
775.161 177.498 li
775.404 177.939 li
779.328 175.743 mo
784.566 172.818 li
784.323 172.386 li
779.085 175.311 li
779.328 175.743 li
788.058 170.865 mo
788.499 170.622 li
788.256 170.19 li
787.815 170.433 li
788.058 170.865 li
791.991 168.678 mo
797.229 165.753 li
796.986 165.312 li
791.748 168.237 li
791.991 168.678 li
800.721 163.8 mo
801.162 163.557 li
800.91 163.116 li
800.478 163.359 li
800.721 163.8 li
804.654 161.604 mo
809.892 158.679 li
809.64 158.238 li
804.402 161.163 li
804.654 161.604 li
813.384 156.726 mo
813.816 156.483 li
813.573 156.051 li
813.141 156.294 li
813.384 156.726 li
817.308 154.53 mo
822.546 151.605 li
822.303 151.173 li
817.065 154.098 li
817.308 154.53 li
826.038 149.661 mo
826.479 149.418 li
826.236 148.977 li
825.795 149.22 li
826.038 149.661 li
829.971 147.465 mo
835.209 144.54 li
834.966 144.099 li
829.728 147.024 li
829.971 147.465 li
838.701 142.587 mo
839.133 142.344 li
838.89 141.903 li
838.458 142.155 li
838.701 142.587 li
842.625 140.391 mo
847.863 137.466 li
847.62 137.034 li
842.382 139.959 li
842.625 140.391 li
851.355 135.513 mo
851.796 135.27 li
851.553 134.838 li
851.112 135.081 li
851.355 135.513 li
855.288 133.326 mo
860.526 130.401 li
860.283 129.96 li
855.045 132.885 li
855.288 133.326 li
864.018 128.448 mo
864.45 128.205 li
864.207 127.764 li
863.775 128.007 li
864.018 128.448 li
867.942 126.252 mo
873.18 123.327 li
872.937 122.895 li
867.699 125.82 li
867.942 126.252 li
876.681 121.374 mo
877.113 121.131 li
876.87 120.699 li
876.429 120.942 li
876.681 121.374 li
880.605 119.187 mo
885.843 116.253 li
885.6 115.821 li
880.362 118.746 li
880.605 119.187 li
889.335 114.309 mo
889.776 114.066 li
889.524 113.625 li
889.092 113.868 li
889.335 114.309 li
893.268 112.113 mo
898.506 109.188 li
898.263 108.747 li
893.025 111.672 li
893.268 112.113 li
901.998 107.235 mo
902.43 106.992 li
902.187 106.56 li
901.755 106.803 li
901.998 107.235 li
905.922 105.039 mo
911.16 102.114 li
910.917 101.682 li
905.679 104.607 li
905.922 105.039 li
914.652 100.17 mo
915.093 99.918 li
914.85 99.486 li
914.409 99.729 li
914.652 100.17 li
918.585 97.974 mo
923.823 95.049 li
923.58 94.608 li
918.342 97.533 li
918.585 97.974 li
927.315 93.096 mo
927.747 92.853 li
927.504 92.412 li
927.072 92.655 li
927.315 93.096 li
931.239 90.9 mo
936.477 87.975 li
936.234 87.543 li
930.996 90.468 li
931.239 90.9 li
939.969 86.022 mo
940.41 85.779 li
940.167 85.347 li
939.726 85.59 li
939.969 86.022 li
943.902 83.835 mo
949.14 80.91 li
948.897 80.469 li
943.659 83.394 li
943.902 83.835 li
952.632 78.957 mo
953.064 78.714 li
952.821 78.273 li
952.389 78.516 li
952.632 78.957 li
956.565 76.761 mo
961.803 73.836 li
961.551 73.395 li
956.313 76.329 li
956.565 76.761 li
965.295 71.883 mo
965.727 71.64 li
965.484 71.208 li
965.043 71.451 li
965.295 71.883 li
71.298 579.546 mo
71.748 579.33 li
71.541 578.88 li
71.082 579.096 li
71.298 579.546 li
75.366 577.62 mo
80.784 575.046 li
80.568 574.596 li
75.15 577.17 li
75.366 577.62 li
84.402 573.327 mo
84.852 573.12 li
84.636 572.661 li
84.186 572.877 li
84.402 573.327 li
88.47 571.401 mo
93.888 568.827 li
93.672 568.377 li
88.254 570.951 li
88.47 571.401 li
97.497 567.117 mo
97.956 566.901 li
97.74 566.451 li
97.29 566.667 li
97.497 567.117 li
101.565 565.182 mo
106.983 562.617 li
106.776 562.158 li
101.349 564.732 li
101.565 565.182 li
110.601 560.898 mo
111.051 560.682 li
110.835 560.232 li
110.385 560.448 li
110.601 560.898 li
114.669 558.972 mo
120.087 556.398 li
119.871 555.948 li
114.453 558.513 li
114.669 558.972 li
123.696 554.679 mo
124.155 554.463 li
123.939 554.013 li
123.489 554.229 li
123.696 554.679 li
127.764 552.753 mo
133.182 550.179 li
132.975 549.729 li
127.548 552.303 li
127.764 552.753 li
136.8 548.469 mo
137.25 548.253 li
137.034 547.803 li
136.584 548.01 li
136.8 548.469 li
140.868 546.534 mo
146.286 543.96 li
146.07 543.51 li
140.652 546.084 li
140.868 546.534 li
149.904 542.25 mo
150.354 542.034 li
150.138 541.584 li
149.688 541.8 li
149.904 542.25 li
153.963 540.315 mo
159.39 537.75 li
159.174 537.291 li
153.747 539.865 li
153.963 540.315 li
162.999 536.031 mo
163.449 535.815 li
163.233 535.365 li
162.783 535.581 li
162.999 536.031 li
167.067 534.105 mo
172.485 531.531 li
172.269 531.081 li
166.851 533.655 li
167.067 534.105 li
176.103 529.812 mo
176.553 529.605 li
176.337 529.146 li
175.887 529.362 li
176.103 529.812 li
180.162 527.886 mo
185.589 525.312 li
185.373 524.862 li
179.946 527.436 li
180.162 527.886 li
189.198 523.602 mo
189.648 523.386 li
189.441 522.936 li
188.982 523.152 li
189.198 523.602 li
193.266 521.667 mo
198.684 519.102 li
198.468 518.643 li
193.05 521.217 li
193.266 521.667 li
202.302 517.383 mo
202.752 517.167 li
202.536 516.717 li
202.086 516.933 li
202.302 517.383 li
206.361 515.457 mo
211.788 512.883 li
211.572 512.433 li
206.154 514.998 li
206.361 515.457 li
215.397 511.164 mo
215.847 510.948 li
215.64 510.498 li
215.181 510.714 li
215.397 511.164 li
219.465 509.238 mo
224.883 506.664 li
224.667 506.214 li
219.249 508.788 li
219.465 509.238 li
228.501 504.954 mo
228.951 504.738 li
228.735 504.288 li
228.285 504.495 li
228.501 504.954 li
232.56 503.019 mo
237.987 500.445 li
237.771 499.995 li
232.353 502.569 li
232.56 503.019 li
241.596 498.735 mo
242.046 498.519 li
241.839 498.069 li
241.38 498.285 li
241.596 498.735 li
245.664 496.809 mo
251.082 494.235 li
250.866 493.785 li
245.448 496.35 li
245.664 496.809 li
254.7 492.516 mo
255.15 492.3 li
254.934 491.85 li
254.484 492.066 li
254.7 492.516 li
258.768 490.59 mo
264.186 488.016 li
263.97 487.566 li
258.552 490.14 li
258.768 490.59 li
267.795 486.297 mo
268.254 486.09 li
268.038 485.631 li
267.588 485.847 li
267.795 486.297 li
271.863 484.371 mo
277.281 481.797 li
277.074 481.347 li
271.647 483.921 li
271.863 484.371 li
280.899 480.087 mo
281.349 479.871 li
281.133 479.421 li
280.683 479.637 li
280.899 480.087 li
284.967 478.152 mo
290.385 475.587 li
290.169 475.128 li
284.751 477.702 li
284.967 478.152 li
293.994 473.868 mo
294.453 473.652 li
294.237 473.202 li
293.787 473.418 li
293.994 473.868 li
298.062 471.942 mo
303.48 469.368 li
303.273 468.918 li
297.846 471.483 li
298.062 471.942 li
307.098 467.649 mo
307.548 467.442 li
307.332 466.983 li
306.882 467.199 li
307.098 467.649 li
311.166 465.723 mo
316.584 463.149 li
316.368 462.699 li
310.95 465.273 li
311.166 465.723 li
320.193 461.439 mo
320.652 461.223 li
320.436 460.773 li
319.986 460.98 li
320.193 461.439 li
324.261 459.504 mo
329.679 456.93 li
329.472 456.48 li
324.045 459.054 li
324.261 459.504 li
333.297 455.22 mo
333.747 455.004 li
333.531 454.554 li
333.081 454.77 li
333.297 455.22 li
337.365 453.294 mo
342.783 450.72 li
342.567 450.27 li
337.149 452.835 li
337.365 453.294 li
346.401 449.001 mo
346.851 448.785 li
346.635 448.335 li
346.185 448.551 li
346.401 449.001 li
350.46 447.075 mo
355.887 444.501 li
355.671 444.051 li
350.244 446.625 li
350.46 447.075 li
359.496 442.782 mo
359.946 442.575 li
359.73 442.116 li
359.28 442.332 li
359.496 442.782 li
363.564 440.856 mo
368.982 438.282 li
368.766 437.832 li
363.348 440.406 li
363.564 440.856 li
372.6 436.572 mo
373.05 436.356 li
372.834 435.906 li
372.384 436.122 li
372.6 436.572 li
376.659 434.637 mo
382.086 432.072 li
381.87 431.613 li
376.452 434.187 li
376.659 434.637 li
385.695 430.353 mo
386.145 430.137 li
385.938 429.687 li
385.479 429.903 li
385.695 430.353 li
389.763 428.427 mo
395.181 425.853 li
394.965 425.403 li
389.547 427.977 li
389.763 428.427 li
398.799 424.134 mo
399.249 423.927 li
399.033 423.468 li
398.583 423.684 li
398.799 424.134 li
402.858 422.208 mo
408.285 419.634 li
408.069 419.184 li
402.651 421.758 li
402.858 422.208 li
411.894 417.924 mo
412.344 417.708 li
412.137 417.258 li
411.678 417.465 li
411.894 417.924 li
415.962 415.989 mo
421.38 413.415 li
421.164 412.965 li
415.746 415.539 li
415.962 415.989 li
424.998 411.705 mo
425.448 411.489 li
425.232 411.039 li
424.782 411.255 li
424.998 411.705 li
429.057 409.779 mo
434.484 407.205 li
434.268 406.755 li
428.85 409.32 li
429.057 409.779 li
438.093 405.486 mo
438.543 405.27 li
438.336 404.82 li
437.877 405.036 li
438.093 405.486 li
442.161 403.56 mo
447.579 400.986 li
447.363 400.536 li
441.945 403.11 li
442.161 403.56 li
451.197 399.276 mo
451.647 399.06 li
451.431 398.61 li
450.981 398.817 li
451.197 399.276 li
455.265 397.341 mo
460.683 394.767 li
460.467 394.317 li
455.049 396.891 li
455.265 397.341 li
464.292 393.057 mo
464.751 392.841 li
464.535 392.391 li
464.085 392.607 li
464.292 393.057 li
468.36 391.122 mo
473.778 388.557 li
473.571 388.098 li
468.144 390.672 li
468.36 391.122 li
477.396 386.838 mo
477.846 386.622 li
477.63 386.172 li
477.18 386.388 li
477.396 386.838 li
481.464 384.912 mo
486.882 382.338 li
486.666 381.888 li
481.248 384.462 li
481.464 384.912 li
490.491 380.619 mo
490.95 380.412 li
490.734 379.953 li
490.284 380.169 li
490.491 380.619 li
494.559 378.693 mo
499.977 376.119 li
499.77 375.669 li
494.343 378.243 li
494.559 378.693 li
503.595 374.409 mo
504.045 374.193 li
503.829 373.743 li
503.379 373.959 li
503.595 374.409 li
507.663 372.474 mo
513.081 369.909 li
512.865 369.45 li
507.447 372.024 li
507.663 372.474 li
516.69 368.19 mo
517.149 367.974 li
516.933 367.524 li
516.483 367.74 li
516.69 368.19 li
520.758 366.264 mo
526.185 363.69 li
525.969 363.24 li
520.542 365.805 li
520.758 366.264 li
529.794 361.971 mo
530.244 361.755 li
530.028 361.305 li
529.578 361.521 li
529.794 361.971 li
533.862 360.045 mo
539.28 357.471 li
539.064 357.021 li
533.646 359.595 li
533.862 360.045 li
542.898 355.761 mo
543.348 355.545 li
543.132 355.095 li
542.682 355.302 li
542.898 355.761 li
546.957 353.826 mo
552.384 351.252 li
552.168 350.802 li
546.741 353.376 li
546.957 353.826 li
555.993 349.542 mo
556.443 349.326 li
556.227 348.876 li
555.777 349.092 li
555.993 349.542 li
560.061 347.616 mo
565.479 345.042 li
565.263 344.592 li
559.845 347.157 li
560.061 347.616 li
569.097 343.323 mo
569.547 343.107 li
569.331 342.657 li
568.881 342.873 li
569.097 343.323 li
573.156 341.397 mo
578.583 338.823 li
578.367 338.373 li
572.949 340.947 li
573.156 341.397 li
582.192 337.104 mo
582.642 336.897 li
582.435 336.438 li
581.976 336.654 li
582.192 337.104 li
586.26 335.178 mo
591.678 332.604 li
591.462 332.154 li
586.044 334.728 li
586.26 335.178 li
595.296 330.894 mo
595.746 330.678 li
595.53 330.228 li
595.08 330.444 li
595.296 330.894 li
599.355 328.959 mo
604.782 326.394 li
604.566 325.935 li
599.148 328.509 li
599.355 328.959 li
608.391 324.675 mo
608.841 324.459 li
608.634 324.009 li
608.175 324.225 li
608.391 324.675 li
612.459 322.749 mo
617.877 320.175 li
617.661 319.725 li
612.243 322.29 li
612.459 322.749 li
621.495 318.456 mo
621.945 318.249 li
621.729 317.79 li
621.279 318.006 li
621.495 318.456 li
625.554 316.53 mo
630.981 313.956 li
630.765 313.506 li
625.347 316.08 li
625.554 316.53 li
634.59 312.246 mo
635.04 312.03 li
634.833 311.58 li
634.374 311.787 li
634.59 312.246 li
638.658 310.311 mo
644.076 307.737 li
643.86 307.287 li
638.442 309.861 li
638.658 310.311 li
647.694 306.027 mo
648.144 305.811 li
647.928 305.361 li
647.478 305.577 li
647.694 306.027 li
651.762 304.101 mo
657.18 301.527 li
656.964 301.077 li
651.546 303.642 li
651.762 304.101 li
660.789 299.808 mo
661.248 299.592 li
661.032 299.142 li
660.582 299.358 li
660.789 299.808 li
664.857 297.882 mo
670.275 295.308 li
670.068 294.858 li
664.641 297.432 li
664.857 297.882 li
673.893 293.589 mo
674.343 293.382 li
674.127 292.923 li
673.677 293.139 li
673.893 293.589 li
677.961 291.663 mo
683.379 289.089 li
683.163 288.639 li
677.745 291.213 li
677.961 291.663 li
686.988 287.379 mo
687.447 287.163 li
687.231 286.713 li
686.781 286.929 li
686.988 287.379 li
691.056 285.444 mo
696.474 282.879 li
696.267 282.42 li
690.84 284.994 li
691.056 285.444 li
700.092 281.16 mo
700.542 280.944 li
700.326 280.494 li
699.876 280.71 li
700.092 281.16 li
704.16 279.234 mo
709.578 276.66 li
709.362 276.21 li
703.944 278.784 li
704.16 279.234 li
713.187 274.941 mo
713.646 274.734 li
713.43 274.275 li
712.98 274.491 li
713.187 274.941 li
717.255 273.015 mo
722.673 270.441 li
722.466 269.991 li
717.039 272.565 li
717.255 273.015 li
726.291 268.731 mo
726.741 268.515 li
726.525 268.065 li
726.075 268.272 li
726.291 268.731 li
730.359 266.796 mo
735.777 264.222 li
735.561 263.772 li
730.143 266.346 li
730.359 266.796 li
739.395 262.512 mo
739.845 262.296 li
739.629 261.846 li
739.179 262.062 li
739.395 262.512 li
743.454 260.586 mo
748.881 258.012 li
748.665 257.562 li
743.238 260.127 li
743.454 260.586 li
752.49 256.293 mo
752.94 256.077 li
752.724 255.627 li
752.274 255.843 li
752.49 256.293 li
756.558 254.367 mo
761.976 251.793 li
761.76 251.343 li
756.342 253.917 li
756.558 254.367 li
765.594 250.083 mo
766.044 249.867 li
765.828 249.417 li
765.378 249.624 li
765.594 250.083 li
769.653 248.148 mo
775.08 245.574 li
774.864 245.124 li
769.437 247.698 li
769.653 248.148 li
778.689 243.864 mo
779.139 243.648 li
778.923 243.198 li
778.473 243.414 li
778.689 243.864 li
782.757 241.929 mo
788.175 239.364 li
787.959 238.905 li
782.541 241.479 li
782.757 241.929 li
791.793 237.645 mo
792.243 237.429 li
792.027 236.979 li
791.577 237.195 li
791.793 237.645 li
795.852 235.719 mo
801.279 233.145 li
801.063 232.695 li
795.645 235.269 li
795.852 235.719 li
804.888 231.426 mo
805.338 231.219 li
805.131 230.76 li
804.672 230.976 li
804.888 231.426 li
808.956 229.5 mo
814.374 226.926 li
814.158 226.476 li
808.74 229.05 li
808.956 229.5 li
817.992 225.216 mo
818.442 225 li
818.226 224.55 li
817.776 224.766 li
817.992 225.216 li
822.051 223.281 mo
827.478 220.716 li
827.262 220.257 li
821.844 222.831 li
822.051 223.281 li
831.087 218.997 mo
831.537 218.781 li
831.33 218.331 li
830.871 218.547 li
831.087 218.997 li
835.155 217.071 mo
840.573 214.497 li
840.357 214.047 li
834.939 216.612 li
835.155 217.071 li
844.191 212.778 mo
844.641 212.562 li
844.425 212.112 li
843.975 212.328 li
844.191 212.778 li
848.259 210.852 mo
853.677 208.278 li
853.461 207.828 li
848.043 210.402 li
848.259 210.852 li
857.286 206.568 mo
857.745 206.352 li
857.529 205.902 li
857.07 206.109 li
857.286 206.568 li
861.354 204.633 mo
866.772 202.059 li
866.565 201.609 li
861.138 204.183 li
861.354 204.633 li
870.39 200.349 mo
870.84 200.133 li
870.624 199.683 li
870.174 199.899 li
870.39 200.349 li
874.458 198.423 mo
879.876 195.849 li
879.66 195.399 li
874.242 197.964 li
874.458 198.423 li
883.485 194.13 mo
883.944 193.914 li
883.728 193.464 li
883.278 193.68 li
883.485 194.13 li
887.553 192.204 mo
892.971 189.63 li
892.764 189.18 li
887.337 191.754 li
887.553 192.204 li
896.589 187.911 mo
897.039 187.704 li
896.823 187.245 li
896.373 187.461 li
896.589 187.911 li
900.657 185.985 mo
906.075 183.411 li
905.859 182.961 li
900.441 185.535 li
900.657 185.985 li
909.684 181.701 mo
910.143 181.485 li
909.927 181.035 li
909.477 181.251 li
909.684 181.701 li
913.752 179.766 mo
919.17 177.201 li
918.963 176.742 li
913.536 179.316 li
913.752 179.766 li
922.788 175.482 mo
923.238 175.266 li
923.022 174.816 li
922.572 175.032 li
922.788 175.482 li
926.856 173.556 mo
932.274 170.982 li
932.058 170.532 li
926.64 173.106 li
926.856 173.556 li
935.892 169.263 mo
936.342 169.056 li
936.126 168.597 li
935.676 168.813 li
935.892 169.263 li
939.951 167.337 mo
945.378 164.763 li
945.162 164.313 li
939.735 166.887 li
939.951 167.337 li
948.987 163.053 mo
949.437 162.837 li
949.221 162.387 li
948.771 162.594 li
948.987 163.053 li
953.055 161.118 mo
958.473 158.544 li
958.257 158.094 li
952.839 160.668 li
953.055 161.118 li
962.091 156.834 mo
962.541 156.618 li
962.325 156.168 li
961.875 156.384 li
962.091 156.834 li
966.15 154.908 mo
968.13 153.963 li
967.923 153.513 li
965.934 154.449 li
966.15 154.908 li
0 0 0 rgb
f
grestore
0 0 0 rgb
%ADOBeginSubsetFont: Helvetica-Bold Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2020 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /Helvetica-Bold def/FontInfo 5 dict dup begin/ItalicAngle 0 def/FSType 0 defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 73 /I putdup 97 /a putdup 101 /e putdup 103 /g putdup 108 /l putdup 112 /p putdup 114 /r putdup 117 /u putdup 127 /minus putdef/FontBBox {-1018 -481 1437 1159} defendsystemdict begindup /Private7 dict dup begin/|- {def} def/| {put} def/BlueValues [0 0] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings10 dict dup begin/.notdef <1C60D8A8C9B6079F6C9C5B6880C89408E8AD9743F80D45518E28653C59C8B376144C36> |-/I <1C60D8A8C9B854D0F45A7DCEFBC402FF7699F7922C5BBAB4> |-/a <1C60D8A8C9B7EF322BE880EA00DBE3D8876C5FB7647BA8CCC58F470AD954361B3D91651144567349F627F201CF4B889415AEB7207EF345F45727C83FD2AD41468A288BFAB1F1F8FCB791EF1AEC76E7D581984F9D9441BE677D94FB963C5BC5B27908DAD995ADB6FCD1CBF7C384901475354EB3A245D3307FEAFA4358FCD91A73A9A2D0B4DA6C6FAD93BFAD58639AD4966C9A8F5E818248BC94F832DB718423280F618BE3B1ED95509C1B2FEAFB5A791924A6F1D5665394FA5CC00C95995C34120BDD0AD5EC6C89EEA20ACD877A1340E12A0053EE1F5E0DCED83F6B965D6FD267E8BD205A0A960ED3D04B55781B> |-/e <1C60D8A8C9B7EF322BA45AA2EF7BD5EAECAF85AF93C215781DFD7DA13F94BB4115BE9214BE159174D684F62C2005A0180C6808F64A08B396F763189FED746BF18ED4EE6E66DDE691142C37E3D614F8DB7B75C14A9F846CCAD13261BA0F086A233499153D3DE84AE55E921B6458DA81ABE3A274371E0DC1724FB71E09D7A2DF5E64CCD5B0577B8A6829193E633FA6CD7C2838A9AF9E8E0D8892F0FE> |-/g <1C60D8A8C9B7D8BE169CBBCCB79D759AEEB859DCD91AA46624CF744A20F8A38AFFA3B6550E21458E9D14DE2D09B4BF3F9174CB67D02A7503B28F9421FE0A1BCEE904E704CD042ACF88D7E73EEC24888DDBF45409BD77343D32F0423EEA40FC1C1167D2433D3EB9C5C4010E890245A5D0B1313026942EE4D85A29C1BEF296C4147691304ECB779C8F6DAA1DBF7FA295E20F077DF5ABCE13FB8C40E75FB5AF731401A7DE5E1C5B07DFA52CE5031268A77C7754B7BA81330590DAABC9DEFEAF5862336C28ED2A49F14CB5F5> |-/l <1C60D8A8C9B854D0F4508A7EF0C5E0071B71FDC5CEA748F1> |-/p <1C60D8A8C9B7D8BE19C9920B65BF569755CBC7004398C5F3E07B367F0E7B21E557936DCBD9EF9335D9341C63852CE0C6CD4F49B90122A57276DE63D17D21D54F902070BE3CE79ECEAFFF0AA566ECBAB31BF348C6D8C56B9E07D665CEA291F28872C6AD93B413125AA4075F806569703377C307FA20494A67837D4FC26FAB7DC94721A0B384A23590E20FBFB60312165FBB83> |-/r <1C60D8A8C9B7361F024500926F06869CAF414F7868F5156DB8CC460EA9477D01645E9A011D9746CB6993BDF7B2650628B9E15EAC73BA376BEC45E761AF9B7A77C8C55B8EEDEF93F167A7A94770404E8E1F0D41C5ED2E00F6> |-/u <1C60D8A8C9B7D8BE298ED182A3F33DCB7BE539E6C3399DF0FB84931D328A058718BA576345AB2E09C6F45BA11DD49FF63E46039F6DCA1460946638F085A9C4202F8E676A0955411ED6C0E7E9A212C6F8002DEB99D3B9D78F19BAB4F5709645F4B6BE5E366BC1C978> |-/minus <1C60D8A8C9B7F374D1451615D98AA5CB96AC4A33BEABB1> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/EOYKKY+Helvetica-Bold /Helvetica-Bold findfont ct_VMDictPut/EOYKKY+Helvetica-Bold*1 [73{/.notdef}rp /I 23{/.notdef}rp /a 3{/.notdef}rp /e /.notdef /g 4{/.notdef}rp /l 3{/.notdef}rp /p /.notdef /r 2{/.notdef}rp /u 9{/.notdef}rp /minus 128{/.notdef}rp]EOYKKY+Helvetica-Bold nfEOYKKY+Helvetica-Bold*1 [20 0 0 -20 0 0 ]msf72.1152 156.566 mo(egg)[11.123 12.2168 0 ]xsh134.443 156.566 mo(I)sh185.311 156.566 mo(II)[5.55664 0 ]xshEOYKKY+Helvetica-Bold*1 [21 0 0 -21 0 0 ]msf277.436 156.566 mo(III)[5.83447 5.83447 0 ]xshEOYKKY+Helvetica-Bold*1 [20 0 0 -20 0 0 ]msf354.443 156.566 mo(pre\177pupal)[12.2168 7.7832 11.123 11.6797 12.2168 12.2168 12.2168 11.123 0 ]xsh663.857 156.566 mo(pupal)[12.2168 12.2168 12.2168 11.123 0 ]xsh%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2020 Adobe System Incorporated. All rights reserved.systemdict beginEOYKKX+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/space <1C60D8A8C9B854D00D> |-/percent <1C60D8A8C9B59F85E959DC9E62959B5B049387399C5A88EDF2D5DFBD776DAFCB889B62AC98B872299D239B948311090C1C069798A7F20A8D7BE29B8C384DB55F663943C1B42044C054991C856F3C3AA085C2B4902C8215DC2701EFD5FA664B5C9C44640813B5AC440B37B70CE58EFC65A9AFC0BCC84F3CDC68795E4995966F74639212F5372957A607AD4B6B94BBB7C36A3A6EF325381FE12C0468B5DD1F216D01C174551A50AC78A5328CDA24DAC0484DFF3993D32A7CA064F169906996AA1E2F6A555998F55A1AFCE2776BEE589EC3162F968A180A5713C4537EF11B8529CE22F8373BC7632472323D1F8491B48E948870255C9E830736EE70F30EE309DFBBB8294CCC2BB5ECB81667BEB60155> |-/parenleft <1C60D8A8C9B81F2C3A3BDBA2E9DFEE10E6670AEBC7475A54CE0B91C398F722701ECC7FFACD7325FD69C372628B8FE38CA7FCBE37C8CC6151D955D330AD238F5A7ADFF3EC6F792676AC012B90C4C6A5CC37C0C314284064> |-/parenright <1C60D8A8C9B81F2C240532A9306D88FBE802946D4D7C96BED003DF2FCDB8DDB235CA368A4FADF1D0309B087452F4DD7B6CF26A6C550E92B406C8BCDB5365991B0FCCD46328F398E95D059281A86422A9CC2837C1B0EF> |-/A <1C60D8A8C9B64EDFF4A769B0E349B0B8A8759517834132408F730D5925332B160EAFC678A283B12B9F41A37E5CF702EF2D2E718583BF> |-/D <1C60D8A8C9B6079F62ED4B3208AD694719329DB5FF23BCAF76D41058F7AAAFF2529AC265BA39C333293E127AD9C0A8013616ECDB9EC4B8FC987A3C84239B76F354F924D3BA3E82C9BA9779AE94CCE8ABEEADDA4A3C72DD0361E6B5DAAF6C5A39F74710AA0C4E1E> |-/a <1C60D8A8C9B7EF322B0D17E770BC81022852C5639214CBF49D6EF8BAFB0188062A6BB41F6EB58ADD15E3D1B86AD22624C804FD4A4EBA73D78F7E503599DB65A7EB53D74C4A9A536152BF7A6B13AB96FF2727313FED0263E50A950746CED5AD5E7764E6E353716A8BE8970281B41D9429E56957BD1FCC84205F76AF78E807D18CA1CFFE724AECDDD2D385233E91066015AC7E0906FE359E28D96D9E0BD326B9E6C7D3E486FD1864E3B47A611B1D6D0D080020321300485E65AE9E4C12443E21865F474D46CD791839F25C8FD0A80215E3D2C3A5928427942DF3859AEF6E9035C909FC75082E8FF246F375DDB90EAC248C9121707FE869E161502F320A27113504> |-/c <1C60D8A8C9B7A73DB9BB4BD7623FA1F3C03F832EDB3EBDEEADF30D53894CA8D0E43AB471E7BA022BFFD675D506AE0402072D4B89708C39F4DE4224D2E08E345C99AE382D5A27CCF2E9E7F36B9FF185D5B1582E55EEA79434D321A3126C806AF846740E1C2FF9A41681247A023D851231C058548F93E1F768FE103B973ACF15C379D13F> |-/d <1C60D8A8C9B7EF322B197A4CECAEBFA93CFC6ACCC571419BFA5461EED77BFB3D8FE900AE7AE7F3558D5F515A8BFDAAA816E55EE92701787F654353E7BD1A4CD427A1C3D52C079A2D5373BCA2D0E81E97334505A34C6046F7856771303B422A1AED127DFB82533DF581F3B1C10CE7C6EB68EFDC809921DBBDF534E7567CC2D2750B89DE10766FCFB923BB97A09A4C79BB9A> |-/e <1C60D8A8C9B7EF322BB83B593C4F5531F1493EEBEAC6F4C92C25FF10F1FB8EC7E530E4B1F1C9E51F31B44D59539AB4135F310FAB43C5A16AA1F4EA07D67BBB916AB355913EB7D45F3AC7C9CF1FD32728FCA1A2D5BBD257CEF831AE751904AD7F4FBE21E10F3A844E74CF6B850E894017941E45AE6BCDA168BF4979345C67DB13F0C5FE9888EB731B0A06A8D5D1475F60C11332FBE633540E50C86671A26FD83CD870BB68F7A9> |-/f <1C60D8A8C9B854D0E1194BB75B674577C40C65C9DA80CF489EB158487251DB3D0D4CE62FE4588AAD1DAC98153B63C50CB7167E75DAE3557295D61A22E58ED82D181423A4BEB279AE837EE035530BF30960CB0B47037A994CC5880A6489EE> |-/g <1C60D8A8C9B7EF322B9E33783F120324D4831FD54687FCF0A3239094C0D4E3AAB20B4037430546FA4664C0C2EC6F9AF25AB8C7F18077B54094AD8EBB679EA5C6D7AFD732ED61A8DCEA904021433763160B264DB52A614A19F2765FBBC5798DAD5FE93A7CA6F9AD05E8ADF7528A45B919107B69D8844684194FE7F92E944890ACD166034B8B64BAE18E8E65CE4B5414E043D7BFC474CE1F5EA604A5C9DC3A7BA914202197CB4B05F919B47B1EB5B22C18D76DC248F3694EA79BFDDDCC0F068EB1529F2B8631C6> |-/h <1C60D8A8C9B7EF3217E3BC2FA8B1DA462FB5094608F57CE7723860E586F183A8CEF3068A0C010301729338C182E1C8129546DF528AA710511DF02DFE7ACA98F8F6531E02F7C3E3DBAF3320F3D602AE65A66CA41E6984> |-/i <1C60D8A8C9B88C084EE8A68C7FA2A58C433876A9B19799899FEF7A13> |-/l <1C60D8A8C9B88C084B857C39B4185359B4FDA8> |-/m <1C60D8A8C9B6B41C87955CDC3639140F8FA33C70CE271539122DB89AC63FD596C1AE79761050C7D5317C1A1DE3923CB96B736E4977F68D67BD6922E1964FE05D51AB32C479ED8218C444609251096F1947B0C4960920FFF6AE70BA15738BF1106729A839E228137A715EA1C031F63BED533B4300B92AAA320484B5BAB342D2B48F6B68F518B0142254C333F20247ED0EA3DC72FEE0> |-/o <1C60D8A8C9B7EF322BB7315D499F0FAA57DF741D86CA9D8DB7E5AD83A05FD148F53EC24E4E6BF5C292C0FC171599978D99E35AB7CAFB8CB65593939725D520CE4A30CDA834D29EB92A082721C79AE18875772ECDD437AD2148D76D23F045CDA1E61619294E456095F14AB8D580008870DAABB6481A0C5B1656CACCDE79F2741F9BB15B> |-/r <1C60D8A8C9B81F2C037408F8BF0E381AE4C9649BA754678B3C9CB9B6F5985C2C3DD85532C988309B457CF86E09A953B63981C0C686B55A9B6F57C7F684C3CFA5497AE68C179CE338521D1494441800> |-/s <1C60D8A8C9B7A73DE557A2AA450BB57EE39D611FDE79056DA153DEDE8E0D2C9D756143DA5E614060C362E0813E35369DA2F002330267D2CFA81D3D9AA172C91A8B8E19BB92CE3CFBA62200E9E8175CCCB3A5FA559ECF71DD7F2B47B117C69AC3637EDAE62020C9DAFDDB718C27C76EF62794CF8B187D103B05AC07655F04A6D9D5181CB287F032D98B2512B2A9B281D13745308AC05B350DA95BA0BE14F12630B5B2A718215DC0DE5A544FA267BEF8FD5CF5292808F195D31A5EEC3ADC63> |-/t <1C60D8A8C9B854D0DE8EB299D76AFE3A3E7733E2D967660702D2EB06537F4BAA1F2129056DC9771C91484E3F22B637802F61054AB3D0E9902E08C4E6B9ADDC0E2F51D38CAD652B2A777D9304919B1B524DD7CC56553E03BE971752FD0161CF> |-/u <1C60D8A8C9B7EF3216DE239CB7942A5DFDA331E51AE98893153168B8E02CBA8B703AF815B3549788123453BB74B7299D82AED651A97B215A966DFD3A6E1F3128BBB9E96D3A241ED635729E83FA4EE02FD12FE6F7CB1ABC83B0> |-/y <1C60D8A8C9B7A73DB9AA12572CE44B37D0759EC5FA4258DA87660F3841304B61A1A911D1876BE6D5484230C2A9DECADC4A3BB259186F9713382F53071656420086C18502612AEB2A0E39781AC31868BC5BE3AB2872591151CD2F994021F04AB4E3C05AD2A97CE0F737B6F0C53FBA3CB18D70D123> |-systemdict /gcheck known {setglobal} if end {end} ifendEOYKKX+Helvetica /Encoding getdup 32 /space putdup 37 /percent putdup 40 /parenleft putdup 41 /parenright putdup 65 /A putdup 68 /D putdup 97 /a putdup 99 /c putdup 100 /d putdup 101 /e putdup 102 /f putdup 103 /g putdup 104 /h putdup 105 /i putdup 108 /l putdup 109 /m putdup 111 /o putdup 114 /r putdup 115 /s putdup 116 /t putdup 117 /u putdup 121 /y putpop%ADOEndSubsetFont
/EOYKKX+Helvetica*1 [32{/.notdef}rp /space 4{/.notdef}rp /percent 2{/.notdef}rp /parenleft /parenright 6{/.notdef}rp /zero /one /two /three /four /five /six /seven /eight /nine 7{/.notdef}rp /A 2{/.notdef}rp /D 28{/.notdef}rp /a /.notdef /c /d /e /f /g /h /i 2{/.notdef}rp /l /m /.notdef /o 2{/.notdef}rp /r /s /t /u 3{/.notdef}rp /y 134{/.notdef}rp]EOYKKX+Helvetica nfEOYKKX+Helvetica*1 [0 -24 -24 0 0 0 ]msf20.6074 464.074 mo(Accumulated degree days \(ADD\))[-16.0078 -12 -12 -13.3477 -19.9922 -13.3477 -5.33203 -13.3477 -6.66797 -13.3477 -13.3477 -6.66797 -13.3477 -13.3477 -13.3477 -7.99219 -13.3477 -13.3477 -6.66797 -13.3477 -13.3477 -12 -12 -6.66797 -7.99219 -16.0078 -17.332 -17.332 0 ]yshEOYKKX+Helvetica*1 [24 0 0 -24 0 0 ]msf349.943 623.238 mo(% of life cycle to hatched adult)[21.3398 6.66797 13.3477 6.66797 6.66797 5.33203 5.33203 6.66797 13.3477 6.66797 12 12 12 5.33203 13.3477 6.66797 6.66797 13.3477 6.66797 13.3477 13.3477 6.66797 12 13.3477 13.3477 13.3477 6.66797 13.3477 13.3477 13.3477 5.33203 0 ]xsh161.856 51.867 mo
110.853 51.867 li
110.853 8.361 li
156.276 8.361 li
156.276 17.739 li
156.78 17.739 li
156.78 8.361 li
161.856 8.361 li
161.856 51.867 li
0.898039 0.898039 1 rgb
f
161.856 579.861 mo
110.853 579.861 li
110.853 579.492 li
161.856 579.492 li
161.856 579.861 li
161.856 578.988 mo
156.78 578.988 li
156.78 569.241 li
156.276 569.241 li
156.276 578.988 li
110.853 578.988 li
110.853 560.988 li
112.941 560.988 li
112.941 547.924 li
113.445 547.643 li
113.445 559.818 li
117.441 559.818 li
117.441 557.655 li
120.087 556.398 li
119.871 555.948 li
117.441 557.098 li
117.441 547.155 li
113.445 547.155 li
113.445 547.222 li
113.382 547.11 li
112.941 547.356 li
112.941 546.489 li
110.853 546.489 li
110.853 51.867 li
161.856 51.867 li
161.856 520.034 li
159.444 521.381 li
159.444 515.907 li
155.439 515.907 li
155.439 523.963 li
155.286 523.701 li
154.854 523.944 li
155.097 524.385 li
155.439 524.19 li
155.439 533.403 li
159.444 533.403 li
159.444 521.958 li
161.856 520.611 li
161.856 527.742 li
159.939 527.742 li
159.939 537.489 li
161.856 537.489 li
161.856 578.988 li
123.939 554.013 mo
123.489 554.229 li
123.696 554.679 li
124.155 554.463 li
123.939 554.013 li
132.975 549.729 mo
127.548 552.303 li
127.764 552.753 li
133.182 550.179 li
132.975 549.729 li
137.034 547.803 mo
136.584 548.01 li
136.8 548.469 li
137.25 548.253 li
137.034 547.803 li
146.07 543.51 mo
140.652 546.084 li
140.868 546.534 li
146.286 543.96 li
146.07 543.51 li
117.315 544.914 mo
116.874 545.157 li
117.117 545.589 li
117.558 545.346 li
117.315 544.914 li
126.045 540.036 mo
120.807 542.961 li
121.05 543.402 li
126.288 540.468 li
126.045 540.036 li
150.138 541.584 mo
149.688 541.8 li
149.904 542.25 li
150.354 542.034 li
150.138 541.584 li
159.174 537.291 mo
153.747 539.865 li
153.963 540.315 li
159.39 537.75 li
159.174 537.291 li
129.969 537.84 mo
129.537 538.083 li
129.78 538.524 li
130.212 538.281 li
129.969 537.84 li
138.699 532.962 mo
133.461 535.887 li
133.704 536.328 li
138.942 533.403 li
138.699 532.962 li
142.632 530.775 mo
142.191 531.018 li
142.434 531.45 li
142.875 531.207 li
142.632 530.775 li
151.362 525.897 mo
146.124 528.822 li
146.367 529.254 li
151.605 526.329 li
151.362 525.897 li
135.72 142.164 mo
135.72 156.564 li
138.699 156.564 li
138.699 142.164 li
135.72 142.164 li
0.898039 0.898039 1 rgb
f
156.78 578.988 mo
156.276 578.988 li
156.276 569.241 li
156.78 569.241 li
156.78 578.988 li
156.78 17.739 mo
156.276 17.739 li
156.276 8.361 li
156.78 8.361 li
156.78 17.739 li
0 0 0.101961 rgb
f
161.856 579.492 mo
110.853 579.492 li
110.853 578.988 li
156.276 578.988 li
156.78 578.988 li
161.856 578.988 li
161.856 579.492 li
f
112.941 560.988 mo
110.853 560.988 li
110.853 560.777 li
111.051 560.682 li
110.853 560.269 li
110.853 549.09 li
112.941 547.924 li
112.941 560.988 li
110.853 548.522 mo
110.853 546.489 li
112.941 546.489 li
112.941 547.356 li
110.853 548.522 li
f
117.441 559.818 mo
113.445 559.818 li
113.445 547.643 li
113.625 547.542 li
113.445 547.222 li
113.445 547.155 li
117.441 547.155 li
117.441 557.098 li
114.453 558.513 li
114.669 558.972 li
117.441 557.655 li
117.441 559.818 li
0.898039 0 0.101961 rgb
f
159.444 533.403 mo
155.439 533.403 li
155.439 524.19 li
155.538 524.133 li
155.439 523.963 li
155.439 515.907 li
159.444 515.907 li
159.444 521.381 li
158.787 521.748 li
159.03 522.189 li
159.444 521.958 li
159.444 533.403 li
0 0 1 rgb
f
161.856 537.489 mo
159.939 537.489 li
159.939 527.742 li
161.856 527.742 li
161.856 537.489 li
0 0 0.101961 rgb
f
110.853 560.777 mo
110.853 560.269 li
111.051 560.682 li
110.853 560.777 li
114.669 558.972 mo
114.453 558.513 li
117.441 557.098 li
119.871 555.948 li
120.087 556.398 li
117.441 557.655 li
114.669 558.972 li
123.696 554.679 mo
123.489 554.229 li
123.939 554.013 li
124.155 554.463 li
123.696 554.679 li
127.764 552.753 mo
127.548 552.303 li
132.975 549.729 li
133.182 550.179 li
127.764 552.753 li
110.853 549.09 mo
110.853 548.522 li
112.941 547.356 li
113.382 547.11 li
113.445 547.222 li
113.625 547.542 li
113.445 547.643 li
112.941 547.924 li
110.853 549.09 li
136.8 548.469 mo
136.584 548.01 li
137.034 547.803 li
137.25 548.253 li
136.8 548.469 li
140.868 546.534 mo
140.652 546.084 li
146.07 543.51 li
146.286 543.96 li
140.868 546.534 li
117.117 545.589 mo
116.874 545.157 li
117.315 544.914 li
117.558 545.346 li
117.117 545.589 li
121.05 543.402 mo
120.807 542.961 li
126.045 540.036 li
126.288 540.468 li
121.05 543.402 li
149.904 542.25 mo
149.688 541.8 li
150.138 541.584 li
150.354 542.034 li
149.904 542.25 li
153.963 540.315 mo
153.747 539.865 li
159.174 537.291 li
159.39 537.75 li
153.963 540.315 li
129.78 538.524 mo
129.537 538.083 li
129.969 537.84 li
130.212 538.281 li
129.78 538.524 li
133.704 536.328 mo
133.461 535.887 li
138.699 532.962 li
138.942 533.403 li
133.704 536.328 li
142.434 531.45 mo
142.191 531.018 li
142.632 530.775 li
142.875 531.207 li
142.434 531.45 li
146.367 529.254 mo
146.124 528.822 li
151.362 525.897 li
151.605 526.329 li
146.367 529.254 li
155.097 524.385 mo
154.854 523.944 li
155.286 523.701 li
155.439 523.963 li
155.538 524.133 li
155.439 524.19 li
155.097 524.385 li
159.03 522.189 mo
158.787 521.748 li
159.444 521.381 li
161.856 520.034 li
161.856 520.611 li
159.444 521.958 li
159.03 522.189 li
f
gsave
138.699 156.564 mo
135.72 156.564 li
135.72 142.164 li
138.699 142.164 li
138.699 156.564 li
clp
135.72 142.164 mo
138.699 142.164 li
138.699 156.564 li
135.72 156.564 li
cp
0.898039 0.898039 1 rgb
f
0 0 0.101961 rgb
EOYKKY+Helvetica-Bold*1 [20 0 0 -20 0 0 ]msf134.443 156.566 mo(I)shgrestore
355.194 51.867 mo
219.852 51.867 li
219.852 7.992 li
246.447 7.992 li
246.447 17.739 li
246.942 17.739 li
246.942 7.992 li
336.609 7.992 li
336.609 17.739 li
337.113 17.739 li
337.113 7.992 li
355.194 7.992 li
355.194 51.867 li
355.194 7.488 mo
219.852 7.488 li
219.852 7.362 li
355.194 7.362 li
355.194 7.488 li
0.898039 0.898039 1 rgb
f
355.194 578.862 mo
337.113 578.862 li
337.113 569.241 li
336.609 569.241 li
336.609 578.862 li
246.942 578.862 li
246.942 569.241 li
246.447 569.241 li
246.447 578.862 li
219.852 578.862 li
219.852 518.742 li
221.697 518.742 li
221.697 508.178 li
222.192 507.942 li
222.192 507.987 li
226.197 507.987 li
226.197 493.236 li
222.192 493.236 li
222.192 507.39 li
221.697 507.625 li
221.697 502.317 li
219.852 502.317 li
219.852 51.867 li
355.194 51.867 li
355.194 444.277 li
350.244 446.625 li
350.46 447.075 li
353.196 445.777 li
353.196 455.49 li
355.194 455.49 li
355.194 578.862 li
228.735 504.288 mo
228.285 504.495 li
228.501 504.954 li
228.951 504.738 li
228.735 504.288 li
237.771 499.995 mo
232.353 502.569 li
232.56 503.019 li
237.987 500.445 li
237.771 499.995 li
241.839 498.069 mo
241.38 498.285 li
241.596 498.735 li
242.046 498.519 li
241.839 498.069 li
250.866 493.785 mo
245.448 496.35 li
245.664 496.809 li
251.082 494.235 li
250.866 493.785 li
254.934 491.85 mo
254.484 492.066 li
254.7 492.516 li
255.15 492.3 li
254.934 491.85 li
263.97 487.566 mo
258.552 490.14 li
258.768 490.59 li
264.186 488.016 li
263.97 487.566 li
227.322 483.471 mo
222.075 486.396 li
222.327 486.837 li
227.565 483.912 li
227.322 483.471 li
268.038 485.631 mo
267.588 485.847 li
267.795 486.297 li
268.254 486.09 li
268.038 485.631 li
277.074 481.347 mo
271.647 483.921 li
271.863 484.371 li
277.281 481.797 li
277.074 481.347 li
231.246 481.275 mo
230.814 481.527 li
231.057 481.959 li
231.489 481.716 li
231.246 481.275 li
281.133 479.421 mo
280.683 479.637 li
280.899 480.087 li
281.349 479.871 li
281.133 479.421 li
239.976 476.406 mo
234.738 479.331 li
234.981 479.763 li
240.219 476.838 li
239.976 476.406 li
290.169 475.128 mo
284.751 477.702 li
284.967 478.152 li
290.385 475.587 li
290.169 475.128 li
243.909 474.21 mo
243.468 474.453 li
243.711 474.885 li
244.152 474.642 li
243.909 474.21 li
294.237 473.202 mo
293.787 473.418 li
293.994 473.868 li
294.453 473.652 li
294.237 473.202 li
252.639 469.332 mo
247.401 472.257 li
247.644 472.698 li
252.882 469.773 li
252.639 469.332 li
303.273 468.918 mo
297.846 471.483 li
298.062 471.942 li
303.48 469.368 li
303.273 468.918 li
256.563 467.136 mo
256.131 467.379 li
256.374 467.82 li
256.806 467.577 li
256.563 467.136 li
307.332 466.983 mo
306.882 467.199 li
307.098 467.649 li
307.548 467.442 li
307.332 466.983 li
316.368 462.699 mo
310.95 465.273 li
311.166 465.723 li
316.584 463.149 li
316.368 462.699 li
265.293 462.258 mo
260.055 465.192 li
260.298 465.624 li
265.536 462.699 li
265.293 462.258 li
320.436 460.773 mo
319.986 460.98 li
320.193 461.439 li
320.652 461.223 li
320.436 460.773 li
269.226 460.071 mo
268.785 460.314 li
269.028 460.746 li
269.469 460.503 li
269.226 460.071 li
329.472 456.48 mo
324.045 459.054 li
324.261 459.504 li
329.679 456.93 li
329.472 456.48 li
277.956 455.193 mo
272.718 458.118 li
272.961 458.55 li
278.199 455.625 li
277.956 455.193 li
333.531 454.554 mo
333.081 454.77 li
333.297 455.22 li
333.747 455.004 li
333.531 454.554 li
281.88 452.997 mo
281.448 453.24 li
281.691 453.681 li
282.132 453.438 li
281.88 452.997 li
342.567 450.27 mo
337.149 452.835 li
337.365 453.294 li
342.783 450.72 li
342.567 450.27 li
290.619 448.119 mo
285.372 451.044 li
285.624 451.485 li
290.862 448.56 li
290.619 448.119 li
346.635 448.335 mo
346.185 448.551 li
346.401 449.001 li
346.851 448.785 li
346.635 448.335 li
294.543 445.932 mo
294.111 446.175 li
294.354 446.607 li
294.786 446.364 li
294.543 445.932 li
303.273 441.054 mo
298.035 443.979 li
298.278 444.411 li
303.516 441.486 li
303.273 441.054 li
307.206 438.858 mo
306.765 439.101 li
307.008 439.542 li
307.449 439.29 li
307.206 438.858 li
348.696 415.739 mo
348.696 438.318 li
352.692 438.318 li
352.692 414.027 li
354.159 413.208 li
353.907 412.767 li
352.692 413.445 li
352.692 412.074 li
348.696 412.074 li
348.696 415.677 li
348.669 415.692 li
348.696 415.739 li
315.936 433.98 mo
310.698 436.905 li
310.941 437.346 li
316.179 434.421 li
315.936 433.98 li
319.86 431.784 mo
319.428 432.027 li
319.671 432.468 li
320.103 432.225 li
319.86 431.784 li
328.59 426.915 mo
323.352 429.84 li
323.595 430.272 li
328.833 427.347 li
328.59 426.915 li
332.523 424.719 mo
332.082 424.962 li
332.325 425.394 li
332.766 425.151 li
332.523 424.719 li
341.253 419.841 mo
336.015 422.766 li
336.258 423.207 li
341.496 420.273 li
341.253 419.841 li
345.177 417.645 mo
344.745 417.888 li
344.988 418.329 li
345.42 418.086 li
345.177 417.645 li
278.775 141.444 mo
278.775 156.564 li
293.58 156.564 li
293.58 141.444 li
278.775 141.444 li
355.194 445.491 mo
353.8 445.491 li
355.194 444.83 li
355.194 445.491 li
0.898039 0.898039 1 rgb
f
246.942 578.862 mo
246.447 578.862 li
246.447 569.241 li
246.942 569.241 li
246.942 578.862 li
246.942 17.739 mo
246.447 17.739 li
246.447 7.992 li
246.942 7.992 li
246.942 17.739 li
0 0 0.101961 rgb
f
337.113 578.862 mo
336.609 578.862 li
336.609 569.241 li
337.113 569.241 li
337.113 578.862 li
337.113 17.739 mo
336.609 17.739 li
336.609 7.992 li
337.113 7.992 li
337.113 17.739 li
f
355.194 7.992 mo
337.113 7.992 li
336.609 7.992 li
246.942 7.992 li
246.447 7.992 li
219.852 7.992 li
219.852 7.488 li
355.194 7.488 li
355.194 7.992 li
f
221.697 518.742 mo
219.852 518.742 li
219.852 509.054 li
221.697 508.178 li
221.697 518.742 li
219.852 508.502 mo
219.852 502.317 li
221.697 502.317 li
221.697 507.625 li
219.852 508.502 li
f
226.197 507.987 mo
222.192 507.987 li
222.192 507.942 li
224.883 506.664 li
224.667 506.214 li
222.192 507.39 li
222.192 493.236 li
226.197 493.236 li
226.197 507.987 li
0.898039 0 0.101961 rgb
f
352.692 438.318 mo
348.696 438.318 li
348.696 415.739 li
348.921 416.133 li
352.692 414.027 li
352.692 438.318 li
348.696 415.677 mo
348.696 412.074 li
352.692 412.074 li
352.692 413.445 li
348.696 415.677 li
0 0 1 rgb
f
355.194 455.49 mo
353.196 455.49 li
353.196 445.777 li
353.8 445.491 li
355.194 445.491 li
355.194 455.49 li
0 0 0.101961 rgb
f
219.852 509.054 mo
219.852 508.502 li
221.697 507.625 li
222.192 507.39 li
224.667 506.214 li
224.883 506.664 li
222.192 507.942 li
221.697 508.178 li
219.852 509.054 li
228.501 504.954 mo
228.285 504.495 li
228.735 504.288 li
228.951 504.738 li
228.501 504.954 li
232.56 503.019 mo
232.353 502.569 li
237.771 499.995 li
237.987 500.445 li
232.56 503.019 li
241.596 498.735 mo
241.38 498.285 li
241.839 498.069 li
242.046 498.519 li
241.596 498.735 li
245.664 496.809 mo
245.448 496.35 li
250.866 493.785 li
251.082 494.235 li
245.664 496.809 li
254.7 492.516 mo
254.484 492.066 li
254.934 491.85 li
255.15 492.3 li
254.7 492.516 li
258.768 490.59 mo
258.552 490.14 li
263.97 487.566 li
264.186 488.016 li
258.768 490.59 li
222.327 486.837 mo
222.075 486.396 li
227.322 483.471 li
227.565 483.912 li
222.327 486.837 li
267.795 486.297 mo
267.588 485.847 li
268.038 485.631 li
268.254 486.09 li
267.795 486.297 li
271.863 484.371 mo
271.647 483.921 li
277.074 481.347 li
277.281 481.797 li
271.863 484.371 li
231.057 481.959 mo
230.814 481.527 li
231.246 481.275 li
231.489 481.716 li
231.057 481.959 li
280.899 480.087 mo
280.683 479.637 li
281.133 479.421 li
281.349 479.871 li
280.899 480.087 li
234.981 479.763 mo
234.738 479.331 li
239.976 476.406 li
240.219 476.838 li
234.981 479.763 li
284.967 478.152 mo
284.751 477.702 li
290.169 475.128 li
290.385 475.587 li
284.967 478.152 li
243.711 474.885 mo
243.468 474.453 li
243.909 474.21 li
244.152 474.642 li
243.711 474.885 li
293.994 473.868 mo
293.787 473.418 li
294.237 473.202 li
294.453 473.652 li
293.994 473.868 li
247.644 472.698 mo
247.401 472.257 li
252.639 469.332 li
252.882 469.773 li
247.644 472.698 li
298.062 471.942 mo
297.846 471.483 li
303.273 468.918 li
303.48 469.368 li
298.062 471.942 li
256.374 467.82 mo
256.131 467.379 li
256.563 467.136 li
256.806 467.577 li
256.374 467.82 li
307.098 467.649 mo
306.882 467.199 li
307.332 466.983 li
307.548 467.442 li
307.098 467.649 li
311.166 465.723 mo
310.95 465.273 li
316.368 462.699 li
316.584 463.149 li
311.166 465.723 li
260.298 465.624 mo
260.055 465.192 li
265.293 462.258 li
265.536 462.699 li
260.298 465.624 li
320.193 461.439 mo
319.986 460.98 li
320.436 460.773 li
320.652 461.223 li
320.193 461.439 li
269.028 460.746 mo
268.785 460.314 li
269.226 460.071 li
269.469 460.503 li
269.028 460.746 li
324.261 459.504 mo
324.045 459.054 li
329.472 456.48 li
329.679 456.93 li
324.261 459.504 li
272.961 458.55 mo
272.718 458.118 li
277.956 455.193 li
278.199 455.625 li
272.961 458.55 li
333.297 455.22 mo
333.081 454.77 li
333.531 454.554 li
333.747 455.004 li
333.297 455.22 li
281.691 453.681 mo
281.448 453.24 li
281.88 452.997 li
282.132 453.438 li
281.691 453.681 li
337.365 453.294 mo
337.149 452.835 li
342.567 450.27 li
342.783 450.72 li
337.365 453.294 li
285.624 451.485 mo
285.372 451.044 li
290.619 448.119 li
290.862 448.56 li
285.624 451.485 li
346.401 449.001 mo
346.185 448.551 li
346.635 448.335 li
346.851 448.785 li
346.401 449.001 li
350.46 447.075 mo
350.244 446.625 li
355.194 444.277 li
355.194 444.83 li
353.8 445.491 li
353.196 445.777 li
350.46 447.075 li
294.354 446.607 mo
294.111 446.175 li
294.543 445.932 li
294.786 446.364 li
294.354 446.607 li
298.278 444.411 mo
298.035 443.979 li
303.273 441.054 li
303.516 441.486 li
298.278 444.411 li
307.008 439.542 mo
306.765 439.101 li
307.206 438.858 li
307.449 439.29 li
307.008 439.542 li
310.941 437.346 mo
310.698 436.905 li
315.936 433.98 li
316.179 434.421 li
310.941 437.346 li
319.671 432.468 mo
319.428 432.027 li
319.86 431.784 li
320.103 432.225 li
319.671 432.468 li
323.595 430.272 mo
323.352 429.84 li
328.59 426.915 li
328.833 427.347 li
323.595 430.272 li
332.325 425.394 mo
332.082 424.962 li
332.523 424.719 li
332.766 425.151 li
332.325 425.394 li
336.258 423.207 mo
336.015 422.766 li
341.253 419.841 li
341.496 420.273 li
336.258 423.207 li
344.988 418.329 mo
344.745 417.888 li
345.177 417.645 li
345.42 418.086 li
344.988 418.329 li
348.921 416.133 mo
348.696 415.739 li
348.669 415.692 li
348.696 415.677 li
352.692 413.445 li
353.907 412.767 li
354.159 413.208 li
352.692 414.027 li
348.921 416.133 li
f
gsave
293.58 156.564 mo
278.775 156.564 li
278.775 141.444 li
293.58 141.444 li
293.58 156.564 li
clp
278.775 141.444 mo
293.58 141.444 li
293.58 156.564 li
278.775 156.564 li
cp
0.898039 0.898039 1 rgb
f
0 0 0.101961 rgb
EOYKKY+Helvetica-Bold*1 [21 0 0 -21 0 0 ]msf277.436 156.566 mo(III)[5.83447 5.83447 0 ]xshgrestore
967.347 51.867 mo
965.529 51.867 li
965.529 17.901 li
961.524 17.901 li
961.524 51.867 li
450.351 51.867 li
450.351 7.992 li
516.942 7.992 li
516.942 17.739 li
517.446 17.739 li
517.446 7.992 li
607.113 7.992 li
607.113 17.739 li
607.608 17.739 li
607.608 7.992 li
697.275 7.992 li
697.275 17.739 li
697.779 17.739 li
697.779 7.992 li
787.446 7.992 li
787.446 17.739 li
787.941 17.739 li
787.941 7.992 li
877.608 7.992 li
877.608 17.739 li
878.112 17.739 li
878.112 7.992 li
967.347 7.992 li
967.347 51.867 li
0.898039 0.898039 1 rgb
f
967.347 578.358 mo
878.112 578.358 li
878.112 569.241 li
877.608 569.241 li
877.608 578.358 li
787.941 578.358 li
787.941 569.241 li
787.446 569.241 li
787.446 578.358 li
697.779 578.358 li
697.779 569.241 li
697.275 569.241 li
697.275 578.358 li
607.608 578.358 li
607.608 569.241 li
607.113 569.241 li
607.113 578.358 li
517.446 578.358 li
517.446 569.241 li
516.942 569.241 li
516.942 578.358 li
450.351 578.358 li
450.351 408.735 li
451.773 408.735 li
451.773 387.99 li
450.351 387.99 li
450.351 359.478 li
452.277 358.402 li
452.277 397.071 li
455.135 397.071 li
455.265 397.341 li
455.833 397.071 li
456.273 397.071 li
456.273 396.862 li
460.683 394.767 li
460.467 394.317 li
456.273 396.31 li
456.273 300.402 li
452.277 300.402 li
452.277 357.834 li
450.351 358.91 li
450.351 51.867 li
961.524 51.867 li
961.524 73.4101 li
956.313 76.329 li
956.565 76.761 li
961.524 73.9918 li
961.524 131.742 li
965.529 131.742 li
965.529 71.7514 li
965.727 71.64 li
965.529 71.288 li
965.529 51.867 li
967.347 51.867 li
967.347 103.401 li
966.024 103.401 li
966.024 154.407 li
965.934 154.449 li
966.024 154.64 li
966.024 161.406 li
967.347 161.406 li
967.347 578.358 li
464.535 392.391 mo
464.085 392.607 li
464.292 393.057 li
464.751 392.841 li
464.535 392.391 li
473.571 388.098 mo
468.144 390.672 li
468.36 391.122 li
473.778 388.557 li
473.571 388.098 li
477.63 386.172 mo
477.18 386.388 li
477.396 386.838 li
477.846 386.622 li
477.63 386.172 li
486.666 381.888 mo
481.248 384.462 li
481.464 384.912 li
486.882 382.338 li
486.666 381.888 li
490.734 379.953 mo
490.284 380.169 li
490.491 380.619 li
490.95 380.412 li
490.734 379.953 li
499.77 375.669 mo
494.343 378.243 li
494.559 378.693 li
499.977 376.119 li
499.77 375.669 li
503.829 373.743 mo
503.379 373.959 li
503.595 374.409 li
504.045 374.193 li
503.829 373.743 li
512.865 369.45 mo
507.447 372.024 li
507.663 372.474 li
513.081 369.909 li
512.865 369.45 li
516.933 367.524 mo
516.483 367.74 li
516.69 368.19 li
517.149 367.974 li
516.933 367.524 li
525.969 363.24 mo
520.542 365.805 li
520.758 366.264 li
526.185 363.69 li
525.969 363.24 li
530.028 361.305 mo
529.578 361.521 li
529.794 361.971 li
530.244 361.755 li
530.028 361.305 li
539.064 357.021 mo
533.646 359.595 li
533.862 360.045 li
539.28 357.471 li
539.064 357.021 li
543.132 355.095 mo
542.682 355.302 li
542.898 355.761 li
543.348 355.545 li
543.132 355.095 li
459.117 354.015 mo
458.676 354.258 li
458.919 354.69 li
459.36 354.447 li
459.117 354.015 li
552.168 350.802 mo
546.741 353.376 li
546.957 353.826 li
552.384 351.252 li
552.168 350.802 li
467.847 349.137 mo
462.609 352.062 li
462.852 352.503 li
468.09 349.578 li
467.847 349.137 li
556.227 348.876 mo
555.777 349.092 li
555.993 349.542 li
556.443 349.326 li
556.227 348.876 li
471.771 346.941 mo
471.339 347.184 li
471.582 347.625 li
472.014 347.382 li
471.771 346.941 li
565.263 344.592 mo
559.845 347.157 li
560.061 347.616 li
565.479 345.042 li
565.263 344.592 li
480.501 342.072 mo
475.263 344.997 li
475.506 345.429 li
480.744 342.504 li
480.501 342.072 li
569.331 342.657 mo
568.881 342.873 li
569.097 343.323 li
569.547 343.107 li
569.331 342.657 li
578.367 338.373 mo
572.949 340.947 li
573.156 341.397 li
578.583 338.823 li
578.367 338.373 li
484.434 339.876 mo
483.993 340.119 li
484.236 340.551 li
484.677 340.308 li
484.434 339.876 li
493.164 334.998 mo
487.926 337.923 li
488.169 338.364 li
493.407 335.43 li
493.164 334.998 li
582.435 336.438 mo
581.976 336.654 li
582.192 337.104 li
582.642 336.897 li
582.435 336.438 li
591.462 332.154 mo
586.044 334.728 li
586.26 335.178 li
591.678 332.604 li
591.462 332.154 li
497.088 332.802 mo
496.656 333.045 li
496.899 333.486 li
497.34 333.243 li
497.088 332.802 li
505.827 327.924 mo
500.58 330.849 li
500.832 331.29 li
506.07 328.365 li
505.827 327.924 li
595.53 330.228 mo
595.08 330.444 li
595.296 330.894 li
595.746 330.678 li
595.53 330.228 li
604.566 325.935 mo
599.148 328.509 li
599.355 328.959 li
604.782 326.394 li
604.566 325.935 li
509.751 325.737 mo
509.319 325.98 li
509.562 326.412 li
509.994 326.169 li
509.751 325.737 li
608.634 324.009 mo
608.175 324.225 li
608.391 324.675 li
608.841 324.459 li
608.634 324.009 li
518.481 320.859 mo
513.243 323.784 li
513.486 324.216 li
518.724 321.291 li
518.481 320.859 li
617.661 319.725 mo
612.243 322.29 li
612.459 322.749 li
617.877 320.175 li
617.661 319.725 li
522.414 318.663 mo
521.973 318.906 li
522.216 319.347 li
522.657 319.095 li
522.414 318.663 li
621.729 317.79 mo
621.279 318.006 li
621.495 318.456 li
621.945 318.249 li
621.729 317.79 li
531.144 313.785 mo
525.906 316.71 li
526.149 317.151 li
531.387 314.226 li
531.144 313.785 li
630.765 313.506 mo
625.347 316.08 li
625.554 316.53 li
630.981 313.956 li
630.765 313.506 li
535.068 311.589 mo
534.636 311.832 li
534.879 312.273 li
535.311 312.03 li
535.068 311.589 li
634.833 311.58 mo
634.374 311.787 li
634.59 312.246 li
635.04 312.03 li
634.833 311.58 li
643.86 307.287 mo
638.442 309.861 li
638.658 310.311 li
644.076 307.737 li
643.86 307.287 li
543.798 306.72 mo
538.56 309.645 li
538.803 310.077 li
544.041 307.152 li
543.798 306.72 li
647.928 305.361 mo
647.478 305.577 li
647.694 306.027 li
648.144 305.811 li
647.928 305.361 li
547.731 304.524 mo
547.29 304.767 li
547.533 305.199 li
547.974 304.956 li
547.731 304.524 li
656.964 301.077 mo
651.546 303.642 li
651.762 304.101 li
657.18 301.527 li
656.964 301.077 li
556.461 299.646 mo
551.223 302.571 li
551.466 303.012 li
556.704 300.087 li
556.461 299.646 li
661.032 299.142 mo
660.582 299.358 li
660.789 299.808 li
661.248 299.592 li
661.032 299.142 li
560.385 297.45 mo
559.953 297.693 li
560.196 298.134 li
560.628 297.891 li
560.385 297.45 li
670.068 294.858 mo
664.641 297.432 li
664.857 297.882 li
670.275 295.308 li
670.068 294.858 li
569.115 292.572 mo
563.877 295.506 li
564.129 295.938 li
569.367 293.013 li
569.115 292.572 li
674.127 292.923 mo
673.677 293.139 li
673.893 293.589 li
674.343 293.382 li
674.127 292.923 li
683.163 288.639 mo
677.745 291.213 li
677.961 291.663 li
683.379 289.089 li
683.163 288.639 li
573.048 290.385 mo
572.607 290.628 li
572.859 291.06 li
573.291 290.817 li
573.048 290.385 li
581.778 285.507 mo
576.54 288.432 li
576.783 288.864 li
582.021 285.939 li
581.778 285.507 li
687.231 286.713 mo
686.781 286.929 li
686.988 287.379 li
687.447 287.163 li
687.231 286.713 li
696.267 282.42 mo
690.84 284.994 li
691.056 285.444 li
696.474 282.879 li
696.267 282.42 li
585.711 283.311 mo
585.27 283.554 li
585.513 283.995 li
585.954 283.752 li
585.711 283.311 li
594.441 278.433 mo
589.203 281.358 li
589.446 281.799 li
594.684 278.874 li
594.441 278.433 li
700.326 280.494 mo
699.876 280.71 li
700.092 281.16 li
700.542 280.944 li
700.326 280.494 li
709.362 276.21 mo
703.944 278.784 li
704.16 279.234 li
709.578 276.66 li
709.362 276.21 li
598.365 276.237 mo
597.933 276.489 li
598.176 276.921 li
598.608 276.678 li
598.365 276.237 li
713.43 274.275 mo
712.98 274.491 li
713.187 274.941 li
713.646 274.734 li
713.43 274.275 li
607.095 271.368 mo
601.857 274.293 li
602.1 274.725 li
607.338 271.8 li
607.095 271.368 li
722.466 269.991 mo
717.039 272.565 li
717.255 273.015 li
722.673 270.441 li
722.466 269.991 li
611.028 269.172 mo
610.587 269.415 li
610.83 269.847 li
611.271 269.604 li
611.028 269.172 li
726.525 268.065 mo
726.075 268.272 li
726.291 268.731 li
726.741 268.515 li
726.525 268.065 li
619.758 264.294 mo
614.52 267.219 li
614.763 267.66 li
620.001 264.735 li
619.758 264.294 li
735.561 263.772 mo
730.143 266.346 li
730.359 266.796 li
735.777 264.222 li
735.561 263.772 li
623.682 262.098 mo
623.25 262.341 li
623.493 262.782 li
623.925 262.539 li
623.682 262.098 li
739.629 261.846 mo
739.179 262.062 li
739.395 262.512 li
739.845 262.296 li
739.629 261.846 li
748.665 257.562 mo
743.238 260.127 li
743.454 260.586 li
748.881 258.012 li
748.665 257.562 li
632.412 257.229 mo
627.174 260.154 li
627.417 260.586 li
632.655 257.661 li
632.412 257.229 li
752.724 255.627 mo
752.274 255.843 li
752.49 256.293 li
752.94 256.077 li
752.724 255.627 li
636.345 255.033 mo
635.904 255.276 li
636.147 255.708 li
636.588 255.465 li
636.345 255.033 li
761.76 251.343 mo
756.342 253.917 li
756.558 254.367 li
761.976 251.793 li
761.76 251.343 li
645.075 250.155 mo
639.837 253.08 li
640.08 253.521 li
645.318 250.587 li
645.075 250.155 li
765.828 249.417 mo
765.378 249.624 li
765.594 250.083 li
766.044 249.867 li
765.828 249.417 li
648.999 247.959 mo
648.567 248.202 li
648.81 248.643 li
649.251 248.4 li
648.999 247.959 li
774.864 245.124 mo
769.437 247.698 li
769.653 248.148 li
775.08 245.574 li
774.864 245.124 li
657.738 243.081 mo
652.491 246.006 li
652.743 246.447 li
657.981 243.522 li
657.738 243.081 li
778.923 243.198 mo
778.473 243.414 li
778.689 243.864 li
779.139 243.648 li
778.923 243.198 li
787.959 238.905 mo
782.541 241.479 li
782.757 241.929 li
788.175 239.364 li
787.959 238.905 li
661.662 240.894 mo
661.23 241.137 li
661.473 241.569 li
661.905 241.326 li
661.662 240.894 li
670.392 236.016 mo
665.154 238.941 li
665.397 239.373 li
670.635 236.448 li
670.392 236.016 li
792.027 236.979 mo
791.577 237.195 li
791.793 237.645 li
792.243 237.429 li
792.027 236.979 li
801.063 232.695 mo
795.645 235.269 li
795.852 235.719 li
801.279 233.145 li
801.063 232.695 li
674.325 233.82 mo
673.884 234.063 li
674.127 234.504 li
674.568 234.261 li
674.325 233.82 li
683.055 228.942 mo
677.817 231.867 li
678.06 232.308 li
683.298 229.383 li
683.055 228.942 li
805.131 230.76 mo
804.672 230.976 li
804.888 231.426 li
805.338 231.219 li
805.131 230.76 li
814.158 226.476 mo
808.74 229.05 li
808.956 229.5 li
814.374 226.926 li
814.158 226.476 li
686.979 226.746 mo
686.547 226.998 li
686.79 227.43 li
687.222 227.187 li
686.979 226.746 li
695.709 221.877 mo
690.471 224.802 li
690.714 225.234 li
695.952 222.309 li
695.709 221.877 li
818.226 224.55 mo
817.776 224.766 li
817.992 225.216 li
818.442 225 li
818.226 224.55 li
827.262 220.257 mo
821.844 222.831 li
822.051 223.281 li
827.478 220.716 li
827.262 220.257 li
699.642 219.681 mo
699.201 219.924 li
699.444 220.356 li
699.885 220.113 li
699.642 219.681 li
831.33 218.331 mo
830.871 218.547 li
831.087 218.997 li
831.537 218.781 li
831.33 218.331 li
708.372 214.803 mo
703.134 217.728 li
703.377 218.169 li
708.615 215.244 li
708.372 214.803 li
840.357 214.047 mo
834.939 216.612 li
835.155 217.071 li
840.573 214.497 li
840.357 214.047 li
712.296 212.607 mo
711.864 212.85 li
712.107 213.291 li
712.539 213.048 li
712.296 212.607 li
844.425 212.112 mo
843.975 212.328 li
844.191 212.778 li
844.641 212.562 li
844.425 212.112 li
721.026 207.729 mo
715.788 210.663 li
716.031 211.095 li
721.278 208.17 li
721.026 207.729 li
853.461 207.828 mo
848.043 210.402 li
848.259 210.852 li
853.677 208.278 li
853.461 207.828 li
857.529 205.902 mo
857.07 206.109 li
857.286 206.568 li
857.745 206.352 li
857.529 205.902 li
724.959 205.542 mo
724.518 205.785 li
724.77 206.217 li
725.202 205.974 li
724.959 205.542 li
866.565 201.609 mo
861.138 204.183 li
861.354 204.633 li
866.772 202.059 li
866.565 201.609 li
733.689 200.664 mo
728.451 203.589 li
728.694 204.021 li
733.932 201.096 li
733.689 200.664 li
870.624 199.683 mo
870.174 199.899 li
870.39 200.349 li
870.84 200.133 li
870.624 199.683 li
737.622 198.468 mo
737.181 198.711 li
737.424 199.152 li
737.865 198.909 li
737.622 198.468 li
879.66 195.399 mo
874.242 197.964 li
874.458 198.423 li
879.876 195.849 li
879.66 195.399 li
746.352 193.59 mo
741.114 196.515 li
741.357 196.956 li
746.595 194.031 li
746.352 193.59 li
883.728 193.464 mo
883.278 193.68 li
883.485 194.13 li
883.944 193.914 li
883.728 193.464 li
892.764 189.18 mo
887.337 191.754 li
887.553 192.204 li
892.971 189.63 li
892.764 189.18 li
750.276 191.403 mo
749.844 191.646 li
750.087 192.078 li
750.519 191.835 li
750.276 191.403 li
759.006 186.525 mo
753.768 189.45 li
754.011 189.882 li
759.249 186.957 li
759.006 186.525 li
896.823 187.245 mo
896.373 187.461 li
896.589 187.911 li
897.039 187.704 li
896.823 187.245 li
905.859 182.961 mo
900.441 185.535 li
900.657 185.985 li
906.075 183.411 li
905.859 182.961 li
762.939 184.329 mo
762.498 184.572 li
762.741 185.013 li
763.182 184.761 li
762.939 184.329 li
771.669 179.451 mo
766.431 182.376 li
766.674 182.817 li
771.912 179.892 li
771.669 179.451 li
909.927 181.035 mo
909.477 181.251 li
909.684 181.701 li
910.143 181.485 li
909.927 181.035 li
918.963 176.742 mo
913.536 179.316 li
913.752 179.766 li
919.17 177.201 li
918.963 176.742 li
775.593 177.255 mo
775.161 177.498 li
775.404 177.939 li
775.836 177.696 li
775.593 177.255 li
784.323 172.386 mo
779.085 175.311 li
779.328 175.743 li
784.566 172.818 li
784.323 172.386 li
923.022 174.816 mo
922.572 175.032 li
922.788 175.482 li
923.238 175.266 li
923.022 174.816 li
932.058 170.532 mo
926.64 173.106 li
926.856 173.556 li
932.274 170.982 li
932.058 170.532 li
788.256 170.19 mo
787.815 170.433 li
788.058 170.865 li
788.499 170.622 li
788.256 170.19 li
936.126 168.597 mo
935.676 168.813 li
935.892 169.263 li
936.342 169.056 li
936.126 168.597 li
796.986 165.312 mo
791.748 168.237 li
791.991 168.678 li
797.229 165.753 li
796.986 165.312 li
945.162 164.313 mo
939.735 166.887 li
939.951 167.337 li
945.378 164.763 li
945.162 164.313 li
800.91 163.116 mo
800.478 163.359 li
800.721 163.8 li
801.162 163.557 li
800.91 163.116 li
949.221 162.387 mo
948.771 162.594 li
948.987 163.053 li
949.437 162.837 li
949.221 162.387 li
809.64 158.238 mo
804.402 161.163 li
804.654 161.604 li
809.892 158.679 li
809.64 158.238 li
958.257 158.094 mo
952.839 160.668 li
953.055 161.118 li
958.473 158.544 li
958.257 158.094 li
665.073 142.191 mo
665.073 160.749 li
715.77 160.749 li
715.77 142.191 li
665.073 142.191 li
962.325 156.168 mo
961.875 156.384 li
962.091 156.834 li
962.541 156.618 li
962.325 156.168 li
813.573 156.051 mo
813.141 156.294 li
813.384 156.726 li
813.816 156.483 li
813.573 156.051 li
822.303 151.173 mo
817.065 154.098 li
817.308 154.53 li
822.546 151.605 li
822.303 151.173 li
826.236 148.977 mo
825.795 149.22 li
826.038 149.661 li
826.479 149.418 li
826.236 148.977 li
834.966 144.099 mo
829.728 147.024 li
829.971 147.465 li
835.209 144.54 li
834.966 144.099 li
838.89 141.903 mo
838.458 142.155 li
838.701 142.587 li
839.133 142.344 li
838.89 141.903 li
847.62 137.034 mo
842.382 139.959 li
842.625 140.391 li
847.863 137.466 li
847.62 137.034 li
851.553 134.838 mo
851.112 135.081 li
851.355 135.513 li
851.796 135.27 li
851.553 134.838 li
860.283 129.96 mo
855.045 132.885 li
855.288 133.326 li
860.526 130.401 li
860.283 129.96 li
864.207 127.764 mo
863.775 128.007 li
864.018 128.448 li
864.45 128.205 li
864.207 127.764 li
872.937 122.895 mo
867.699 125.82 li
867.942 126.252 li
873.18 123.327 li
872.937 122.895 li
876.87 120.699 mo
876.429 120.942 li
876.681 121.374 li
877.113 121.131 li
876.87 120.699 li
885.6 115.821 mo
880.362 118.746 li
880.605 119.187 li
885.843 116.253 li
885.6 115.821 li
889.524 113.625 mo
889.092 113.868 li
889.335 114.309 li
889.776 114.066 li
889.524 113.625 li
898.263 108.747 mo
893.025 111.672 li
893.268 112.113 li
898.506 109.188 li
898.263 108.747 li
902.187 106.56 mo
901.755 106.803 li
901.998 107.235 li
902.43 106.992 li
902.187 106.56 li
910.917 101.682 mo
905.679 104.607 li
905.922 105.039 li
911.16 102.114 li
910.917 101.682 li
914.85 99.486 mo
914.409 99.729 li
914.652 100.17 li
915.093 99.918 li
914.85 99.486 li
923.58 94.608 mo
918.342 97.533 li
918.585 97.974 li
923.823 95.049 li
923.58 94.608 li
927.504 92.412 mo
927.072 92.655 li
927.315 93.096 li
927.747 92.853 li
927.504 92.412 li
936.234 87.543 mo
930.996 90.468 li
931.239 90.9 li
936.477 87.975 li
936.234 87.543 li
940.167 85.347 mo
939.726 85.59 li
939.969 86.022 li
940.41 85.779 li
940.167 85.347 li
948.897 80.469 mo
943.659 83.394 li
943.902 83.835 li
949.14 80.91 li
948.897 80.469 li
952.821 78.273 mo
952.389 78.516 li
952.632 78.957 li
953.064 78.714 li
952.821 78.273 li
0.898039 0.898039 1 rgb
f
517.446 578.358 mo
516.942 578.358 li
516.942 569.241 li
517.446 569.241 li
517.446 578.358 li
517.446 17.739 mo
516.942 17.739 li
516.942 7.992 li
517.446 7.992 li
517.446 17.739 li
0 0 0.101961 rgb
f
607.608 578.358 mo
607.113 578.358 li
607.113 569.241 li
607.608 569.241 li
607.608 578.358 li
607.608 17.739 mo
607.113 17.739 li
607.113 7.992 li
607.608 7.992 li
607.608 17.739 li
f
697.779 578.358 mo
697.275 578.358 li
697.275 569.241 li
697.779 569.241 li
697.779 578.358 li
697.779 17.739 mo
697.275 17.739 li
697.275 7.992 li
697.779 7.992 li
697.779 17.739 li
f
787.941 578.358 mo
787.446 578.358 li
787.446 569.241 li
787.941 569.241 li
787.941 578.358 li
787.941 17.739 mo
787.446 17.739 li
787.446 7.992 li
787.941 7.992 li
787.941 17.739 li
f
878.112 578.358 mo
877.608 578.358 li
877.608 569.241 li
878.112 569.241 li
878.112 578.358 li
878.112 17.739 mo
877.608 17.739 li
877.608 7.992 li
878.112 7.992 li
878.112 17.739 li
f
967.347 7.992 mo
878.112 7.992 li
877.608 7.992 li
787.941 7.992 li
787.446 7.992 li
697.779 7.992 li
697.275 7.992 li
607.608 7.992 li
607.113 7.992 li
517.446 7.992 li
516.942 7.992 li
450.351 7.992 li
450.351 7.857 li
967.347 7.857 li
967.347 7.992 li
f
451.773 408.735 mo
450.351 408.735 li
450.351 387.99 li
451.773 387.99 li
451.773 408.735 li
451.431 398.61 mo
450.981 398.817 li
451.197 399.276 li
451.647 399.06 li
451.431 398.61 li
f
456.273 397.071 mo
455.833 397.071 li
456.273 396.862 li
456.273 397.071 li
455.135 397.071 mo
452.277 397.071 li
452.277 358.402 li
455.427 356.643 li
455.184 356.211 li
452.277 357.834 li
452.277 300.402 li
456.273 300.402 li
456.273 396.31 li
455.049 396.891 li
455.135 397.071 li
0.898039 0 0.101961 rgb
f
965.529 131.742 mo
961.524 131.742 li
961.524 73.9918 li
961.803 73.836 li
961.551 73.395 li
961.524 73.4101 li
961.524 51.867 li
961.524 17.901 li
965.529 17.901 li
965.529 51.867 li
965.529 71.288 li
965.484 71.208 li
965.043 71.451 li
965.295 71.883 li
965.529 71.7514 li
965.529 131.742 li
0 0 1 rgb
f
967.347 161.406 mo
966.024 161.406 li
966.024 154.64 li
966.15 154.908 li
967.347 154.337 li
967.347 161.406 li
966.024 154.407 mo
966.024 103.401 li
967.347 103.401 li
967.347 153.784 li
966.024 154.407 li
0 0 0.101961 rgb
f
451.197 399.276 mo
450.981 398.817 li
451.431 398.61 li
451.647 399.06 li
451.197 399.276 li
455.265 397.341 mo
455.135 397.071 li
455.049 396.891 li
456.273 396.31 li
460.467 394.317 li
460.683 394.767 li
456.273 396.862 li
455.833 397.071 li
455.265 397.341 li
464.292 393.057 mo
464.085 392.607 li
464.535 392.391 li
464.751 392.841 li
464.292 393.057 li
468.36 391.122 mo
468.144 390.672 li
473.571 388.098 li
473.778 388.557 li
468.36 391.122 li
477.396 386.838 mo
477.18 386.388 li
477.63 386.172 li
477.846 386.622 li
477.396 386.838 li
481.464 384.912 mo
481.248 384.462 li
486.666 381.888 li
486.882 382.338 li
481.464 384.912 li
490.491 380.619 mo
490.284 380.169 li
490.734 379.953 li
490.95 380.412 li
490.491 380.619 li
494.559 378.693 mo
494.343 378.243 li
499.77 375.669 li
499.977 376.119 li
494.559 378.693 li
503.595 374.409 mo
503.379 373.959 li
503.829 373.743 li
504.045 374.193 li
503.595 374.409 li
507.663 372.474 mo
507.447 372.024 li
512.865 369.45 li
513.081 369.909 li
507.663 372.474 li
516.69 368.19 mo
516.483 367.74 li
516.933 367.524 li
517.149 367.974 li
516.69 368.19 li
520.758 366.264 mo
520.542 365.805 li
525.969 363.24 li
526.185 363.69 li
520.758 366.264 li
529.794 361.971 mo
529.578 361.521 li
530.028 361.305 li
530.244 361.755 li
529.794 361.971 li
533.862 360.045 mo
533.646 359.595 li
539.064 357.021 li
539.28 357.471 li
533.862 360.045 li
450.351 359.478 mo
450.351 358.91 li
452.277 357.834 li
455.184 356.211 li
455.427 356.643 li
452.277 358.402 li
450.351 359.478 li
542.898 355.761 mo
542.682 355.302 li
543.132 355.095 li
543.348 355.545 li
542.898 355.761 li
458.919 354.69 mo
458.676 354.258 li
459.117 354.015 li
459.36 354.447 li
458.919 354.69 li
546.957 353.826 mo
546.741 353.376 li
552.168 350.802 li
552.384 351.252 li
546.957 353.826 li
462.852 352.503 mo
462.609 352.062 li
467.847 349.137 li
468.09 349.578 li
462.852 352.503 li
555.993 349.542 mo
555.777 349.092 li
556.227 348.876 li
556.443 349.326 li
555.993 349.542 li
471.582 347.625 mo
471.339 347.184 li
471.771 346.941 li
472.014 347.382 li
471.582 347.625 li
560.061 347.616 mo
559.845 347.157 li
565.263 344.592 li
565.479 345.042 li
560.061 347.616 li
475.506 345.429 mo
475.263 344.997 li
480.501 342.072 li
480.744 342.504 li
475.506 345.429 li
569.097 343.323 mo
568.881 342.873 li
569.331 342.657 li
569.547 343.107 li
569.097 343.323 li
573.156 341.397 mo
572.949 340.947 li
578.367 338.373 li
578.583 338.823 li
573.156 341.397 li
484.236 340.551 mo
483.993 340.119 li
484.434 339.876 li
484.677 340.308 li
484.236 340.551 li
488.169 338.364 mo
487.926 337.923 li
493.164 334.998 li
493.407 335.43 li
488.169 338.364 li
582.192 337.104 mo
581.976 336.654 li
582.435 336.438 li
582.642 336.897 li
582.192 337.104 li
586.26 335.178 mo
586.044 334.728 li
591.462 332.154 li
591.678 332.604 li
586.26 335.178 li
496.899 333.486 mo
496.656 333.045 li
497.088 332.802 li
497.34 333.243 li
496.899 333.486 li
500.832 331.29 mo
500.58 330.849 li
505.827 327.924 li
506.07 328.365 li
500.832 331.29 li
595.296 330.894 mo
595.08 330.444 li
595.53 330.228 li
595.746 330.678 li
595.296 330.894 li
599.355 328.959 mo
599.148 328.509 li
604.566 325.935 li
604.782 326.394 li
599.355 328.959 li
509.562 326.412 mo
509.319 325.98 li
509.751 325.737 li
509.994 326.169 li
509.562 326.412 li
608.391 324.675 mo
608.175 324.225 li
608.634 324.009 li
608.841 324.459 li
608.391 324.675 li
513.486 324.216 mo
513.243 323.784 li
518.481 320.859 li
518.724 321.291 li
513.486 324.216 li
612.459 322.749 mo
612.243 322.29 li
617.661 319.725 li
617.877 320.175 li
612.459 322.749 li
522.216 319.347 mo
521.973 318.906 li
522.414 318.663 li
522.657 319.095 li
522.216 319.347 li
621.495 318.456 mo
621.279 318.006 li
621.729 317.79 li
621.945 318.249 li
621.495 318.456 li
526.149 317.151 mo
525.906 316.71 li
531.144 313.785 li
531.387 314.226 li
526.149 317.151 li
625.554 316.53 mo
625.347 316.08 li
630.765 313.506 li
630.981 313.956 li
625.554 316.53 li
534.879 312.273 mo
534.636 311.832 li
535.068 311.589 li
535.311 312.03 li
534.879 312.273 li
634.59 312.246 mo
634.374 311.787 li
634.833 311.58 li
635.04 312.03 li
634.59 312.246 li
638.658 310.311 mo
638.442 309.861 li
643.86 307.287 li
644.076 307.737 li
638.658 310.311 li
538.803 310.077 mo
538.56 309.645 li
543.798 306.72 li
544.041 307.152 li
538.803 310.077 li
647.694 306.027 mo
647.478 305.577 li
647.928 305.361 li
648.144 305.811 li
647.694 306.027 li
547.533 305.199 mo
547.29 304.767 li
547.731 304.524 li
547.974 304.956 li
547.533 305.199 li
651.762 304.101 mo
651.546 303.642 li
656.964 301.077 li
657.18 301.527 li
651.762 304.101 li
551.466 303.012 mo
551.223 302.571 li
556.461 299.646 li
556.704 300.087 li
551.466 303.012 li
660.789 299.808 mo
660.582 299.358 li
661.032 299.142 li
661.248 299.592 li
660.789 299.808 li
560.196 298.134 mo
559.953 297.693 li
560.385 297.45 li
560.628 297.891 li
560.196 298.134 li
664.857 297.882 mo
664.641 297.432 li
670.068 294.858 li
670.275 295.308 li
664.857 297.882 li
564.129 295.938 mo
563.877 295.506 li
569.115 292.572 li
569.367 293.013 li
564.129 295.938 li
673.893 293.589 mo
673.677 293.139 li
674.127 292.923 li
674.343 293.382 li
673.893 293.589 li
677.961 291.663 mo
677.745 291.213 li
683.163 288.639 li
683.379 289.089 li
677.961 291.663 li
572.859 291.06 mo
572.607 290.628 li
573.048 290.385 li
573.291 290.817 li
572.859 291.06 li
576.783 288.864 mo
576.54 288.432 li
581.778 285.507 li
582.021 285.939 li
576.783 288.864 li
686.988 287.379 mo
686.781 286.929 li
687.231 286.713 li
687.447 287.163 li
686.988 287.379 li
691.056 285.444 mo
690.84 284.994 li
696.267 282.42 li
696.474 282.879 li
691.056 285.444 li
585.513 283.995 mo
585.27 283.554 li
585.711 283.311 li
585.954 283.752 li
585.513 283.995 li
589.446 281.799 mo
589.203 281.358 li
594.441 278.433 li
594.684 278.874 li
589.446 281.799 li
700.092 281.16 mo
699.876 280.71 li
700.326 280.494 li
700.542 280.944 li
700.092 281.16 li
704.16 279.234 mo
703.944 278.784 li
709.362 276.21 li
709.578 276.66 li
704.16 279.234 li
598.176 276.921 mo
597.933 276.489 li
598.365 276.237 li
598.608 276.678 li
598.176 276.921 li
713.187 274.941 mo
712.98 274.491 li
713.43 274.275 li
713.646 274.734 li
713.187 274.941 li
602.1 274.725 mo
601.857 274.293 li
607.095 271.368 li
607.338 271.8 li
602.1 274.725 li
717.255 273.015 mo
717.039 272.565 li
722.466 269.991 li
722.673 270.441 li
717.255 273.015 li
610.83 269.847 mo
610.587 269.415 li
611.028 269.172 li
611.271 269.604 li
610.83 269.847 li
726.291 268.731 mo
726.075 268.272 li
726.525 268.065 li
726.741 268.515 li
726.291 268.731 li
614.763 267.66 mo
614.52 267.219 li
619.758 264.294 li
620.001 264.735 li
614.763 267.66 li
730.359 266.796 mo
730.143 266.346 li
735.561 263.772 li
735.777 264.222 li
730.359 266.796 li
623.493 262.782 mo
623.25 262.341 li
623.682 262.098 li
623.925 262.539 li
623.493 262.782 li
739.395 262.512 mo
739.179 262.062 li
739.629 261.846 li
739.845 262.296 li
739.395 262.512 li
743.454 260.586 mo
743.238 260.127 li
748.665 257.562 li
748.881 258.012 li
743.454 260.586 li
627.417 260.586 mo
627.174 260.154 li
632.412 257.229 li
632.655 257.661 li
627.417 260.586 li
752.49 256.293 mo
752.274 255.843 li
752.724 255.627 li
752.94 256.077 li
752.49 256.293 li
636.147 255.708 mo
635.904 255.276 li
636.345 255.033 li
636.588 255.465 li
636.147 255.708 li
756.558 254.367 mo
756.342 253.917 li
761.76 251.343 li
761.976 251.793 li
756.558 254.367 li
640.08 253.521 mo
639.837 253.08 li
645.075 250.155 li
645.318 250.587 li
640.08 253.521 li
765.594 250.083 mo
765.378 249.624 li
765.828 249.417 li
766.044 249.867 li
765.594 250.083 li
648.81 248.643 mo
648.567 248.202 li
648.999 247.959 li
649.251 248.4 li
648.81 248.643 li
769.653 248.148 mo
769.437 247.698 li
774.864 245.124 li
775.08 245.574 li
769.653 248.148 li
652.743 246.447 mo
652.491 246.006 li
657.738 243.081 li
657.981 243.522 li
652.743 246.447 li
778.689 243.864 mo
778.473 243.414 li
778.923 243.198 li
779.139 243.648 li
778.689 243.864 li
782.757 241.929 mo
782.541 241.479 li
787.959 238.905 li
788.175 239.364 li
782.757 241.929 li
661.473 241.569 mo
661.23 241.137 li
661.662 240.894 li
661.905 241.326 li
661.473 241.569 li
665.397 239.373 mo
665.154 238.941 li
670.392 236.016 li
670.635 236.448 li
665.397 239.373 li
791.793 237.645 mo
791.577 237.195 li
792.027 236.979 li
792.243 237.429 li
791.793 237.645 li
795.852 235.719 mo
795.645 235.269 li
801.063 232.695 li
801.279 233.145 li
795.852 235.719 li
674.127 234.504 mo
673.884 234.063 li
674.325 233.82 li
674.568 234.261 li
674.127 234.504 li
678.06 232.308 mo
677.817 231.867 li
683.055 228.942 li
683.298 229.383 li
678.06 232.308 li
804.888 231.426 mo
804.672 230.976 li
805.131 230.76 li
805.338 231.219 li
804.888 231.426 li
808.956 229.5 mo
808.74 229.05 li
814.158 226.476 li
814.374 226.926 li
808.956 229.5 li
686.79 227.43 mo
686.547 226.998 li
686.979 226.746 li
687.222 227.187 li
686.79 227.43 li
690.714 225.234 mo
690.471 224.802 li
695.709 221.877 li
695.952 222.309 li
690.714 225.234 li
817.992 225.216 mo
817.776 224.766 li
818.226 224.55 li
818.442 225 li
817.992 225.216 li
822.051 223.281 mo
821.844 222.831 li
827.262 220.257 li
827.478 220.716 li
822.051 223.281 li
699.444 220.356 mo
699.201 219.924 li
699.642 219.681 li
699.885 220.113 li
699.444 220.356 li
831.087 218.997 mo
830.871 218.547 li
831.33 218.331 li
831.537 218.781 li
831.087 218.997 li
703.377 218.169 mo
703.134 217.728 li
708.372 214.803 li
708.615 215.244 li
703.377 218.169 li
835.155 217.071 mo
834.939 216.612 li
840.357 214.047 li
840.573 214.497 li
835.155 217.071 li
712.107 213.291 mo
711.864 212.85 li
712.296 212.607 li
712.539 213.048 li
712.107 213.291 li
844.191 212.778 mo
843.975 212.328 li
844.425 212.112 li
844.641 212.562 li
844.191 212.778 li
716.031 211.095 mo
715.788 210.663 li
721.026 207.729 li
721.278 208.17 li
716.031 211.095 li
848.259 210.852 mo
848.043 210.402 li
853.461 207.828 li
853.677 208.278 li
848.259 210.852 li
857.286 206.568 mo
857.07 206.109 li
857.529 205.902 li
857.745 206.352 li
857.286 206.568 li
724.77 206.217 mo
724.518 205.785 li
724.959 205.542 li
725.202 205.974 li
724.77 206.217 li
861.354 204.633 mo
861.138 204.183 li
866.565 201.609 li
866.772 202.059 li
861.354 204.633 li
728.694 204.021 mo
728.451 203.589 li
733.689 200.664 li
733.932 201.096 li
728.694 204.021 li
870.39 200.349 mo
870.174 199.899 li
870.624 199.683 li
870.84 200.133 li
870.39 200.349 li
737.424 199.152 mo
737.181 198.711 li
737.622 198.468 li
737.865 198.909 li
737.424 199.152 li
874.458 198.423 mo
874.242 197.964 li
879.66 195.399 li
879.876 195.849 li
874.458 198.423 li
741.357 196.956 mo
741.114 196.515 li
746.352 193.59 li
746.595 194.031 li
741.357 196.956 li
883.485 194.13 mo
883.278 193.68 li
883.728 193.464 li
883.944 193.914 li
883.485 194.13 li
887.553 192.204 mo
887.337 191.754 li
892.764 189.18 li
892.971 189.63 li
887.553 192.204 li
750.087 192.078 mo
749.844 191.646 li
750.276 191.403 li
750.519 191.835 li
750.087 192.078 li
754.011 189.882 mo
753.768 189.45 li
759.006 186.525 li
759.249 186.957 li
754.011 189.882 li
896.589 187.911 mo
896.373 187.461 li
896.823 187.245 li
897.039 187.704 li
896.589 187.911 li
900.657 185.985 mo
900.441 185.535 li
905.859 182.961 li
906.075 183.411 li
900.657 185.985 li
762.741 185.013 mo
762.498 184.572 li
762.939 184.329 li
763.182 184.761 li
762.741 185.013 li
766.674 182.817 mo
766.431 182.376 li
771.669 179.451 li
771.912 179.892 li
766.674 182.817 li
909.684 181.701 mo
909.477 181.251 li
909.927 181.035 li
910.143 181.485 li
909.684 181.701 li
913.752 179.766 mo
913.536 179.316 li
918.963 176.742 li
919.17 177.201 li
913.752 179.766 li
775.404 177.939 mo
775.161 177.498 li
775.593 177.255 li
775.836 177.696 li
775.404 177.939 li
779.328 175.743 mo
779.085 175.311 li
784.323 172.386 li
784.566 172.818 li
779.328 175.743 li
922.788 175.482 mo
922.572 175.032 li
923.022 174.816 li
923.238 175.266 li
922.788 175.482 li
926.856 173.556 mo
926.64 173.106 li
932.058 170.532 li
932.274 170.982 li
926.856 173.556 li
788.058 170.865 mo
787.815 170.433 li
788.256 170.19 li
788.499 170.622 li
788.058 170.865 li
935.892 169.263 mo
935.676 168.813 li
936.126 168.597 li
936.342 169.056 li
935.892 169.263 li
791.991 168.678 mo
791.748 168.237 li
796.986 165.312 li
797.229 165.753 li
791.991 168.678 li
939.951 167.337 mo
939.735 166.887 li
945.162 164.313 li
945.378 164.763 li
939.951 167.337 li
800.721 163.8 mo
800.478 163.359 li
800.91 163.116 li
801.162 163.557 li
800.721 163.8 li
948.987 163.053 mo
948.771 162.594 li
949.221 162.387 li
949.437 162.837 li
948.987 163.053 li
804.654 161.604 mo
804.402 161.163 li
809.64 158.238 li
809.892 158.679 li
804.654 161.604 li
953.055 161.118 mo
952.839 160.668 li
958.257 158.094 li
958.473 158.544 li
953.055 161.118 li
962.091 156.834 mo
961.875 156.384 li
962.325 156.168 li
962.541 156.618 li
962.091 156.834 li
813.384 156.726 mo
813.141 156.294 li
813.573 156.051 li
813.816 156.483 li
813.384 156.726 li
966.15 154.908 mo
966.024 154.64 li
965.934 154.449 li
966.024 154.407 li
967.347 153.784 li
967.347 154.337 li
966.15 154.908 li
817.308 154.53 mo
817.065 154.098 li
822.303 151.173 li
822.546 151.605 li
817.308 154.53 li
826.038 149.661 mo
825.795 149.22 li
826.236 148.977 li
826.479 149.418 li
826.038 149.661 li
829.971 147.465 mo
829.728 147.024 li
834.966 144.099 li
835.209 144.54 li
829.971 147.465 li
838.701 142.587 mo
838.458 142.155 li
838.89 141.903 li
839.133 142.344 li
838.701 142.587 li
842.625 140.391 mo
842.382 139.959 li
847.62 137.034 li
847.863 137.466 li
842.625 140.391 li
851.355 135.513 mo
851.112 135.081 li
851.553 134.838 li
851.796 135.27 li
851.355 135.513 li
855.288 133.326 mo
855.045 132.885 li
860.283 129.96 li
860.526 130.401 li
855.288 133.326 li
864.018 128.448 mo
863.775 128.007 li
864.207 127.764 li
864.45 128.205 li
864.018 128.448 li
867.942 126.252 mo
867.699 125.82 li
872.937 122.895 li
873.18 123.327 li
867.942 126.252 li
876.681 121.374 mo
876.429 120.942 li
876.87 120.699 li
877.113 121.131 li
876.681 121.374 li
880.605 119.187 mo
880.362 118.746 li
885.6 115.821 li
885.843 116.253 li
880.605 119.187 li
889.335 114.309 mo
889.092 113.868 li
889.524 113.625 li
889.776 114.066 li
889.335 114.309 li
893.268 112.113 mo
893.025 111.672 li
898.263 108.747 li
898.506 109.188 li
893.268 112.113 li
901.998 107.235 mo
901.755 106.803 li
902.187 106.56 li
902.43 106.992 li
901.998 107.235 li
905.922 105.039 mo
905.679 104.607 li
910.917 101.682 li
911.16 102.114 li
905.922 105.039 li
914.652 100.17 mo
914.409 99.729 li
914.85 99.486 li
915.093 99.918 li
914.652 100.17 li
918.585 97.974 mo
918.342 97.533 li
923.58 94.608 li
923.823 95.049 li
918.585 97.974 li
927.315 93.096 mo
927.072 92.655 li
927.504 92.412 li
927.747 92.853 li
927.315 93.096 li
931.239 90.9 mo
930.996 90.468 li
936.234 87.543 li
936.477 87.975 li
931.239 90.9 li
939.969 86.022 mo
939.726 85.59 li
940.167 85.347 li
940.41 85.779 li
939.969 86.022 li
943.902 83.835 mo
943.659 83.394 li
948.897 80.469 li
949.14 80.91 li
943.902 83.835 li
952.632 78.957 mo
952.389 78.516 li
952.821 78.273 li
953.064 78.714 li
952.632 78.957 li
956.565 76.761 mo
956.313 76.329 li
961.524 73.4101 li
961.551 73.395 li
961.803 73.836 li
961.524 73.9918 li
956.565 76.761 li
965.295 71.883 mo
965.043 71.451 li
965.484 71.208 li
965.529 71.288 li
965.727 71.64 li
965.529 71.7514 li
965.295 71.883 li
f
gsave
715.77 160.749 mo
665.073 160.749 li
665.073 142.191 li
715.77 142.191 li
715.77 160.749 li
clp
665.073 142.191 mo
715.77 142.191 li
715.77 160.749 li
665.073 160.749 li
cp
0.898039 0.898039 1 rgb
f
0 0 0.101961 rgb
EOYKKY+Helvetica-Bold*1 [20 0 0 -20 0 0 ]msf663.857 156.566 mo(pupal)[12.2168 12.2168 12.2168 11.123 0 ]xshgrestore
968.346 51.867 mo
967.347 51.867 li
967.347 7.992 li
967.779 7.992 li
967.779 17.739 li
968.274 17.739 li
968.274 7.992 li
968.346 7.992 li
968.346 51.867 li
450.351 51.867 mo
449.352 51.867 li
449.352 7.992 li
450.351 7.992 li
450.351 51.867 li
968.346 7.488 mo
449.352 7.488 li
449.352 6.858 li
968.346 6.858 li
968.346 7.488 li
1 1 1 rgb
f
968.346 578.988 mo
968.274 578.988 li
968.274 569.241 li
967.779 569.241 li
967.779 578.988 li
878.112 578.988 li
878.112 578.358 li
967.347 578.358 li
967.347 161.406 li
968.346 161.406 li
968.346 578.862 li
968.346 578.988 li
877.608 578.988 mo
787.941 578.988 li
787.941 578.358 li
877.608 578.358 li
877.608 578.988 li
787.446 578.988 mo
697.779 578.988 li
697.779 578.358 li
787.446 578.358 li
787.446 578.988 li
697.275 578.988 mo
607.608 578.988 li
607.608 578.358 li
697.275 578.358 li
697.275 578.988 li
607.113 578.988 mo
517.446 578.988 li
517.446 578.358 li
607.113 578.358 li
607.113 578.988 li
516.942 578.988 mo
449.352 578.988 li
449.352 408.735 li
450.351 408.735 li
450.351 578.358 li
516.942 578.358 li
516.942 578.988 li
450.351 387.99 mo
449.352 387.99 li
449.352 51.867 li
450.351 51.867 li
450.351 358.91 li
449.946 359.136 li
450.189 359.568 li
450.351 359.478 li
450.351 387.99 li
968.346 103.401 mo
967.347 103.401 li
967.347 51.867 li
968.346 51.867 li
968.346 103.401 li
f
517.446 578.988 mo
516.942 578.988 li
516.942 578.358 li
517.446 578.358 li
517.446 578.988 li
0.101961 0.101961 0.101961 rgb
f
607.608 578.988 mo
607.113 578.988 li
607.113 578.358 li
607.608 578.358 li
607.608 578.988 li
f
697.779 578.988 mo
697.275 578.988 li
697.275 578.358 li
697.779 578.358 li
697.779 578.988 li
f
787.941 578.988 mo
787.446 578.988 li
787.446 578.358 li
787.941 578.358 li
787.941 578.988 li
f
878.112 578.988 mo
877.608 578.988 li
877.608 578.358 li
878.112 578.358 li
878.112 578.988 li
f
968.274 578.988 mo
967.779 578.988 li
967.779 569.241 li
968.274 569.241 li
968.274 578.988 li
967.851 578.862 mo
967.851 578.862 li
967.851 578.358 li
967.851 578.862 li
968.274 17.739 mo
967.779 17.739 li
967.779 7.992 li
968.274 7.992 li
968.274 17.739 li
f
968.346 579.357 mo
449.352 579.357 li
449.352 578.988 li
516.942 578.988 li
517.446 578.988 li
607.113 578.988 li
607.608 578.988 li
697.275 578.988 li
697.779 578.988 li
787.446 578.988 li
787.941 578.988 li
877.608 578.988 li
878.112 578.988 li
967.779 578.988 li
968.274 578.988 li
968.346 578.988 li
968.346 579.357 li
968.346 7.992 mo
968.274 7.992 li
967.779 7.992 li
967.347 7.992 li
967.347 7.857 li
450.351 7.857 li
450.351 7.992 li
449.352 7.992 li
449.352 7.488 li
968.346 7.488 li
968.346 7.992 li
f
450.351 408.735 mo
449.352 408.735 li
449.352 387.99 li
450.351 387.99 li
450.351 408.735 li
f
968.346 161.406 mo
967.347 161.406 li
967.347 154.337 li
968.13 153.963 li
967.923 153.513 li
967.347 153.784 li
967.347 103.401 li
968.346 103.401 li
968.346 161.406 li
f
450.189 359.568 mo
449.946 359.136 li
450.351 358.91 li
450.351 359.478 li
450.189 359.568 li
967.347 154.337 mo
967.347 153.784 li
967.923 153.513 li
968.13 153.963 li
967.347 154.337 li
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
/EOYKKX+Helvetica*1 uf/EOYKKX+Helvetica uf/Helvetica uf/EOYKKY+Helvetica-Bold*1 uf/EOYKKY+Helvetica-Bold uf/Helvetica-Bold ufAdobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 13.0%%AI8_CreatorVersion: 13.0.2%%For: (Sean) ()%%Title: (anderson.eps)%%CreationDate: 10/16/20 6:56 AM%AI9_DataStream%Gb"07G@)iCdP-!^!8dfVEgT61,UYmsJ:\(6US9"=fOqDNO8IUKLWN3mI+NZ3^$#=%$YGh;eQ(-7]A2i6@P]*%jr_R]^M.>JMGh_R%6TS-Sm>R6KLYH+,gor;O,;MS3RCG%HV]o!,:4_P,,T;S<i&@nH'2(g2&'KmYB#`-JD/M(;=0'bY]&6V'BBd`Mm^sBaJ2[RCO.B#^%s)AgPK@.0p-e61`%@Yl$ks+N\1)bh(Ms2(k%n_o0[u3K+A2"2iKQ#M(c#gbCqRG?4QdZ7&hP78@,M'%nVJLCkbm%rr.RM!b'\tE[%-I_MHAi=21ZnoimiFAaG<nLQ+V1DX`chMKi5+6B/C`BI<*B.Tgoa8E(o[2i+G.e*1"Z)si1i@%s3OmL4')g_^"QhODXgu8oZC&E%%EQ<:iCcNN;=gTVTP)R>LF=IInb!,DK_'2]+MP?[#=POci-CsZp'#0\iMZ%2)r[/.uB/H$[(TU?EV"S>P@8Yt6\!-gmX%SU$fP(s_%^"H(^Xtu\8.+@Z_$NKI%0kR=s=o<3=dfE]$?4nR_`=;5>g]tFq\@.cBi%!,&p_A=$C[d,@<d\hbrmd1&h_"9DCr94'j^cFX>dBP;%8_TT*^rJG"4@VB,;19o#4lPQ+H[rjI3_f\=\&!MuEKcI*4O$YPdB@PRZ*[#o]-RB.AfaOdr_!Rti@0B/Y1N$1T/&[#dY60]fV".,%0OeTW/hLZHp])\s7BjmTYlE1k#C\%L7W6)g2bV2TK1QY>S&Lh%J\J"_1DM9$\A:D2PG47/@6@sYn7G*'3:N@b!M#WQVZWYK(i@hT%EOc:@b7[lC1C);>Ike`5#,jH^huF#OidJuK9+7USq"Fm?q+0_>7DEpU/H.(Kq^F&pFFq,si&26ORu,d0Nk0EG$f#oVgFd#R(Ll,&%T#q6rh;G.LWMtO&Li(1bNt7O$`aFBL98ik`M:J'VVJm8#Fp.>p(iH3LG"jLm*/),uP5r@b%Hc^0'L7LBoET[]';NMZY_nLf2$)o\%bg$FJ2hC-7%MtNdemnEE-rc#'eTA%lFGQ!De'2VcR;\lj_S:TQ3AK9e+$6pb$3)WfnN.,iR`nq0GrAca2H0B>BJ9G4q9a[Mlj>@c%]_KgC@/h6A#;bua?l.aN;t'nZ=7:Z]-hH_>HiT`sAS6qoP^Qn3h_6;U)kS\?b#_6OjbNupMuo&Vr'(p*!HDX6##c_u)>XR]1&s&o%<;;(B7,Og'pu-JgcNGGJ#W*.U4n6u_2o%LYfl.<U;a`(o][8[fSV)0ZJ-GQ.!CeE%@%>1Q+pcn<M9^j.'e<#jI0!'oT8Ur$TSS4K%aAB5fqcpq(;%Y0W_4YN#k7'G_2T/&oguo)(\ru_6XSW@6khm3sGrHcAC(,<$[@.Z4?fR-5%7V>UGJNWDZbZnZ"=@hVd15/W1]J;2%S(Vnf=T^]ibh6oD1]Y:3gf4mjNLfh4<oDb(4"nECI$,U1<LJm`:f^+KqoV9-I0MnJWWn-V4[(=_*c^@n*su:8n$igRpLhV%T8Dpa%Q]Ed/IE59pA-rbp"3b6?+gLu5I"Z4YW\@`fn[+md35tJK-^A'FJ1L!4AhXBqil#C,%X>thO,O0,r'1_,!Q#<h`ksG>.S2oq";p*D%174(Ln*^B]kR>QS`0+>`2^?*b-_SL;AGDhpA;[mcYoa(GK1a)g^_J"kEDib=0j'#Lr6*D1PpFN='Sq/o($-k^E1m5>k9$dhNfpX:%'[V%'p<RQbR.^jaY@9k.(rgt(o/8j9GapfIQgd_Thk"`$WuAJ"/0"3TKu8Zgj(o7WT0U6rHtVPbo$?f,-iO9og7%rWib+CiAEc&>%muE%[d>.=.p]XD&n72HKo]^NT=gR62h2\.]^c@>.B(bE$>:cZ2r04D'C%@>4;qV)a@uN>B_>J&.+h^#Oh`s=;&./C&7KKXa7fY4B%RsQdt^aY41QcVd6!0-a48GJa8_16dRZ-r*g=5dKoBSe-aZC4A;.!sBsS7aZiDuTg"CM)F-R=,;YRLF#rBk@8S4'aCKP8'X>,MW#J%i0Hi<_efGpEssH"dB`tq`G>k2@H[%@@*,/-Y!8tcjfJ\CSdsn5SYP@WQ]V.Gr!!!lacc-LZ-sQNqf:7(%NG"-gHS6f2c.n+rrL/m%K4rP]S;=m=dpNXV"dg6K3LI(sOFt'6!"G/-hNH/7nDB!g;!pkepCI%>%R,8k8,mQuSJTSL(Xb;J:V/Qa>o1RWGi>P1-TE.'_7pmu%3b).]09$qJ9B4%ld^Y.K1iDk;NLTc+j3m!q)OL:nj3iEk>im]!qj7'mrKm9orKm9orKm9orKm9orKm9oo9]4eo9]4eo9]4eo9]4e%o9]4eo9]4eo9]4eo9]4eo9]4eo7*9;4b9M`c#inn19f\lK)b9L^]Q8W,S<b5[$-He'?MXiTatZbM;10<Q&:J5/QeT%V))n_D#s<'%d^;a`[e=+OY1G4nH[BFS[VGO[>'BXi**[="p;kW6MXqC6Z_K7`5^2cNfNKV:Y`!6gOn]YL'YnVc0E*]i8G,fWF+19D^U$%)%ik"$%+aaN^!P_?jo3fB4_;Dj@Xin\NeU2Z-o_gk@cGAi9@(k\L_p+WUq#S?`V?Mu!r1E65!<()ENBS`=0uqRZ)qmk?!+a$WnB^qA1jd$I%50nW,s(B-L:'%KQY+Z(dg%:oQF<e/HcW<0pk($3H1O^Z$`OGlDciFQ:[/cTY@e@p*X[#?h)>^u2)GX*_#\@F]!'+rMod*dpq>00S%&%):^6@ptGKVe?;#/_m*"n><2om[XKVuO"qlEKM[`b;lpd:Tdmbl04Bq`R&8Y6If+JnH,I0rsO5lZ<0inm=5=s#3d=lMWsI`M`65%-A0ij1A]nRMlA\"A=URI4.,:doKSQ0qU<U\ndYUOs0]50:DS]O=BUj7o'\1\S4KMjZUOhtZCX:1Ijp3gA[[hQ/THuh]bI]0iaQ?#%N8\4T`./X#^;ck><`ZX,S,\'b+7Zqs`J,>:."(oqTD@DUqV+r9Z0T4CLd:j_,IQ\sNlSfW_$YA-)M^/jKo$2%\K$QRjcC1\Ho>)T%Wt9cg>c^r-#1Em>QjJ=i`lgpV5Do#-7Z/]CcDf00(,kK4o4@ut@OM2nWd63Q;U4B3a`>\WA@@mM"-[a5@>b/q*\IZPfK"Naj#h.L%0%f])1NQ0^i6[Y=R869P0ESHc%>o1`L)UgEmGoLp_3f)"?*S1CUe&Yj7?Pl>Z/K/uL*<nK2>ciG"X[6m-1$flLNP6K@C[[@/$5mq%]ioK8Dh7?LH65j/9)o)CU&XG3Z,R/;k+YCE"IS0r*.iS5+*P"tE6dEM3gbsb<_GFVlu>c#49oZQ3J;s$-t!Jn&0hAVJQm02Y!0g1%7GB0D#fH)FkDR_H=LI`&a0rd\%&rIgC9q5u#0,KJ1'Ca$KDB7B!-C0r"8\RI!BLOs(6?G%QnC-S.Bq*WeYY$2OrlkW8*Qgu>?]U[%Bi@+LEe7`?FL#@K9!JtF!CQ;U1-7#Haa,Y29IK-jiiWT$Zpd!W_>Ie!pgBZ[`DY@";n-hB"ZL&6gMFo%>V=Tbf1Mj;Zu=o8,6GB=%e!;foe3l_uncdE9^gi$]DWO8s4qfa[+W\/4f4#Qti.L6sB$omU9)o3IFW[]*cK]#Bn&]SUB^XVn3%0`jk#O%'SXau"m=P=fo>M81%LH4=V[])n#"&1c7(A_E43Tgd,AN;,Z`+9^bM#[f%Ft;UZBF"^s]!Z5uaNR7=1V8c*ZU@JEF3FrHHd'EcE[I[A9=T*R7M\@mL%0MW%;5neqK&>K.[34gDCaJuk+q=4+bX$caeKPE@@soJ9\(/E;3NR0UbJ;!>m6V3\arFYJOPb*#7Bh&3T;Z.e0m4N+I#nuK-ZqM=d[E_k%[Z[\B^,#Qq<]5+2s#A3Wj<$pPC7.EeqmfsZfH+LtRYcJ<q*_U*K,UGYNh<ECg`Ts$b\au0.2SD'?Q2^u)b1\!8&TB;I%,UrU53un%eS$XJKt^78rF7O&e7^i_rR&Y"gh&BM)1`L/=\kohPbX)#+1(FW$9BJ-g&Q\\*LjDREJp[mPi(ZiaEX`;'$W>8btqLWUG^IL1'Ip*%e:<EWOl6G+VSR@UOZE:>A?UKAf"D.Jja<%-=9`W>'Kf+plRdR[C:F$ZN+$Uf3-!2D:q3(&.l@En\,(:d;2Dee0E>s_4KUhfcsX*u%/PI(a%$lnlN&Po:(=g`j$()ZQ!$%L(a:^j*XU"I.T\!lc2lMuZ(EUh3N5O8(gd[eEljt.I5]Rc)T7+0Z=7'Y8o,l\27\H4s[s4MN%Ud]&0"Z(r]JmPJ`gbA"4aDj1N;fVeSotO[+K`_Jb5CrlI!_iAF^:gmD<dq@p6c`!bQ7''[>OEJLS+m@@WH[K!?qttMVE.mr\JD\U%//:$[a[p,I,,T_LijRJ\ApSVQhVVE$g8ru*WgT`S4_@cZO82&7UhVeU><Cp5@AXKF-u@ORYSp9fZ[i/'JPC,'DHi[_4MV!t"_,Um%RVN>/$<rDYr=Ih\@!j@T3%,H/!"(W3#;#Lg_>On**]gEb.O"7R7u@:&S.:kIdK\US5XI`6/N\_/4)=J@O(UjGdV`7a%G7uZA1d5!%KT9bU4_tHr)G9KkBi'0A:qrM#Q-Z6D-]?2('0W!o?o[(F#/HMb(dLeNra;G)a<E1BjV3<L=_g$eM!HsS$2,n2X=Z7EB5O?ECt9A*%X-fB:XLI9I(NUh<72"/[EeBYI('EfX>q8>gL=?f-3&PbCMP4(o%kDH%8lD#aXga6"g?l,PdmUE;:p6`MLuf^bhd3GW7n/(7[X4!G%IuJWEe8V\le2G;\K]Y%2biuQj/&cBU,7.dS35Q6lc,)OI!M@Q-5cqS9>A?!XYqc\I&F;9!(4/[WF8&%R,_?h`@.&*\^e]&/F.Hp]%(Y@Xoo\u+Wh5uUspJgOlIXI>"Pi'U>RJ<'XAoH\$0&KUc`"flIp)IsOE"m#u6?KWr$D)Z/\pPl$55;,n@9P,LW93Y==3ScD)EsV%%H93A;Ds',?\Rb1\*]PdY>]E[K?F1crc%bObG[(0-&?Anr)0R_^%X71!r4Z72a5>Xj[u6#>5+9U#WB_W?Lq-.WCOQ9<bO@=\X=Hth%DnnKM1LMg6bK#htoJlrUhVKK[i$Nj[f2?dGaU=O_Z99:5#!XNL\j-otX($rX-5h;lcQ4n$\*>1-^lW'j/QqPK-&t(1%`,#sQC$e1%AnlISXCiRue\u%j^;<#tP3'`!n#i*2A4L$AM7IG:V/Y>sN7WsQm2B:B"Si@MiG^:c[8n8k]".urKGl*J^%KKk"3bSHXKM$Vf>Y4S%*.'(jns.]VpHl#<T^UrrhbIV=%QE%8A1a8J3W0!iC/aWf?<K;P1\Yq[I'#PF/b'`P2dR_tK>*p^[a:ZYP82!060"/@c)j-B`oZ5]%Pag,CZqW\RO6C[N2(0:F%_M:d0#Ce-L"Q1b)gH]Em6RM\/m0J&(Rfst<QFWn`/Xd0m#/keam.\L=_H+VZ+GEg.-M-:7b3SA4/tT_%.!XBJ3:C\m,@+"D5CX.%r1Io1<s;pmF?LY>5liSJ/':$BEA-rE>RMD"^V-\1VeGdu'Ej%X(L*j1R]5Q^)Ok%RX]9ut9ZFs[\6"ag%?>%XM-pICF)9kHKKbm3sd!Bg(e6=ofg2"qQq,Z@*LXR0+gUpC$^G#?RU,=?%9i]J<K;)6<>s5a3k>&DiNV6]"l:_(FF/;CWeZ&G8%\A-Q6ZkhAGIF225r7K2AjKEZ+l6<agZ@)cZ%;^Ui\f/X9nu`?SBOZf&Fgu##[M$P#5A2_:;[jY[D11=%5qC:=<Q.QPo470d'%7im%W;a,D\.dc?f5YM,fq9,^DPB4+rjuMekR@=K-Z@K#8fADF75es<r7i9uTsa$U\,G*]m\#omp%+p7TI#-1pYKdcH`aF1c0`PjSCAPN%^-sVq#OU#sg/Jt)i0\!+-@*@:niDEcr:dB*D["BO+*,8Lm[ugWknhn]3bs/(OtTm\IdKESY<K\3j\.p\d$Jn9=rJ+AMfRHQ46Yqo%%9b(Tf0:/?6*Kj.m]!E?BakFCV=G@]l`;sHG<K2o/Ni7TBO+OL9odsj4@S5%_(DCl3^35ODJ";NBU3_LeSBR@gmmkdI]!7IPK#sr%>fP-`[.hdG<t6/-<ZgMFE6th(:kouDLfVIeHlT>A@IpNO<qs<uiB_P!8k9+l=.ss%`Ikn+e)q)-qE)OBHM/<g8jF@pZbd1e::*,j%@*n1.4X`82q>!>*f+I+:l^ad)P<jgV\PB1O%I.nb[2qQ7@`,*%*1#@]n7Ba`e6QE?^nC<8GNK7MGphff1>6Z)8T1f]H9OhHo(Mt*%^m-&^cb[$7>ONFe=LF3thLZcHL0X0+8K#7mi\:&a4J&LC;"4E!g)SX-QblUsoleV,Y$UBJXg`9Dlg&\V3dXP6s170/jf]^Tf/dj%%Vp36WnOi[qPC.'JK<Yl?R)]#Js"])4n`mc(^:2RJqlo5;jQ.U4S>:6t"(EkQ7,1Emc@`TG:M9/r3R`8Cn_KNe%sb:d&7VbNi8K?Y%'Qnk1&+rTc]4^N?(PV-Uf$F-!hd5/eI]`I3+GQ9'qsN'p=V8$dgY'msr66RrhtCC1nXDgHp0/i]?33n.^U8RIs1&s@TuPhQQd-Y+%&lh)NZ/*UgqWNgerq/AKo'-*f*,3-05?s9<IBLb`em"0Xp90n^[EjUO(>4.4(E6H-`>O%rCf>_2[W9'+bF3?.DeWRoST2>7DrhN4%n$E!YrZNtWhOcCuRAHkP/J41-9@ZhP&GH6pC:bakAdMbnN7TUcJ`\EC$C,NN>bV$rTNCj-G<h;aDr@NOe3H[0E3g'cU$d++1XEDo%iZ$,(2NPkA7OBaNF"^?[],RR4!7q"<Oj<o`@q(TAqLO<D;uu7oU#_]u&adiO_n<9rZB1]5B?(Eks5u2>ljQ[-^*RBN#)1Jb)E-l1%7`/sNH;o;%lOHNfMt&<g6%N-#B28?pF'lZ4B^aJZd$cJ^5A71=ou'-61anO,dBLahnP=Q(/.>^O.KTGk+#J:j+p[RZr^Jg0f]+uX%"q@/!4.!6oT2>V+@bXe-ctKV\5Nku;K2`<FE6A7jF9e@&JMmgVLS<Rt"+rmTA6O!@/(]Y('&>jI4OVUZDb)aa_l[$V_kYpc.Kj8k%1d(WQDoCaLCoQ7@0rq$sSX)cI=dOg`\P<+Y/`RUcc'"KQfD&lMA*aNtK#P^o&n=0$<.a[J!s(lAX@VlhWuD'!M\,n98'9%7]R;1H%\l$P7B5J/eO5?cI5E!?P&R!9%QG2m[g1gbF0+smnfa[s$MZX*hbZkW:R*S^!$5C7TYRuN"OP&FC=iDui"$!&$Dl[\rf5R0C65+gY%U?r"UR66P@h<5A;#)/efcg48/5rj0JAEkoMMC(_FiD(>>og"/N-6Q"h6VM8n/$2B7;^*R/kn*]DiMgPK`#rt!8]_t9kg,5n-eDI-%NbZ"Ef*<IR<f$_`\n0\<7/P$cmdDdPp+LO(isXFn_"s9N5@3;_^_g2)pTJa%8)q]d0f*2TFEVSSljbQ0NdsR4H[iW80MB85fier!%/Z?LB[r*;Y)K7&L\FU\PGK::r(,uCY?aP=eR#dd1oKmUVl`!"5QLY'peSDB1Cf/^:NRnM;H!/\9/f8F*es[Xd.+<]PjnWYnUroh8%+Pn/kJ"G^jf.GWTTEa6%@G<hBl.92ZF)ouNfjC1mMW)N;+.Io:K5!kp+s]86G>tUU:GE1=hu"P&.W%)t$S@XaKTu^XF-t*k3MPFc%+rMm"S7L@dO&B#FDpqkVq*tJo`j&eLo:GY=lCHAT,1;-TQlIsHX;#rcg=]M.!n@T8fWua7:t+7YW:aYcmYn)^:mKGBc<c5T+oI,Q%.r)5H(.74TG<6g_fnR@.4;UCTC^iuX**lCPSIqKP@!6m'ko[T[In9Ud`Q-K=p*)jmT8"&W\KujIGP7S4WjW'.]#,EV>-"a&#/O4!%I2:QBPI\mcgY[!Fa]6m3P/G<=IO@'98l&Zu%jjM_)$:8LO"d,&lH%nbPicIAU]]Y**pZNL0@?l=D.Nq]762hqG`DGnilU5LR7Lt=%s#BPI@K]B]VmEXP:pD]-LYG..ApT6s]EFidlHBh&D(SX3ea3Sr-)]Q4@S2YmF-5roQJ5j3@^d.S.^!nb.[;$N@qdh4PLjFoS3nXM%C@e]k]!6MI:^G_-Z9hj!M=3`q+*IEk;f(/aPbVEu/>2Mok>oDg0(iA$Ncha*J;qFG^i+FDB%;j5Z^.q_MCE5cMhQ"'<Uj$%JXF)5%'f.IMAKkmBE[R6AOhF(;KK(l#r0g,TZ.k>ne&ejf;`&JE@S#A(a@Uh*2f8H7CO60I(c<4._6)tE0O!g1LHpA.G%<]]LQ+mmc2cq\%&iBW'*/FWGom,ohqmu+:V6;O'JD=QsWUa4=/"#!G[O$4UejmKV5,gmm<NW`0E<\^%dSYDaFRlU>q+_t'XPtVu=;_+^(5_@W4[9ec%^l%L[XJNSM\*SF!^o?pb_eh^*2Rb<0,8.In+Yg8K!'0knGW*S4]DSa@:=@Kc@&=WB0ZfoejEJ!.o#4a:Ra7:FK@c9pTWC2?G;*sZ%c:N3PNOMi:fIdOmhcR;6@3!b'dP3,KT;X?Wk^]MURFq@8X?b*<"/'.3YE<8!m''+^Crc#84i5QV;CP3seY9DTn/YP_Buo4npOO@;%(H`dfT9LWn=D5?`.ZZkbWJfFj#h.B1TU2PP%,:m0e(65:nAFG4%b>;?f5WTI(BcHq)q19\LY`LL@+drGSO+CP%5;D66G]NE*d'NL%/;-d8hDqBrAX,0M2nq#EN8FW9lJ>^;4(G9(0c;\(^&8Vkp`A!iZeR'GeQrD@,HRQ)BPiJ#U*FoucH(EZEXBN;^TkY>%<3-MRb<hd%Yh5"7OgI1hj:b&^lqN&0QY0$^4m'k0qWW(pcTTZ6Y3o!J+gcBJWr.LWgH"tda<aUVoM?S5fG-MdA6p;t1:1G6!M()gI<9jaH9t$o%c6=[ui[<f#Z;XFG]__dL*3HOl8(4](!89C47pCDB^"#"eG\(Oa:*5<!3NRIe?t]-2P#;Ub#e*>$dXF]QUY2F@cAil=A\15+m*F'?%L[i'PIepXYZTQ@43s:U35SaoOGne\Wlk"aL'Vql9X`,:qb:'*$a\Tk`']?<J.]CNki.H$n<VP?POga>6#MZ6$A0p!?<Ak4Gdu`jS%RB3"K'm-looRi*-hn?\F-u%\Q#UhCf+D?bPR.d:(aP!#A_gRUX#W*KK8PnAk2sj,-Ef<G-[5S,/B%-%CB<-cs+6%,Rb1#igDu!^)%dcV_:/DOCgK0#=?!@F@kJt/oh)M66cWK2dHTqGP=cM"]WPe[d6-i9NF%m-5ee>Ls:hX\A,Mu5-]ob;c"Q1),,O\'s>rE)8nNR'r,%@0T4<o\QL>F;D`Tn;uod7+(6>>:PJ93)[5dHPW?^;B@qHKjj2J+3a%nUGjh0-jASZ_#">$"VZa@Wh^#A%!6*<+>$-qTW=HJ<PadK%.Np^ZB2mF%jK:p42tEOA;F%*p?-ALY31Y@fqF$d-kIqgZW=Ge]L6C+D5*iSBagq`+E+P]<)+C]BlME_e/A3)QXUnR=qgERZBNs-B%O64iA\oL?1ZN]e,ltj@fB0Z]2<p[qSScRqJU>T6s)_Bm7NegPi&-ft[!_+<(/B,pQ9hOLO[6n3g7-8>OP/)U#_DT>3>VU;@P&Q+=%^M[Il>g!jWLASP"F:S%REp1GuBP,W51PYVFTejue""3Y*Ep/H<k]F*6D<K7L%5[4dCr&8Uk]@$j1[$*`Dnd8Qis[st>B%=s3o*)!%#+]Y?TZnH;is[sgTt5^`ST-`Y.=?pk3YgVR1?`s5gtk&5Eba=RTL2[mP!c,U8CgR`>O"i8H84pcR6^QiqbtqIoX6oQ=l=IHkd-@(%-(1-RW1.'Eq/)1XLepa1?3$n3SQKo\+(*c<&ntqm:?jAL7BS'-?k6@5"q+UbPL@KacroQdl\#%lETWeaogR*g`A5e?c5_a@d`d(q%0nU?;8LJ(EQ-!TH41<.EH6H%[p1[#,RjCna%0b/0pg,KEc,Me;$QiN/;DVIE\`iIcP3f')K\XBtLb6;e>Dt)PDB#"0A=Dk^0CtYn%*(4ZN!+Xs=Q)gdZC'a/uR@g=7)`R4Z)1i$6elkmaV5e:pj?)nm_,4:cVPL3`,+jRdg06F01:<6R$M4%oVD+J)p/PC*2O;B?9kT38%_r.tkA6dSX+L:C>qG-<'p?Q=AM3=#WaPND7=s#5TDogE;A)JrZfo9de&]T4BQ"76WR++0@Xtq@[;-IO^#F!SsJJYf@df-(R;8Cm?%n2Bk4k/J2n*8AQp1X1b25mCJ6H;1sUi;f7An9en]VV(-L/#n%?Lcq5@/[ce!mg?>583'2p!Fe[=Dh?^NFBY<9RF%6^AkeTiW1,+f%$Dah;[ku9p;g"eaJVrE"ANnsJpl>`(YB)'lPo,:5ZF=E!2,O!'75;C+47\cogg\u+\$*!C8GgVDf'C+^.ojmo%W-P^oQ;5R'K7i%%8&-g7kD/!BG;6,E?5FHaHPOc?@3iD5c*'5i2R8;mj[f5Z22isFaG*huX8m9>9R^-hm?fK4<@(2$V?q98Y+qU$V(6$-Q,g\)e4HbX%S=;S1fZW"3fc*\*8mYL#dEZ^Z1@M/<5T'[-Nrip]EQ1q?oG<n?B$2B.0I=`q.;"fQB>Yp'&=m\^.F)<nlFT,ueG2^Js(+r'9,!lA%MFAj^237Hl;EM@&OceJTU8KoncM+cgLp[GcVK`'A/No"#MXI^?L:3jG7[YiqqUmAa=@bg6ZH-]kUmgE.fs\t<g\E"#/>VH28^7@@%M-Ii-CJb`?buPm#qV#L%2f;&d?8`=VPF1Z4LP]PTiY2,17\+*h2fdL.[VC-l9?[0U%$Hh"QXs+]jtNho6YXlS65MJa"jQW'G)0^/%8#S=_`TudVOQqeRb7liF&4+E\qNk/1W)o38NC*<RaN%UeW#g3G1QKP>*HYsH\q*G.b(hdZo,f;$cK>(846FFt76r0TGNaFa>pE>9%jhp?'oc5e0mP*=GB)-E2)aSW,"8BrnP=7j\1?&e7&#ZeP#T7W;cA+3i-/_VqE":-O35&/3SataJF>4fF%^`)!je.h.`N$qY[N#s;%/fD)A>?Zl?gkq9INV5I2Vq49_A2+_F69i>p(41:N@6Z7'g%K5Y'f4LgmZ(<CCio=3XVc;(Nn,pALhW_"TWA0B1=U:)_%\e+1/njZ%[^??X`'H/QY1A2)@;dp&4PuW)c8Hcn-,[lHDqB)/8K%j'4ocJoQ3Xr0)"hB2L8NZTl=XHZjEhJpE;-t^E'HhFiEE^)l%W?YcBMDS%R,*M*AX/SY?Ju6D.N9.NAo`E):oJA'lGFc#;P/FKR#q_:4'Y8?o?RFm;Q6GD+Ylq#7i*<Vr6@,D(%egsho,>"Q>RElSW1A[A0W>L%qDHW(-EXD[5"$LtQ_rIG14nj9"F"3AL2!:%7Td!4a]%0*pt4P(i>gU`p+N5YC$a"rUr)M6\$VJ/B3DFn.htgjK8<<Xdp^JtV8B46%$5PBkG=[G:Y`Dop]7]:EjW!/1SB/U51-i_ENUTPcXEUlVeR67^_L/G3pRhZl1@.\[&c!J'b]'DkA9\@BJs_O(M@c(Y3!Q&a0[!8H%7`UR!+h:a4?A(b+OBG(2NX+DBFH*?@Bqhr."FB)+krhmmXPVjsM06('iEikhls9FV.M[g3#D]p=bb!^XF2?VCm,BT6#G5aJd*c-u%G+YgFg3\!B`lAZHpWDjEpDV.kQT9=DQC%Y!<6%2:n$V9>.n'ft=h=7Tdn=lMl=S\bb']H%qkcu/,6J`CK>rs\=m[$=A2f\\]-X5[%<^,4(pp$SU-nMCsTpL]!=(^*aP24hH=uN<7"UpZb('dhe]>4Q:;nWUOW8A`8m\i1&kRL3cS!g_1T^cN9oWnClT4->18p3:QlOR12%5(6H?.^-nU^7&:8oEMu`a<eK8hWk\UWH>/_>%u%$$,3W/pr)@TD$!kW;ELaDC:/\0;7%V+!pP;j*eW^r\fr/c@*QB`=qDDh34sZ5%H(^I^@dZrXDH1-9JO7SAm?WorW,+?,aY^CQX1D;@T;#[bFjr818q0_bPB]t5E?6N+je.n"[&0Y5;e>u$En7@3>F1rKS.3"oa1RDA%54]t=H;i7r_X1Yt:4I]HFl0:?lC(Gh[+9b=TUXLMiMRsVV7(aL3:$4B0Y8uF/)8ZE!BL<UmuH(C44mtbaJRFo_AtJ&cI2YFHY:fA%f`[T4EenNmX^&Hn1*>npZ*beCpWKG_b,*RsIr*GI3j#Qd7mUA(VVC?'[[g-jjeoq-jWUtpZu#c*^43(t3iuXJ/$V82ZK\`4m7;Re%BJuE)hWplAl#aV5#L0-pb,*S"D18[)3iuXJ4\9A^CcX0,<5[.rB/Z=3ri)Zdp<TU7FCeWSGh6amm@9;+B@C";fRDLqMQZ_.WP_!F%4Nlm6flUD8'YVZ.]4]T,FTDALLWu^Nmbj+G\.>-)Vr]Lm91ju]VDHV+&!Te$kSZB_2P%tcEhI50/RSk7Z4<3qB:R(dW,+LH.8mc!%hu3sjc<'-R"]23Pp0f.S=A09IBu+(XS&8FhP@\VT>&uNsMnSE+BiV2i[);60Y>.m)YQcK(b-kMnP+X(YKPXa%/?GO1H*+)6X-N?o%0Iau*/@,E,l>lUg8S^pH7aWcZhC>%;""A=OMufGNX442kjAK_\)SYCf\ai;<#dZFqbi)LEUsRrSAa[K`Y,mK@4-mG+W@hi&5A[+=%STZ?H[7!(AGCo/#-d)nRmCj^Wbaj$E)8e9WMe2<M/;iUPQM](8.%1m^gUkZMi\3:NJ9=c&K#bH<[X-9MZ?`Z:Md6,4;Y$l6L_<fn%g:)8Yca%76(.5l5D(cDnUpEs;`t1J)P4G\mJ[^q9B.`i/iASe3e.:QCSmN>D>9d-<J8Q8Q_8n=`@YLrXCce8f4Yo:c[dJmuoCp%B%[E,KS'kG]g[tflr\ijR\e?.9Mc3VH5]PS7Q?@JU*+\d6cILN@]kBGfm5C;I4$<e)-B3u!6]kHqRND*dPa=bu1`PbsM-47Z/>3-L<%Qu^3<XRR`VrDl29=_V_[_UFP/#+a/-,/[u)QS']$fRO_cNU+7r`D?YNc**/##1#,a2!Jf8\hV\TqkC]GV7_F\0YCa4Y_(j4_Dm[o%,42SJ/_?sZc?q_`lmkhq[VmVOa]jc$fccu/]8kFm'udef8mNglAg&31JQPHRYjUJ(Z<(EaOhpp)P*oe0!e5_-G=]%oW,[$K$?nS^%XgVNo:-\@?!%#4p$?uAKb-ODu<\!2O,VR9D`grZ#l!Ng0cV(R*+0oC148jK/Tkta7H%e>\\!k2WQ%L?*ahotm[9)[N[=b6gKj7_D%Y0SZ(G&T:f2]5^o6A<Y("!lG]s6*dTA)j.2gs8aH/CbaQTUu<3f"t`-JPNefR!CpmpVLbn0ju'N9k/LRTAQf:`$BXthu$ml1@-(%%Y(c?.f$B:SV(nC8jRbGa>t[<!XJIYn(MQ6Ra8;U3\9AGsN.n7:CGh*n!lVHfpRUqKR-867M+Q.t&(:sUobk*\,UP2kFf^2>3't#\%=Ghd@"N+,j0Yb$;P((t<&e(tHAMGGG/(/k2hUJ3JB>'m!<f39C7@(-S!aWdHe[)KCj'%>Y/`g#;a`1>$Dch'5kg^I(^YC%bOs_5p%Am*IB*3Ejua."REg$![B"<s#-p;:(o$#+!fM;rW@)lMoUjV#8tA$pODE0hXs>eX$qhjp*kO\r)W,apEGo6)Q&4RT1hHG"Al<JR]_%S3CZM_e!(K%_"`t]BaQCN_51V\DZW88hUK(p).g^>RNPf<[MYIkPhTDWaeA>:pPCK][drWIdD#(ZGb8'Ir>ODf"rlhT^"RSl/5/R%Peibm1&shVT<2%_gqP)+DJC*!H)("qnA$H?e![f0S?u>!l?_G^T8YQ*B!QMG,`aBqrt]g&\q><4m,qJh:f_d:LO5<!]^G'fQ)n4S%eT;!ieeQ.3eUq1$KAmR?(m-.0!VD5ho^p`&CUZA_DC=OI5.<*9)"k@X48tU``AN<DJT.ZZkuR1!6T]9ola/GTRgdGWQ]nG:GnsH@%a,J=+Vm7cd`e&n45:,R7es(:Tqd<=16=KL"Rt.;]R*$sUA`L9YLCHmSgT)3DAmt")Q!'^$p-Peg'#<!U:[X>PBG.!fr,GiSVhGn,%mL\,O[M>]O1*mCZ<76\9T\G@P8hBXQ3eCLYqK?=p;e"AT<AX2j523?I8p1qPCcS\GTqtAIh6CS7CW2V:;CCp5]Jn-9(JiAe<C,oR%Kc:LRpoRmR#Oq;7V*49c++(-VIgn6iF'Y-?om<h8Yq4(-7k9A)"rcV(>0Rj>eQQ?nqGCEslsm&gOWhD7B?^pH>/k?db$g%sjtJhO%1'Usn%G67e\7uj:Q\Ra4e+.X=R9f#`G,8u[;a=#j<P^U]-isZhk-lsVas1)YppapT38."N9<M:/Uj^Ck]kZDFYZm-Q=^8VV)QT6g%,6,WOATdH%YTSqKVmI2:ZpuU=P2GT'E_;LXIO_!^+W_$g-feETZhNFl3to5(kPT"`qpmhRXNjJ_Xu5Fe[.pgFLmcigZ+`bO>0pRe%;]#8_$XuuhcF2/TFehAm00<eI>0R)TFq9FI(D^"H?1$0?(801t5fX?L[WM*/$uu?e)\.)7!jnBuk]$!S"_]aucs^LLFgD(MjoFt7%.f3dWRcXT2p<!HDRKJ@gjB](lXl]UUr^o;FX];?rVqm7$=focR?Vs"l>1Tkmj\o:sI]4`f@7@VW($.73@tuMUkA]1TJ@B;k5*ZlN%Q\t@ueOMf>;*GB\/,(I7Vm%Yd8[Y;=3g7/?=@s#\Wp7(Vh,%Qd^O7oK%X'e\!UBN<9@HRNZ57AY?e<UnSC/I$r=jUm<Rl#C]:h(I%qAELkZo%;YlM>4k,9#DJ[8U?q1JBu+>sE1YOMDR71qnHF5GLn)b&(TdZ<Z#-31e7N[UIN?W9\*/1e%Ac4mMl8'0/Ga&A>Z(`XCLX%:u/CZT6cucD`-F[Y+K^Pg%J^u9'Fo"5LN7i_G]:jFo;`]=LIi2``aIYY+P5Z>/,X2\?;I/Wk08T]j"c,<Rd85Wo$#5p^WDWDR6L<%;(oWE@I!BN3E-t'Wp=;fpo_h3h7]t`EE,6&3l?Dhr=ieP<Rjn**g3)ZqAHmhAJqIoeb)l<Bp9fpOt([ZlXq2V/S:gH=k?HjhpS[m%-bnhZT=TKk!(;%b+/#d/hO``,IKujmBBgMG<f_1V><KiMI/E(i(f^17Q-E`6f?`)<X;Ple6X;q:Wd^DGc0nK\:G91/EgWpb9CWnP%PIQ*J5@]2L/;di=\pcDJCT,Xme`3tTUnL_JDstkkPZ@\UXiG'KQSuRk@Cr\7X\sO=%Wd03I`>Cd@)gP:lM@%h<qWeeQ+!HTUP33i%eFh:](Xf>X]<t51laLN`X2VZ!<pK2q+T:*"Wh6tNI(QCS$?!CSf5LCoG\'l>@2+"*b:[r9N2uehhf<>DY+K]YQi%QPVllY3TTd5R%\jp&@XaO&GoeX/qc:ZBG:tKVe];<3PI[9ZL^$>Gc3Jgr&m#KJG>BTlQ0LAe@ADatI`e#?RjUcS5/=acdW9Yg<jL3)u.?Ek&f?ZDt%(nY:7fCcHQZ+]K"8U7"5%NN1K>.\qUN"60l/5CP7rJV6l.$(d1OfdZ;'fD@64r:XP5#h8K0dir=!Z?1CB;O\.e08Pc^jBYHU=uDs%ED5r[GSF]WS&nB2LbXek5u=##O91]3)nVB(.*d6^q4@L'=.&J`7$q$?6tk(RE?)YA\,mc-2%b#04j:f4X:U9p=.]q2Yo.fPCbcaH%4e4\V\Jf7uX&-JQNd@o!oZ?L<ES::R^MS8LcXf(bg\U.rgkkK>lQcH.G59g%Dc<XYkPEO'/[]E/hgSm-VO\WFZ+9>Tr4[Wp'_HnJ%@UE3CG4>-P)19Z33VTZ%bAka_lY+*e#WI&"H0TlqNUDFui.^Xdk@E-fa6ks\8rh)kgTJ=bmD;:.YGT.b;)D'LakRb:]mH]@[H#4P%=hD9CjL@c6b\]Pi]IRpaEX3KLi\N14IO`0Mo(!*)M$p/nOd5f3T3H`6+-XVX)q;=go)"%09@$Z)nmf)SWb)XlO]2Apf+IWjIr;WE%25R%VT:M/f/jGC!*-48J2M8SVjYh%>PCU^0D4`(LVaYh,[W_(e]5;)R.F1FF-mj_$D0i@<'.qNH5`9#mF]<42?/4LpJE`O^8:nP7%Pk7q<PL#_FWj&TlEIt[/(8[j!ViMf-\V)p/=jU$$]CJer\^(rT5WP3h%Z+YKY33X-Mt?jnkO,WPO2"s);mC/ARQ@tsQX7sulY*,:%YnsKLS;+H@_!hjuk[3i`b9?VWlDli^<96!..8:!L"mP-+SQA;<5:McZIY[0:I2jGf_+to>nL$"7+q/r1%a=;!S&of5,03n3nFg?F%;MI^d(A4H+!+Pa-pmM\eYCN!YIc)WZHl,(m=g9.BM)i[ghPu#(;j2TYc%"eM>:pE0].'@cLn)5:0*:\\-215`&OJ,jDZ3Xk)N1dC%o&"h*ho-D-lp^]FnL;,\oV7[L[FW_jHkqqbKAE`E7RlC<YcOJN1/5Vu"Fh]8/kMG71o'@+((J%,\F8CW>O;5JLmng>'YL:&3\3@"%:&qTp@""F.#];JVQXE&0,e>n*)V)%<=2*G:itI-r'U%Z[K>bar2ZqpnL!X&X+&@f&\Vg`gOT(Fh8Pa9\Pu,X'RQi+e:ZNo1==.XY%8Aj66??sg,H6b0TeEB[GgLIoe;V!']*3V-6c7'PolU3B6M3kIX;j77OeqL=E6EKoL(M8TVWmH-<Ga$L4p2@t._U9MmdY?02H59,)%%iDqCnmd<hBO;fd`V<6X%aBLW4MC<J?$+%Mk\m#>n2uorb%?uX);0pIBh\5VkT+Q4lsnEOplmeb'<>[Sd=-?sBO>J:]rGg"O+HIM%X@`K4lpo5!]^$P7C/E,IMV\:4+q@'"QMA8Ik7rA?"=s6&3X"P#+3,@rI#+Vl3gei@,(M+kE-*$fI7'RfLZ]t6hYGm5:m-&+kP78r%OcsW0172XeGLB9U-5"$(Sp:GNs1fFMaSSOolLi?B3jltnhI]TSndCga"3g;:KXd$QB[`LlicsBaK-4[AAe&m5Zc%:*o_)Q-",V##%jI=ZII^hBSW8KC\9bO3)V#?<,$24,R8gS^qM&f\tJaem,Veq@Gf,OPRX.BK91jo^=PDAkmp\SnBi_tX$1#'=rU)3IpR.18rncZn;%cpO$H&t?P2$n@HQr38&T&FcF+dtJB`D`g":57'ggQdI4?VfLB5-FI`JnOu]t#X]1tW'G?-`X&<G\I]S!Fd>/Y<Io>F)dhNqBkjiW%5ea^_pBP/Jeu:BXr`=gmh(V:/'$+AJ5q78=g*i+RQ"G#Hc9<F!m7n]D1',Dd2L45_E#SS-jI\CZS%`I%I\U7GpDM<9Q:<\Kmle?6%1PJH(!or*8N$iRBVYfE''df22iOOKS$^Ic.\LtnVPMsIqDZQ^D:@(ml5]$"aD*jKGlKjr4T6/P@kOR`g!r?_G543s*1_Bu6&Bs?u%LMf46*.cHn*03-\Te"obK-@<'>ld(R<J7M_Pf"ZG0)G&p+R!kFU]AB1pofXScE'7./"+G!+:ruLD;hKLVQ)cI$GP6d?"N6j3)G7>%RK?/2;[:D56.omn?sbH>=$"7/a0$$qE&@Y^AssM9G<-Hm&bi%(bX&_bfYeg,/b<pO9L@u+`gkC';ko'h+*l^n]Y0No=p+J;#N[;Z%($;b-jPX/ShGG*n<"^ja[ZdnSDLY%H[^-KpEET2S5@b.<V^DKFblE(CEC4S[Vo+KP'MNUpCMQ:SD5WJ(VqB?p`kue_]IE8-W%uD<%R-#]^?FPO+"'\t4*4GK>e3G-erB1e33.AEVj]T=56hYj?5pHJXZ#G5u_bpj5K-Kh^[E&[TG^G9'1`isq?$jf#Q;K>\+O1F#%6rd^%`?nhdQu&'h752M[P\a6g$u,jRKe%bD@!Vj5b2Je,UV3/4o>RYjKdg5>!pR\.dInkOn>;s%#A!Mt):f8D-UXI.kiJpuGTR^mEod%?%.h-%PV/W2`.4.tNW`-2Toi5<ZGZFIX$\#RB>2sHgWlW5mHt\/pK6*uqV!JU!#U#QN1"ij_iZT36BGP2B0!Ym&7A;1u,?Qs5mZ(bb%V7mb]lFT(IS[p8ei>JT2!QGg](opPA->`^D@1!OU!^o`aS7eBD(&DoM/>"S53*r.<?`g`VP?Ss6iZ*WTObLrLN:"7Q#h)C`OQk6U%M(Pa5D*lR/8qeMZZ^WggI':&5$[:NqG7^3B'K<BDMe_K%LHSM]*a,ChW?*9m+F83QFI&t9X!X0="QWe=B1o;#C=OnY5dEm76Cu;Q%Sp%a5K%S&\VpJR^;f"6XL*_@"!8C8@-udn,6dYgdSI=X!:d4:lpt<ijO)CQl>bYDq09Y6lIkB>8Y[IU80114oMt`:G5Z@69FD2gR%8KP\a4lliZ??&9'%X0&q&/Y]Ie7G<klsc!7`P1+@<<&^No`]O:j^Mn12D3+#m>A'<4G)hO&$Pt**=I)HSPD85Ea*E72!6#_oJ]3s%EW%2(o[Q7I@VB8+L:m4HSBY#=G8u7.]XgNSJ/7pYs&fhbc-qp`"P$M*5m[gJ-]T&O+@oEd&<n6VY6"tR@AQa>Vkb76+`JV++daeY%/EE<,'s,@)F>Tq8UE\J)FK;qi&?o(=%E]s!^3Mi62j?`n+<3/dm^a0%"Ts<+p7<NPpkC.TcT6=/pW9)lcFD`<&BWlhm)!\7$c<Hn%N3L457i-2V0Ves7ZdA%_[-oce$EDm\MhonpTFLt8Cj/23]*qSk;CF`^*`>l/Yu7F3LAX,2\(Eu3WriJZb?aJ\@6u-.0!+J1.',K8%7/L#N&[APZ9`Ec/j#\+=Y*>(BDkVTA.RY2!^sg#+(R,)")BF)H>2kk<@u7j!8$ur#d?4c+mGOP4D641K@64c]piDM:1&a_N!#S%P%J$%]I&_V5H#lWSEj-X6kj?DX^E/`G#Bdi.0)pa)U0dBSiGGTPhK<X]1hQ[G=gM)$Ze&4Ea%m(nX5*;!!NuWN;kT8l\+rGi3.^1%%%3Gl[:DO9o27;_]"MXdhcDcuSr!KeA6o!1D#G3)_q$co^t&0,u)9>68@^d9fkb_65.LfTu=9a]Sbc2eJ5s0R7AMbJtaQ7"@m+Gd[c%&liE(Y)b2jT7TrTJLkVFm"p6>]rMG8"]J)Ma`o2&/epF=e%+Cc^0Mpj`MUPX#@02.9LY-t5VI'3^p??p_\\9TS]OK8<m]Z,0g=Ga%nAiCfJg`;$&*X64-p9^[BCVb7]qlLeFpJ=r/:#bZ.lM<2c\],X)#Rd(dPZ9IYb3Psj6BsH84d$EmtaeerclHff"c0id+K=7G'8l'%XVgjtM#oWE?^,7=GEE@:V;E;khcuEnP.ZA2p.<Ysbek_U<;kkEH=/XVWh'L*0IV"V"jI`.G7Ep1/j;%5C"H*eB)Qe(R_0XFA'rjY%@UX_@&;D6=HpBF$WDT@#.7HpV?^K7jS;e2Gg1peF>]eB1Ti1nAKG6YS&?)7'PQt6HmPb3g&tFVuV?Sa][2Q9A"?!c)Sl9dI=E46\%l&.YjQY2hg;--#:X^&;kamc\H,6BWBJ!R,jSj9s6q]r\`L;OJ6+IC^gc$loR_4)J<X.T_sD$U0"]eYXm4F5+:eMLS\oR2F)i7d9!%(1.e2AQHl+JW60lT>*bBlS"!ipea83(a.laLh?HbL$fU%V]6E6WY<LIMXHQ\],qnZ-rkN_^!t:L<5DTbYY>61+93O>+tt+2,/o!j%gaN"DrA"%iWgQJ$J^m9ZZK#qY5/6Mj-fq/IjbYm/BNeQ^*:Z#6=#(DfP!F75;3]lB.RY)m,$n\Xe.QfX.7+4V@((:#/"Qqc-/i1L%YM#*q`!,)D?j]e(>RkdWSp;gA/8l'J9.^Ah+%_dcXrrpVOGD]*/S_52SgS#O/`,8iTElalaJjK("#C`#IV<XO1*3;&OZaWb']s/Y%rnNC\UL&&4KOAo5N-&(,hnu!Vjtn-1PcOiTf$C^k;!gCS5VVIgDaHJtjf&^FLXuF<#7J,86d%!?aTm?qS-+60p4,KG<Q#C24BE]P%^RlF;/*[f\]0tq7>?j(KeQVFn9WCXCnpr-hFe)D.g(pH&\8AJX4[sF$bU?FN,A+#d7n/'t\?jI1G%;9s[k1WhO\nq)7NpoO>%8:/%1(%10]?^PZcs[X8N2\Y!HR=YDC:G6b&U$NKP2*m6jLUQk"+Zp#Ea-K/PWb[W<t@o.!9Wi'9-hZ;&\.lo\V^9:E]TT*33:SjS:jn$%CU0qWY#9kF'd=9P7WGM]1lJB<9dj"mF3>EPHgA)`'Y)8u>&s/q!]:fe)?eP/6oTibWPF6J%!;nj3fa0m5\`8Qd/EfBNq'cqSAI5s%k`dZ!+N&Kd%GS:o!FuAs</;H_Db28dG>/('<fqh]Iq=aQ![&i3-8:rbY`dW:9'/`4Nt*`C2.`%WaD5g1W?5(o'd2;ZbOW&,)"KS!%$MbNlLNa*p2bsL7Lh@f2C]F]3HF((/.aX7R_$!ZZ"t21H)?4jK'/H5X_,!rslq;KhRk+geo0,ho!h7"-m9+9?_V>9p"^nP/B`aA@%h?J3[>80g]5M2=`FXgOp(9U;+j^uDQ$^QpWF50oA=O%(gn&hL'o8<_g;RihuEp>+ET*9*UV9B8CJi!L:/HNe>0ac"<+_JCnq]b/L%P`TNRU>GP;1"Sc)ee0hH0tgQ(HO?%.?r66t1^]5K+B\-AMdI5N&FRG\b?ku8OB;NpI^NSR]\F,N<+*nIW_DBF%L%GPSgeuglYquB%$_/u+5bJ=kD[&Y04X488+m.`9C&b8`"+t1uEaD+[#RDg)`T/>Yc"lT..2E^RB#:SKC*Fc$<A)*+Es]CO]M2W`cd`]N4#2)L5un4]%G)C,KUl`s``Ss:YO@6Q>q#tc4^#3V0q]3ULC;lf)%]KWK"sAf[!nn"8-/mX7T=*kh]sV`GiMhKC0"@(,LF-t^`sKu:$K84%I\Ls,%+#fh8T8KOB0t(tlYdKh<iE(#f4@Z@F0pK]_Y#'Uq#QBZ'?(UI,lLOet0,5(Ca8g`#8's,ro^lM6/2E*!UmSM=kW]LGaNu5o7BjjO%D@tmS;,/&;9no6b)'ubQHBRYb6!&.68Mb=MJ261.#&lV`YoDe]+5U+n10)+'q%nu)15:Z<<u-c11n_+;(6!U`9%4'E]8MQg^rdZp%KuINp#\I@Y,1?V!.`dDd$5TZLl:a^POT/M[gE`Hj-SVBhPaYH/gpU>(Nf6::5DE<0G<kDuMB*Rg_]Gl2O\mND(T+9C7n2HVS$37G%VL0Nhd;FmE>C%m-$9=mV:'I^S$3W(DX+5=WJdPQ;O%Fo2l=bZ0#>GC&3J1Li5r+4m0G8%7i%57a3>[M%6S^9eX!L#U+t<Rl.1gJp%agc6`cM1E87EJLm#O3Y+d8>(9&qFnZRrHVb.LQP<DEbmip8Nr\'3k?[gL-4J+0su)"]FJfFX/q[gFe#rQb!=7l'>^rC.oeDUf/[.%QO<E'(E*@t*BEiLoPc,u]DD4NJJsW#b%hcYp]^[a-egHSo,tS1<2:tH1NG`^Lrp<]l"/$QU,[CAE.t51+TTQ3_\E7F\6NAB&;$8i%=,=^cU[&7a3C<N9A1<INB331Nlpj":6mFAL(IS[Flh`8`La6I!''s$p$s8`>XqWTEfMLW_cGu(#*rrVt_Q`Hh)WU?p-+,l\F9q$?%\?gRsJqE;bU!JoH'm=5-i'h$n36LYi:THD"m<[b!X67B/g`s]'5elV+O^uYmFH:s[=LNNV40]g^,Nt0"SZSLCVm*GNPLkt>XIe[A%.XuuKI>fuUh'6/'QX@",@(e>fbO,t``rnKD[M@hDXg2CiSkQDhiS_cYQ4_\lNr[mh6AGKClYc1jmLb+^2Ee$cN2!Ar-kuO$YIR0-%*QFZueNTaY5&n3+</Z\Z.PV8=0mfKkqi!kC1;g:L@a$<\(e&VMAe_#(O,Vl>s3'gB..^)tr82OU#SQKTg`mnD9'ID5@"T=aJmV)X%M4bN@HaLp7\OU88<39-EBXpXK0:FK74T\)M#q3RI*c]78BeB&bPG-iBHb2eDHPM"Y4ef1RrL/'9XsNL#2fXo>I,d`nGYs;qK2qg$%^8")&2+%rLGB&iIr,&i`*@9XF<4Y\dNY4tG.$9[uD)k5(>*Q1Q?P,#sn!3`\&Hh,rb$?=J,0%L--"<gg-FZ>B8Km%BW>m3l?PKZ+%F4q`9b31fW@PH!q[:.riJn![K@/o#fIRY8b8_?j?s4Ji;bCZt79,D2dM;SBd;:pu4A_4.<$c7Y9%E4;i_RAsYFsb(\Pf9UB[Y8S=%(1""6^4CIKUQf3NA.7hJT_L%7%)e@=r$@+VAO(,^)Df`?RPmhW$s<Jp*0HYT.>(E^WD-Z-AJT(bQ%;XQ.m.(/")VOEK,DquQnn;`%HO])A:alX5'P"m*B5IHOp#HPPm9pm[[=9*!5P[:8^$VG\ek`[!OuHg!qkp^l'A_?LU]$C(<3S%Yl_j%9_(ErGec)Q#+hqB\TAW6T%M])pp*`NIc&#242?P[K0B*^V&,:)<"EeZqG,f?(@5qO\0)*"?pi(EB.=C>CqYZ@PI]_a4PdSQ_YAJ@JJ.<L`=ML7gFSoXB+PbD]!%MdO-Q?%\DCZaRAt(^mg"fTn_1q#>D)p;e*PX<QH+asqidB>bnEh3<JRK[oh7<%:W%F-4NONkSbh^BNsYF`''e9:&lPO^3_Ki6p^&%8/dii7<!.joU2I40r>4Ge1tT+$44:t"pK]2+dO7ojEk[mKK;hnHr&XidcHrP]Z0.RdXJ/(0C8$5N'_rT<"`U(CPhbGS#7t=U^j5Z%=K;obfSib(7]o4IoAKn'Ok/EP/nX)B?b4l_\d3EXY&k929=ic9q,H2_<f_o,FN%7]WE9@XfM5,X(<[9VA%sL&@/nE4/J/)*%U'Sl%Y.X$N:7$$S1)7BE?(ehcTI'CtDR-2B!TV:,[K)Q`<@.N=?<frF!TiD6')M[Q"#-7l7lC[O=bQ12.cu:,]+,]'Y/NMBhJ8\QXB`@e%-Pi))@t42\JU&A4Hp@=5JU-_r;mR"\.eC*T`3IQLKG\qQlm$%Jic)Crp(9&g+3H)<D+P]WpFh;\,Nb[7GHm'\@a$s-^J`'8H4+ff%&YmOU5a?e./oM<uO>@EEh?G`m4/ZO/kh]0nI=r6k2rg>Rq[!-S<K\AGb4]BWL\id:$;*#Jmu6V=_`n'/A=$qog*a1A-eUj%g#Y.!%dkI"L_RdsD^Y>'%^N[NZ+s1r3)(/Hr%u:$`'G_GT&H2L<ZO`%C'/fB3ET;q7<pBVD='isD;mMHLj]oHUn5W!Pn0d/=`YgLP*]"=?%])_1"r"+0q+'pRK`<!#q*S"^C06[i8O6e#ZG5[`l,31$KY3LV+LHL4D#5a4kg6+T5SrlC=/t.>10S7@YqhQ*4*b=m7UnVYlq#@F<%[/XVgHS@_O@#?Ge"6T.sp>O/"C03Z!G:pejFGa8-#MCZ#P]c@7C5DhKSJ6%dj$e_!4k57Qq0uOi6-KGe$2L'j$P0LZp;+B]:j!@k%hlO-p@Ro)RfAItafuGOT5!@N'HruXsi*(S0FU;enV&`lb6-R7*(>-Zh1M%YV5k,B09?H`JQT\S$H!S#ePfF@4n=RQQ+IRs2q`(cJ%j'%`ZX0RM?]N78i60D\lg6d0Ljbk-QFV1F-hc3tW#h<9Y>tFYU>f-H]^S\U3pPk*tKA8h:+cVlpb(/F=i]jg$U5DnG-*9Vq)fjVP%GHHR))=n;ZlYIZ_BuTC[\Il!D3!Wh?f,)Bg,$u*dTHSLRP@lT1WsVhG01s>F&kjI4K69W?qger9ZbLI[7\LmLQ&>Q4@C!Ap_.TPC%MUnMI$]RU#J].UR56ktO_r8&?3PnQRMB,7!fNW+tW?!V"1/gNo%Mto2#D\?\V>KqH.c$_.&r>P`3QiNs.AgVs+\6BKXRD?l#9tqN%T`R#aH\\no[U-cXcV#5-8"PHLs%Vb[b`S_&"(:DAfilH\Edmb;Ie.b^i9ec]`]j7*<1+8I8Q,pFeEUSC>%q5sbi=opIV2GbN+j8f%*D@@I?AAV^g@7W&f2A<o5m`>@"0I7Ym%]glS*<o]m)rmsQlIJGYVJJ.4C;HlRDR_="oY_U2DpkW*+B%]+&NVZl,.0danf`6'uc]d%,OT`fPUC,cF3aB^I4jWd&9A>&XMh&Y>`Z,fi3aJGDDgPrBm`@($>.Uhp7op8`gk47]\;!/KNc4@?#SEs^CA:r96@-I29N%93.X\-%DI^um;CR*&$6Z1ni;=kHl'KpS!Xm++4Jfne"WE'=#EYO'U<m@OeI!FA\90I[0FT)Ce:pju^m_5JA=6;OR>Cs?<A:t1#$53!XpA$Y%9gSK>O#MSdbc7mXC0F@*r%4Va1_>Thru#I4J@Pe4?oF,]Pksf\)92:;fH=TW&t!`EU.,TtWKZ-bLF64!1F9h84H).o$QIc9P9$j]%^s`#W2tI0]YM8Osf!<oP4QuVL:Fr0ODBf4;IgZ@'T$`]CH*9;U(mh/gW>f3Wi@qcf6P0@.e&<9nrf:G+h][n!>5ctFKjKdCjEAK^%SD^8]]@\^S9qkSgAu3Jc;_a*@U/Hl<6k$$ZF!2_D",p16E.)os"?1FP18!PQ#sU]HaM?M@bIX-,TbOt53(rl08t??00rN4HZN>A;%25G9LYQdMc$e=u#$B\k.KrJD='W=VUcrp)j6i3LgGrTgYM'Z=l$.NZ=>E%h*i<%1"n%M^#ml'hhbXIK$ZH-9uA)d0rO2D)2c=)=E%(]'g%@<UZ]Ysm4.Kg(BoZJ/R;DLCPmUUlp^3qk5qQ1'^O8mLZ"=nS?'pA#'B/)MQT-tii..u415q;UK2e[&?:.]A5-oG!hTj0G=+%qgC/A,&SiP(28](M6l-qGE6@?Wb$^8_G?:V+("&+]g7f%VGg+$_B=\'.?=mGnnSk:I#Y-ATFiIVB`"TW])jX[kUn`[1!dcUl)m8h%]L/Nr%,E"*j%NnP=D%u-'dVR&Ps=$;_5B(QU]'44S4u/^f1EpP50sa&Gupm6;!]bsUXAgIoe)S\k,Xdik'Bm19a9;HD<9*lIYEl%%M/PB/G%?eBmgO<J[l?lk;VCRi0PL3:n*PT2m@&6[/*<ed\)9+8f!S+*mV"lA]";HB)i1a&7,jL^)i3Bam4'g[P[4U$:l@;eGOVCB%6U=KlWiZPj>#4A]Zpdpdgs%:\CaT\P7$$O=rK0r']TD=DX#$>'89PU!O(A[>Qt_fcK%@fr.EIkD</;Y^Y9_;!NmTCXqhW7oRRC*Z%&SQe[Qq7F#&1o]0_ekFK;R494StgttmA.hh:ign-U-Znnnl&4Ss"kO^#-QnW;:ZIG:\EY<Xt+bjh/WZhOZZ<ZD8T-q=.&J`Jkt?@%5l8Af?cEhP?]X.BH?_3VMT$qrS\)5R9D?3)#/p+"f-%HT/^<Z[d$?u=oTj+g)M/sR\79=CNWpZFa)E[#mK-L-l;@pr.e*n=@QFQ-%ppI4Bbm1^*#J`eS:?f5Q.Z2k#aaU-DeF:M*TbNYPW#`O'#e%Z_B#U&OmRRH.J'qR9;iF&nQ=!bpN_Bo'Of(KSEn5cM071`*rbf^,%VdRfZ?IA_lHlO#c!P^_f!_(:tKjW01h&/a_!+#OnCWL`60K^\=?GO/YVC`"e!rVd$C1R]Rp2c(</]"d6j($0.UYnT?7qBhJ4&he/%)hRIh5QHOb>m7l&SHhBkJ9Rt-.cDl1Un.qA*KJ)"=fV`Do:X</)p_dGJG$<"FEqsC!@rBt",%RXQL1K!Wgd^'kl)5E'H:*El'r"7%4BX.3_^-%LS/Q3R4.E"^mSrI:G9<@QFP`]"oD-pg/?J.EdFB`+DNGUi_E[tME.N:f:%!8'G^WO*3TC9RKPafSUAOFeH/nOJmtC?)%27O1aIOF$a@9MrWrAu0*DZ<q1I,s]3.3L!l7sUFPM$c28*8ZH4M/cb06e:N3Z;eo3"d0GiJTK`6n2S#Ndf,!1M2X!K$!_3oPdV@^%+\Bf:_Bo]Jicau:V$B^Y8oFiCe4$eIYC;FHZb"gM'GdHo=nu@m)E!&6IN"$*S!t\'?CLnF>VH1]%LM06]KC,-:HaYlm_BnWa,nJU%JY;:giNJ=b,52T\5Ja7$')e-doN*L;2(nut?cf4I2f^dUSnH?r/Q"bir$_0g6<t?['_B=rkS$dCZWWYgR0HRdXA4K;:Z>c?/"gl1%RRW^0[,6:06Jr"YdhYAnSc^`-D%>S5r@FT"T/tn+&!d1'RjZgui.5d;`&Fhaj@]W*iTA6q,JMLKPIR^R4uZ:6,h)/kG=)N6jEi$R%CBE-jUO^L@mq[(I*GQ3Z'HnB<F]fEi\RcR(-25-IS#JjB[aJiCFC6N75V3fsRaQInI*HfTQ>R)0Ej^qFn>K9Y85`$EFt;dbB3n[d%4pb/iF3<6Q?`;[o2[=eO;r#em1[o_4G,L;lat6+HJ)uT'%sX-Uo[dXT4%`M'#ZV,E=Sq*tG'/Re+3V6M>oa=P!g9:Xo.X[1$@XA8%&7Jr;V_&^?Cg;\IU:#Rh<qXG4X58AG5)gt4UE50sP$%T*$<8P7PpoF(Y<naD0h7R9+diD5TWuFE4T((]#l%S\#X>C',$-(CjcFgf%p!jujGhkhrQtFf#J!!nF*,b:H;#[I0*/Q>cne\J9<d[3S?S"hliX8BP!m#&rD@$J'g!bt"-oA[Ia^9E`a5W!_]!J$/TB&SfAF&2(%"(+kq'8?!=r-F?LG.;N._iGpnm<&[n)P&/%r7N+%_"X]l9/!q)m[?E+'/doi+P<jmDF`;!e1CdI,fb_?,H=.QJDPru'QSjg).8\p%_OKOAnc9Gbd<c6M\2"e"\B[ZD@GMjE/<hdbokNW>4js>q<`WeTFLZ*>O3*I"mH.qWGoX;%i8bn)i@c>%f6h9f+=JAU^+ob9h*kl_%0BWrlW]Ys>KqNg!JcXX;"@@IBq[]@gi<qbo*[p!#HpES*!e+VJ-d9*#rKtGqCVu_`65Tf<s"b)^'-ujpaZWT-]MX+(O7;jKYjp)[%*^Z084;;1#"<Wa:a@rD,0Z"etCWP(Ne`Fo`f(9>R>F"-W2`_%pK+P\/OM]u?p[E[ZMmK>m*_$`^m.7'!(n[W:WC,CC]T/W2PT_W5%0c;1r<)MRVikA`Fq_!id]j]CLoOqR-_C(==ObP]h&<a!RK@iA2+e7#^s81$&8>IYH1(+!l2k)8>?#c'hakRbSS2uHmK;(EunY412%llGul]"AksB'ap49KS*JD5koR`ldX]0kQt"Cj/UpJoL5!MKV'%aU=kUq)qaTXrlP3#N^08GG^\er(K6]c#5Pfnoj_tEVV70;a<g?%J6-[X&Q`q8^4f0mfbGheBG?H*d#mBQ&?M6^`b1@#n6:$tG[SV_Q3RFnV@'$Yja"S.>+Hu*R>4=UnJJsCE6jRj;V\;*6?\%W[7p4T%*,E-;-<a7(V7OLs2c.0U?Rnr>mCI](_%Br03W*q*(%4%_[HH*%T1mS([IG+ahC0kp\lI/qafb5,FE34nd]7se%SgW^#e9rsoO:E7%86@jOSl\ONLfa!aJYc<GnH>)pK4l\Ze4=m=71cRi`#fW?Xc?*CIT[B353`e/qP'\hkli2dF@LM;#GXhnBQ(%r-G6?JA1qI%m&WWJ%0BC%&dXLP?P)Tmk"#U:X5j6>1Y#W@P=9/C`i"W?%#U-;DMM-p9#fq"o#%'GK$NC8t^J=;>!50:/$1[2*]+Gh=hYS7C<8+G[C;e;Z%m2HZF1_f^@L0qR&><jk5#i7fG8]8ru(;30CgKfAhHn)@=AKKh[qs&YaIE&<h]IQWq<M:m&$<NMb8$_lA*cD=drkp9H47q/K29[@b%V9_PN=h$!+*tU<W`M^L%p)l2+s/8!k=PXuBSQtaa*O\;oL(/CNbjYh[A[($T++G1Kh1sB*1!h\olhF$3#,mc#.%PNS?>:9U1o8%A%^q_4Y4X,2Cq]a\qB'+a$m2Y]%2PbboZ2/Nc)J">l-@6^+FUW`9Ji"D=8^aP^jRL2PJ9W*q[<-Xu!i7<d]D/Y1%>^_7]^#`nXao7q%8H3F[&?ps^GE%^5"-nceEoeF5_\NTp(XR2[&OcPLS<kM&:]dRSiKpKEP`="p6".o1?JGp2.(GRT6nY!YA;Tl&AjIUn5fSQ'S;*E2%2C7o8C,".Y61&7q6]7a*GGXFEM_J.Fm\7KD>"#V)[djbgS2Y4_4riqXHUd7c$:DdZ_d?G+8iC8K/+h&np8u7Cg8YWZ*b(cXM:N%j%EpTBa3A.oLa?=_q(a'L3ScP?Pj\,7`l+dGJil<ZqnY@^X0_2/'J>3eb=Vk&F>GG`CCeT6G7##.j]Nr%!%(d':c4GF3cgH:9B0D9B%>g3::c",ZBU@D4l'Ia6*ePZ?&,RYCi7kf!F]7H]P$bkiA(WZ<il*PL\K,s)LE']u&/<*D!3;$(&4-4pt$ih"GX5F^ZWqHM-o)!H'%;[G.>:]'Z'0SuiKYeKN0m(im,-;GTOK9!)eTYPjVB@E&&#MWP_'#_Aa"]5:`*`W1gHVXoBBMdUUjQ7=6WFuae7dbAPee9)-YAt3$%+4gc$B_VIdEZfo.aFWiO>REa;1D16#mYpI+!'uj25QGHg/V*moZ=*ctFb,WIJ'S9@"Pa=m]a0N=i!2[ni3u)a!gJV="U%pZ!+Z&K%,ltgs>s3J7i'B!O?LrtYoJcS:::)<#Oe]+?!/*mF(D!0Zi>&#QVIWMf,Ef\ALO6([0@jd:MldIihgSQ1pi[nJ?(diB%>lj:#BX1.%fEHC3ghRerBjXE3!u4fSG#=-Mm4SQa^rPr.n#^86^L_N8KS3;SP_*)1Ke?^'Ui$ta3e04DhG<#me.#&gqi*Z;*6+e4e2jhk*(k)_%PH</c`SJ<i)Wl,!CK>2rU-jXZG%6WEPWE3DVGpIM_.s+I'S=si8;/:3/7Ko$qcd@A,YBjh)BF+^P6Q_%=<5rW7>Y6gNrr/to-8#W%"=l^oZMI!]m9jn[S%KakWe)CPc935SpcoO5bQoo1f8,^je_f3:7l2dUfM7o7>GeO,$os?I];V@_M7o3P%p)='a*(r2n,`U4l5Y$g%;pSqJlJ@T]OZQD+5^">Ump^C%#k)s]6W7u808^jj958LTGTrnVZl$co]]>Xi*"Us`p-Sh9*Q/V"m"^*Pnf^+-`dS3#qZlUY":b;@%@$H:g,)lI3E%Qk76l>eEn4cW4n/E5?+lkQ_mc0-Xp-YLoJHL-@Jqe^[m&/Ln'4L6_i%8#WHQnFI&.ZM_Z)8tdfFK.s*q&-Hf^_B0%m"Ok^IUt^/],DZ,2gBAdXuB#++P&3O+-Utcn;$*FPS=(h"TO7,'.G:t-_5?1#/8%6e(2n)6Z&BYhq=G[gjPp4XilpUHErnK\3J7q%I+5iCFW+h(g54SX6/,>9&'TdpK@\tG+8Rqm@"s(7kq%Ab])Qbd^ctn.$6Kb@T)s98#CJN:+25Ocs#?e!$g5tHko>=fh&AjDSrCTd%ab2HD,pOZQ9fZk7ZWN0C6rPh_3H_-2-:1XfUujK'[o8:cVN,jSJK$:J%K,t^,U5#t%>o76^c@#b,a_,cAeIj"*hd81JeJ\:`DVO`%*'OIW_>[=4P$61bT2)kBRlYF-!=5$\ejp]BghI6^diAA<lJ-<ea0F$enJoeC2JU=s/NUlsPW^@)4U*t"#mVm\i%!t:TIUM`j8_ZD%DhAq^R#fpMnb:f2K)6d?5BSqrR-6d@3d/H45/4H$J2c`tD3bN/W-EuP15p#a_@u_hKP.SJLlZ^c!d1FfORYl#9Z_9>I&'ktn5-h+%n_)42TF\Gh<'1dh`"cK"4Am^tGUQpRph],)0F(bcSW$(%8rOB)ad4/7PV#7K[du8K#?h=q!.)9jWPh<tAV^k.bE/=_]StKoQ4]*(%,#fa=?\\>H^'sP*C`1[-SX0pQcn](8"Q20F2D77W011+8>DDcdk@GnK[#B5dU#o>6,Pa+5LU(J^cZWVanj(Ah0F>g;jNA)Vad4/7%PV#7K[du7P#?jT[:&o1,5Uu;dHl:p2feT@9],uNX3l6ke+Se&4Je>a-l.PLj37Ksk,uMXL8;`?VV,"/cOrC'b]i?';(`-7>d8Ycj%.$l)@;li@;;I#$PV7i-6l6M_i"3>e.onEauPWL(sPdX!:db[S+FdPgR3CQB"W]^rd.97X..BZ(ddb[S+Fe4LAM3<]I+q^Fr<[)<.%Y!g[chF\9#Ue<`[8T3"5pe8f=UmC"4'J8^SjA;bcVM6J$7!PTPJP#Mjq^X\V_>_28OU$sk,>$6JMuci^P!kg8n.lmTS*:]=$Lf--%Qsh1q-qQL1<.lS91p6U%(.fcs3$\"uSVke`75QJ<U@9RsPUIR]&4r^3.[E=X+D_8aj+Z_GmPl*u[pO@_IZK4R^Gh`BQ&*dA+Q"KD%81K@+/3HM$,1.5P9c+iZ$2>L]k<+Y8Sg7isd[Mih0[9V9JRKlh8OP.+2A*hF%RlOI0B+3!)C_PQ87B=l.@q!c'8g<E,a0pRD_d4I%"\?GtNpq^rBF-%\-;7>`5:0JkafCojZP4(HjX:.A_%.,P8MCpO`DYhh5uYW=j-6JIMpIQ+b7eMZ0Ph*]e"idI$I9PM.GsV5GQW\N%DidD<f3<rA1mO/IV;B-..OpCD`'B_^cPSDEOY^ldintj.]:si6j+;['8@ho&lj-9i'W@d("qMjnZ:RY,p.$3'(ci;+j00%l`"hfF%8iChKE/@`T'Ds6CN._.lr>(i*;^juEJ1aBX\/tnPA=L+aJG_*bOf$@@,a<mCCWfC&B8r]4N=4H$:D`"8g$u:pi(UV,RlW_R&!"3\%)X'h]n(Tfu1fZ*G+_&>QVPt[(g6nhdZtj<C1B4MJBo:`YG,?^Xm+Rl)n@<=IRe!)FZ];KW,ohP?-gY4J]e([GA%#W]CM.XlR?(G-%TCmLb_ladt$2?(LT-"Q^:$*Nm?a3]MNAe,4`HhO]`!sQQ!B?QtV`0g#cS]SYVN%(RfQY&@gh<.#Ml"W\,S1aQ/1_gg6"J%K#Dd<?%]LUo,N^HtT;?JRm0FWrU[`#A"`5+CHWT"<Cn6J)B!9qPnko,WShcdlUGeUY_VQ-hIgNQsX']r'qS/d>"=:(&YkD=!Ti@F=oBWM'N%2][La&ZB5:&/L//OsD`7'?LptIcA!33s3?_q)8.0AJ9N`HkZLK\efh+@R'd7AM[a\Hn40VZB;@H^6.nbfdMgMX_;gB`DZ1j;8#:)%>^21A#RtU3UfpKI`!:bAc!nn-8B)OEib0c4oVn\^`,'jj41[_uWKS_^k3nKo+Md\YrM`BSXWhr<<p!oQ:(;t!DKgHs_;90aactm,%+034BXE-(f6cru,i/R>\@om'LXE4'Fp^_`RINgUm].6r_a8Z6X1")T~>%AI9_PrivateDataEnd