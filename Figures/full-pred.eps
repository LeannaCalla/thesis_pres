%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: full-pred.eps
%%Creator: Adobe Illustrator(R) 13.0
%%For: Sean
%%CreationDate: 12/2/20
%%BoundingBox: 0 0 1168 667
%%HiResBoundingBox: 0 0 1167.3525 666.0767
%%CropBox: 0 0 1167.3525 666.0767
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 13.0.2%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 13.0.2 x434 R agm 4.4379 ct 5.1039%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                        
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 73 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: (Page 1) 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.1-c036 46.277092, Fri Feb 23 2007 14:16:18        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS3</xap:CreatorTool>
         <xap:CreateDate>2020-12-02T10:16:01-05:00</xap:CreateDate>
         <xap:ModifyDate>2020-12-02T10:16:01-05:00</xap:ModifyDate>
         <xap:MetadataDate>2020-12-02T10:16:01-05:00</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>148</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAlAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q82038ttY0PWLzzCu&#xA;tCZkiuHt7UQlArskp3Yu5YSSS+rJyBNVQD4VGKs9jsbpVo2o3Dn+Zlt6/wDCxAYqu+p3H/LdP/wM&#xA;H/VPFVk9ne+hJ6N/MJeLemWWGnKm1f3Xjiq/6ncf8t0//Awf9U8Vd9TuP+W6f/gYP+qeKrJ7O99C&#xA;T0b+YS8W9MssNOVNq/uvHFV/1O4/5bp/+Bg/6p4q76ncf8t0/wDwMH/VPFVk1ne8B6V/MG5JXksN&#xA;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</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#">
         <xapMM:DocumentID>uuid:2EB69EEB8235EB11BA0B8AFEDEF79E92</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:8CF24EB41936EB11BA0B8AFEDEF79E92</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:2DB69EEB8235EB11BA0B8AFEDEF79E92</stRef:instanceID>
            <stRef:documentID>uuid:2CB69EEB8235EB11BA0B8AFEDEF79E92</stRef:documentID>
         </xapMM:DerivedFrom>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:stFnt="http://ns.adobe.com/xap/1.0/sType/Font#"
            xmlns:xapG="http://ns.adobe.com/xap/1.0/g/">
         <xapTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>800.000000</stDim:w>
            <stDim:h>600.000000</stDim:h>
            <stDim:unit>Points</stDim:unit>
         </xapTPg:MaxPageSize>
         <xapTPg:NPages>1</xapTPg:NPages>
         <xapTPg:HasVisibleTransparency>False</xapTPg:HasVisibleTransparency>
         <xapTPg:HasVisibleOverprint>False</xapTPg:HasVisibleOverprint>
         <xapTPg:Fonts>
            <rdf:Bag>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>Courier</stFnt:fontName>
                  <stFnt:fontFamily>Courier</stFnt:fontFamily>
                  <stFnt:fontFace>Regular</stFnt:fontFace>
                  <stFnt:fontType>TrueType</stFnt:fontType>
                  <stFnt:versionString>6.1d5e1</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>Courier.dfont</stFnt:fontFileName>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>Helvetica</stFnt:fontName>
                  <stFnt:fontFamily>Helvetica</stFnt:fontFamily>
                  <stFnt:fontFace>Regular</stFnt:fontFace>
                  <stFnt:fontType>TrueType</stFnt:fontType>
                  <stFnt:versionString>6.1d18e1</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>Helvetica.dfont</stFnt:fontFileName>
               </rdf:li>
            </rdf:Bag>
         </xapTPg:Fonts>
         <xapTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xapTPg:PlateNames>
         <xapTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xapG:groupName>Default Swatch Group</xapG:groupName>
                  <xapG:groupType>0</xapG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xapTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -666.077 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 666.077 li
1167.35 666.077 li
1167.35 0 li
cp
clp
[1 0 0 1 0 0 ]ct
72.5371 598.289 mo
1146.54 598.289 li
1146.54 11.0386 li
72.5371 11.0386 li
72.5371 598.289 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
1 1 1 rgb
f
0.50025 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
1146.54 11.0386 mo
72.5371 11.0386 li
1146.54 108.914 mo
72.5371 108.914 li
1146.54 206.789 mo
72.5371 206.789 li
1146.54 304.664 mo
72.5371 304.664 li
1146.54 402.539 mo
72.5371 402.539 li
1146.54 500.414 mo
72.5371 500.414 li
1146.54 598.289 mo
72.5371 598.289 li
1146.54 598.289 mo
1146.54 11.0386 li
1039.14 598.289 mo
1039.14 11.0386 li
931.737 598.289 mo
931.737 11.0386 li
824.337 598.289 mo
824.337 11.0386 li
716.938 598.289 mo
716.938 11.0386 li
609.537 598.289 mo
609.537 11.0386 li
502.137 598.289 mo
502.137 11.0386 li
394.737 598.289 mo
394.737 11.0386 li
287.337 598.289 mo
287.337 11.0386 li
179.937 598.289 mo
179.937 11.0386 li
72.5371 598.289 mo
72.5371 11.0386 li
0.873 0.873 0.873 rgb
@
2 lc
1146.54 11.0386 mo
1146.54 21.7788 li
1039.14 11.0386 mo
1039.14 21.7788 li
931.737 11.0386 mo
931.737 21.7788 li
824.337 11.0386 mo
824.337 21.7788 li
716.938 11.0386 mo
716.938 21.7788 li
609.537 11.0386 mo
609.537 21.7788 li
502.137 11.0386 mo
502.137 21.7788 li
394.737 11.0386 mo
394.737 21.7788 li
287.337 11.0386 mo
287.337 21.7788 li
179.937 11.0386 mo
179.937 21.7788 li
72.5371 11.0386 mo
72.5371 21.7788 li
1146.54 598.289 mo
1146.54 587.548 li
1039.14 598.289 mo
1039.14 587.548 li
931.737 598.289 mo
931.737 587.548 li
824.337 598.289 mo
824.337 587.548 li
716.938 598.289 mo
716.938 587.548 li
609.537 598.289 mo
609.537 587.548 li
502.137 598.289 mo
502.137 587.548 li
394.737 598.289 mo
394.737 587.548 li
287.337 598.289 mo
287.337 587.548 li
179.937 598.289 mo
179.937 587.548 li
72.5371 598.289 mo
72.5371 587.548 li
72.5371 11.0386 mo
1146.54 11.0386 li
72.5371 598.289 mo
1146.54 598.289 li
0.149 0.149 0.149 rgb
@
%ADOBeginSubsetFont: Helvetica Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2020 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /Helvetica def/FontInfo 5 dict dup begin/ItalicAngle 0 def/FSType 0 defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 32 /space putdup 45 /hyphen putdup 47 /slash putdup 48 /zero putdup 49 /one putdup 50 /two putdup 51 /three putdup 52 /four putdup 53 /five putdup 54 /six putdup 55 /seven putdup 56 /eight putdup 57 /nine putdup 58 /colon putdup 71 /G putdup 72 /H putdup 77 /M putdup 84 /T putdup 97 /a putdup 111 /o putdup 112 /p putdup 114 /r putdup 115 /s putdup 116 /t putdup 117 /u putdef/FontBBox {-951 -481 1446 1122} defendsystemdict begindup /Private7 dict dup begin/|- {def} def/| {put} def/BlueValues [0 0] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings26 dict dup begin/.notdef <1C60D8A8C9B66F631635D26BA635582B3FDE9B3DD75794781396E648A7CA97DB1343CA> |-/space <1C60D8A8C9B854D00D> |-/hyphen <1C60D8A8C9B81F2C797F8B2BDB0639171EDAAB309BF7> |-/slash <1C60D8A8C9B854D08FD42DCC2A61292225078A8A43> |-/zero <1C60D8A8C9B7EF322BB70D1045F9F84CF5A9E636DA48B0B84345CFB17CDCD64AA529BD23C358113A6F12A7F927F67801E7716DEDB8FBB50D28956279879C3943A67386E5304D963AB3E064E7022317006AA79A8777799C5D39502A7CB330EAEEC28837821C5437B109C741C1D7BCD8EEC785ED017624EE945A52A677F5B0E3B0C4781A3901> |-/one <1C60D8A8C9B7EF322B8DEEDAE6F72EF3709E16C7A593AF17F17D72A3907C7468090579C66DE0263BFE> |-/two <1C60D8A8C9B7EF327699F81B0CD59DC4BD38D48AF11B5B9C1D7787A22BDC09D7BCED9A76C2312055A28AC829584109043EE366AF8632D6D62E9BBD6A4357093750D4015EA59C9F538C44C55AD0DB14FEE0C7267845EB7EFBD514024AA1A03530A8941AD7B5F508335B2FDCA37E6B0627146A6F144DB9DD7DCA6BE86290FB46DD6A2918F4C2C2BDEECA159D78> |-/three <1C60D8A8C9B7EF322B8D6E3793F9C339FF2D01F55F75395A69A42725328E1B8E66EAFF6BAC335B6E345906CE7152DDCE6F991DD2E99A50D14EF5FE716864AD89B92005EB56184F6465E294CACBF73EC4E77A27D9ACFF3348FE551D23745FD8C1F5363E223D2FE146B2E36748D97805004E8C37168D3D6622BBF76ADD739801325A4BB7457A49C531154E36C58F381AB30F164CAE6510100AF5FE6405CBE42D3AEC01131A86CADB27645F055DEC901ADBC964660F336098380F7A314362D92502B680C534E053458ABD592A4A4D87F9589307764B161F9884> |-/four <1C60D8A8C9B7EF32298E3DD46F18108137336D1A5C627A90D059BB18158BA2A55FF5DE20CE460964DAF45C08A7D9820A784F4A44F7E1> |-/five <1C60D8A8C9B7EF3277A9C7C54B35CB479E4C110330EAD203F40A20826414A4CC0E90EF4AAF68DCFEF4ABE6CFF07A7C5FBDADC90A7F87ECB382B602F56451722980F3A3AC74E582BA9C9CEC3027EC489F453112D8FBBD217B656538AC90D034F616E885784C813B1555F6DEF92ECF082193A9672305F8A984DE35F68D1502A8C10EB08C528E24E38813C68D1F86D01BCA9E> |-/six <1C60D8A8C9B7EF322BACEC3D6ABEF2D493EDC493AA22ED42125C47DF2396DE843240A24151C3116F0DCEE068EC75B404A70B0E3A92C2307D093030C4F08B5CC0A75F4F4D7C70C5CD3B07E718D5DA84710CE02FF093BE8B5ED477F329DF9AC8554D46651B2A99890C549B5152AB0899BB31DC610CEE59FE1F4C3BE037BFF7F7AE7EDC6D596E9E9398287209A7C703150F7EA84F1C65DCD68CCC47A3B7F9EF77F610D53784F89B61AB4160F9D214F618A6C0032B66C3DB575FE49E073B7AB1C1C6CA> |-/seven <1C60D8A8C9B7EF326C86E2C8FFDAFAAAF8B2EE45CDE12ADFFACC9341D807009D1D241E6029AF890199C52728BBB0F3ADB8945AB4753C3621AAE632A8EC4FD7F79CCD78EF> |-/eight <1C60D8A8C9B7EF322BB1E6B7658B273FB04B6EA2FDD83BE014315CEA310C9045661E4654F5FAA18E921C35D5D5266AB0AB839D962ABE974A291E63893114CACA79253F9F2FA5DBD832A15E9A146C3FAF70E186074467C5FF9BFF3446DA2979E197C33ECF2E6672D0ABB4DD84DADA6F0875D027C1012708E022D3B91B078729D3EB37FF9AB4379F6AE8761C6A64E65D5782F4A15C32B5788322C1277C7EEACA49FCEF1A946497EBAE7710FA41A32E95C02F9037E734AB7501DA6FA4D1255B1B5E2A30AD357C72139096879BB9225AA54D6163D99B65B907C933335C31755E7599F49EDF67E30B707AA1BB3DFB155476D77FA4345C2EDAF4F74461> |-/nine <1C60D8A8C9B7EF326B464DF43714564059769E71FFFC685FC18F48C77D53AC88FCBBC12F494C4F63EED0BC4E888DFF584BE7D2D816586B9A4264CD850BFF6D2740D48815051A0D66B2C6D52B7F71CA6A6822ACB78F611F031D0F31B29F8F7C82DE8795DAD0A78F20A0C158D57307DA2BB022E8173A55705FD29D68A57A980A4A8A50AA38F194766F67D892E4FFF95162BD634B3243B2EC97981B62535F84C02C407EE586AAFD00BF4926CA361322725073A4D1FB7F2047C32550A5DE15> |-/colon <1C60D8A8C9B854D0F4305E7B4C115DF77DDFD45AC92D3A28706FE8FA19D528> |-/G <1C60D8A8C9B6FF86FAE761919412E75DCB56A17E0B647886E974BE0CD2DDC55247C89172C0F24B317CED95A1845F91927547B6F787BE4A81523EC6B90B7AF23F6F8A8BDDC51D0AA285D7E086AD8E028BD7D16A89F17742D556071D7D56166C6C8A71E0DFC3DA3B4DBE27EC4E6BE207A1EAF47A71BE409951D1C5060119CDD071AF7E9076F56846B6D62E52B2CB6390635FC230> |-/H <1C60D8A8C9B6079F4F4E07EFC7C894BAD912B65087B319FD4C6D4407FA6BDEE59584D043C3070AE38B> |-/M <1C60D8A8C9B6B41C9910B30BE12408A0CCE83CFCBF71D6A0AFED0B0C7E6B8742F00BF38074693AE67B7536DF8025FC27BB7165EE6A43D7B9497E065E42F0EE8DA1C58C8863D1E0F8290CD2A3925749EE5F186B> |-/T <1C60D8A8C9B7D8BE7B6CE17BCB3B2D4B0FB3E6AF9E6DDADD178189522CE1F006> |-/a <1C60D8A8C9B7EF322B0D17E770BC81022852C5639214CBF49D6EF8BAFB0188062A6BB41F6EB58ADD15E3D1B86AD22624C804FD4A4EBA73D78F7E503599DB65A7EB53D74C4A9A536152BF7A6B13AB96FF2727313FED0263E50A950746CED5AD5E7764E6E353716A8BE8970281B41D9429E56957BD1FCC84205F76AF78E807D18CA1CFFE724AECDDD2D385233E91066015AC7E0906FE359E28D96D9E0BD326B9E6C7D3E486FD1864E3B47A611B1D6D0D080020321300485E65AE9E4C12443E21865F474D46CD791839F25C8FD0A80215E3D2C3A5928427942DF3859AEF6E9035C909FC75082E8FF246F375DDB90EAC248C9121707FE869E161502F320A27113504> |-/o <1C60D8A8C9B7EF322BB7315D499F0FAA57DF741D86CA9D8DB7E5AD83A05FD148F53EC24E4E6BF5C292C0FC171599978D99E35AB7CAFB8CB65593939725D520CE4A30CDA834D29EB92A082721C79AE18875772ECDD437AD2148D76D23F045CDA1E61619294E456095F14AB8D580008870DAABB6481A0C5B1656CACCDE79F2741F9BB15B> |-/p <1C60D8A8C9B7EF322BA467487181334E955BE246DF5D0EF3A11E2BDC8B674F6546E88A741A6A22FD8101960B985F64CBBE95E02BBF21B77F9A8334BFBA9533492E7CA0F0DECFBF12D8467325B4174F987BBF353C73C5D70057F40D42361649961064C7B7F613D284310CB0B59908DA85F34298558C6B0DF453AED21873A379BC9BBE582E1040BDEC2230FBB52642> |-/r <1C60D8A8C9B81F2C037408F8BF0E381AE4C9649BA754678B3C9CB9B6F5985C2C3DD85532C988309B457CF86E09A953B63981C0C686B55A9B6F57C7F684C3CFA5497AE68C179CE338521D1494441800> |-/s <1C60D8A8C9B7A73DE557A2AA450BB57EE39D611FDE79056DA153DEDE8E0D2C9D756143DA5E614060C362E0813E35369DA2F002330267D2CFA81D3D9AA172C91A8B8E19BB92CE3CFBA62200E9E8175CCCB3A5FA559ECF71DD7F2B47B117C69AC3637EDAE62020C9DAFDDB718C27C76EF62794CF8B187D103B05AC07655F04A6D9D5181CB287F032D98B2512B2A9B281D13745308AC05B350DA95BA0BE14F12630B5B2A718215DC0DE5A544FA267BEF8FD5CF5292808F195D31A5EEC3ADC63> |-/t <1C60D8A8C9B854D0DE8EB299D76AFE3A3E7733E2D967660702D2EB06537F4BAA1F2129056DC9771C91484E3F22B637802F61054AB3D0E9902E08C4E6B9ADDC0E2F51D38CAD652B2A777D9304919B1B524DD7CC56553E03BE971752FD0161CF> |-/u <1C60D8A8C9B7EF3216DE239CB7942A5DFDA331E51AE98893153168B8E02CBA8B703AF815B3549788123453BB74B7299D82AED651A97B215A966DFD3A6E1F3128BBB9E96D3A241ED635729E83FA4EE02FD12FE6F7CB1ABC83B0> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/COPPMX+Helvetica /Helvetica findfont ct_VMDictPut/COPPMX+Helvetica*1 [32{/.notdef}rp /space 12{/.notdef}rp /hyphen /.notdef /slash /zero /one /two /three /four /five /six /seven /eight /nine /colon 12{/.notdef}rp /G /H 4{/.notdef}rp /M 6{/.notdef}rp /T 12{/.notdef}rp /a 13{/.notdef}rp /o /p /.notdef /r /s /t /u 138{/.notdef}rp]COPPMX+Helvetica nfCOPPMX+Helvetica*1 [21.9998 0 0 -21.9998 0 0 ]msf65.4121 625.687 mo(0)sh158.928 625.687 mo(100)[12.2354 12.2349 0 ]xsh266.326 625.687 mo(200)[12.2354 12.2349 0 ]xsh373.732 625.687 mo(300)[12.2354 12.2349 0 ]xsh481.131 625.687 mo(400)[12.2354 12.2349 0 ]xsh588.521 625.687 mo(500)[12.2354 12.2354 0 ]xsh695.92 625.687 mo(600)[12.2354 12.2354 0 ]xsh803.326 625.687 mo(700)[12.2354 12.2354 0 ]xsh910.725 625.687 mo(800)[12.2354 12.2354 0 ]xsh1018.14 625.687 mo(900)[12.2354 12.2354 0 ]xsh1118.41 625.687 mo(1000)[12.2354 12.2354 12.2354 0 ]xshCOPPMX+Helvetica*1 [24.2002 0 0 -24.2002 0 0 ]msf388.662 654.437 mo(Hours past 09/09/2019 12:00 GMT-4)[17.4766 13.459 13.459 8.05908 12.1001 6.72363 13.459 13.459 12.1001 6.72363 6.72363 13.459 13.459 6.72363 13.459 13.459 6.72363 13.4595 13.459 13.459 13.459 6.72363 13.459 13.459 6.72363 13.459 13.459 6.72363 18.8232 20.1592 14.7822 8.05957 0 ]xsh1146.54 11.0386 mo
1135.8 11.0386 li
1146.54 108.914 mo
1135.8 108.914 li
1146.54 206.789 mo
1135.8 206.789 li
1146.54 304.664 mo
1135.8 304.664 li
1146.54 402.539 mo
1135.8 402.539 li
1146.54 500.414 mo
1135.8 500.414 li
1146.54 598.289 mo
1135.8 598.289 li
72.5371 11.0386 mo
83.2773 11.0386 li
72.5371 108.914 mo
83.2773 108.914 li
72.5371 206.789 mo
83.2773 206.789 li
72.5371 304.664 mo
83.2773 304.664 li
72.5371 402.539 mo
83.2773 402.539 li
72.5371 500.414 mo
83.2773 500.414 li
72.5371 598.289 mo
83.2773 598.289 li
1146.54 598.289 mo
1146.54 11.0386 li
72.5371 598.289 mo
72.5371 11.0386 li
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2020 Adobe System Incorporated. All rights reserved.systemdict beginCOPPMX+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/C <1C60D8A8C9B6079F6D8209747A86332E73924F1B07F271169856A53C915771D7C530ADE68D8CA49F0A6B3478F9E8176949771F40D91B68E1A88C72CE81CC0A91B3CFB642960E7EB2127A1637D49961A11F5DD40622F39379CDAB7E5B349DF832E4955008C5E3208AB258B012A237635179513D820ACF76E0A17ED392C351599687E8E7D0> |-/e <1C60D8A8C9B7EF322BB83B593C4F5531F1493EEBEAC6F4C92C25FF10F1FB8EC7E530E4B1F1C9E51F31B44D59539AB4135F310FAB43C5A16AA1F4EA07D67BBB916AB355913EB7D45F3AC7C9CF1FD32728FCA1A2D5BBD257CEF831AE751904AD7F4FBE21E10F3A844E74CF6B850E894017941E45AE6BCDA168BF4979345C67DB13F0C5FE9888EB731B0A06A8D5D1475F60C11332FBE633540E50C86671A26FD83CD870BB68F7A9> |-/m <1C60D8A8C9B6B41C87955CDC3639140F8FA33C70CE271539122DB89AC63FD596C1AE79761050C7D5317C1A1DE3923CB96B736E4977F68D67BD6922E1964FE05D51AB32C479ED8218C444609251096F1947B0C4960920FFF6AE70BA15738BF1106729A839E228137A715EA1C031F63BED533B4300B92AAA320484B5BAB342D2B48F6B68F518B0142254C333F20247ED0EA3DC72FEE0> |-systemdict /gcheck known {setglobal} if end {end} ifendCOPPMX+Helvetica /Encoding getdup 67 /C putdup 101 /e putdup 109 /m putpop%ADOEndSubsetFont
/COPPMX+Helvetica*1 [32{/.notdef}rp /space 12{/.notdef}rp /hyphen /.notdef /slash /zero /one /two /three /four /five /six /seven /eight /nine /colon 8{/.notdef}rp /C 3{/.notdef}rp /G /H 4{/.notdef}rp /M 6{/.notdef}rp /T 12{/.notdef}rp /a 3{/.notdef}rp /e 7{/.notdef}rp /m /.notdef /o /p /.notdef /r /s /t /u 138{/.notdef}rp]COPPMX+Helvetica nfCOPPMX+Helvetica*1 [21.9998 0 0 -21.9998 0 0 ]msf30.123 606.14 mo(-10)[7.32617 12.2354 0 ]xsh51.873 508.281 mo(0)sh37.623 410.414 mo(10)[12.2354 0 ]xsh37.623 312.531 mo(20)[12.2354 0 ]xsh37.623 214.648 mo(30)[12.2354 0 ]xsh37.623 116.781 mo(40)[12.2354 0 ]xsh37.623 18.8901 mo(50)[12.2354 0 ]xshCOPPMX+Helvetica*1 [0 -24.2002 -24.2002 0 0 0 ]msf20.7793 402.539 mo(Temperature )[-14.7822 -13.459 -20.1592 -13.459 -13.459 -8.05859 -13.4595 -6.72363 -13.459 -8.05908 -13.459 0 ]ysh%ADOBeginSubsetFont: Courier Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2020 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /Courier def/FontInfo 5 dict dup begin/ItalicAngle 0 def/OrigFontType /TrueType defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 161 /degree putdef/FontBBox {-655 -409 765 1089} defendsystemdict begindup /Private7 dict dup begin/|- {def} def/| {put} def/BlueValues [0 0] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings2 dict dup begin/.notdef <1C60D8A8C9B7C3C9ED9313AFF691AF9DEA7EFE9F59246D6675CBE223F5D9796E7E2CD60A70D0> |-/degree <1C60D8A8C9B70B6BBA95DB739E486D95CF3C1C76ABC4A5FC6AA385DC1C7CCD7D7634BB36B1BE785067CEB5C1929E1A8716123D574CD65C30E13529F3CCE725E557ADF2C0A1FDAF00369F43636FBDDC30DC1012B3FAB418CCF0404580CB3E5E00FD905DC586003A01BD997E63B65E06D40A998DD9D5745D3EB1BA8819608CD038924F3ADD> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/COPPMY+Courier /Courier findfont ct_VMDictPut/COPPMY+Courier*1 [161{/.notdef}rp /degree 94{/.notdef}rp]COPPMY+Courier nfCOPPMY+Courier*1 [0 -24.2002 -24.2002 0 0 0 ]msf20.7793 236.789 mo(\241)shCOPPMX+Helvetica*1 [0 -24.2002 -24.2002 0 0 0 ]msf20.7793 224.039 mo(C)sh3 lw
0 lc
73.6113 283.346 mo
74.6851 147.163 li
75.7593 151.108 li
76.833 156.07 li
77.9072 162.559 li
78.981 169.253 li
80.0552 177.67 li
81.1289 189.259 li
82.2031 202.932 li
83.2773 218.132 li
84.3511 233.851 li
85.4253 249.158 li
86.499 264.085 li
87.5732 277.718 li
88.647 290.599 li
89.7212 302.031 li
90.7949 312.503 li
91.8691 322.281 li
92.9429 331.128 li
94.0171 338.586 li
95.0913 343.951 li
96.165 347.219 li
97.2393 348.62 li
98.313 348.149 li
99.3872 343.951 li
100.461 330.66 li
101.535 319.952 li
102.609 313.443 li
103.683 310.184 li
104.757 309.949 li
105.831 311.338 li
106.905 312.973 li
107.979 314.833 li
109.053 316.692 li
110.127 319.022 li
111.201 321.117 li
112.275 322.281 li
113.349 322.516 li
114.423 321.822 li
115.497 321.117 li
116.571 320.421 li
117.645 319.727 li
118.719 318.787 li
119.793 318.787 li
120.867 319.257 li
121.941 319.257 li
123.015 318.327 li
124.089 315.067 li
125.163 308.314 li
126.237 295.502 li
127.311 284.051 li
128.385 272.326 li
129.459 261.011 li
130.533 252.722 li
131.607 247.495 li
132.681 245.821 li
133.755 246.536 li
134.829 248.444 li
135.903 251.537 li
136.977 255.569 li
138.051 259.357 li
139.125 263.135 li
140.199 267.383 li
141.273 272.091 li
142.347 278.188 li
143.421 284.755 li
144.495 291.294 li
145.569 297.362 li
146.643 303.196 li
147.717 306.915 li
148.791 308.784 li
149.865 309.019 li
150.939 305.985 li
152.013 297.597 li
153.087 286.391 li
154.161 275.379 li
155.235 267.383 li
156.309 263.135 li
157.383 262.665 li
158.457 265.024 li
159.531 269.967 li
160.605 277.259 li
161.679 285.92 li
162.753 294.563 li
163.827 300.866 li
164.901 307.619 li
165.975 315.538 li
167.049 322.046 li
168.123 327.634 li
169.197 332.059 li
170.271 335.318 li
171.345 337.413 li
172.419 338.586 li
173.493 338.118 li
174.567 336.023 li
175.641 332.989 li
176.715 329.495 li
177.789 324.14 li
178.863 318.092 li
179.937 310.879 li
181.011 304.82 li
182.085 302.031 li
183.159 300.161 li
184.233 299.231 li
185.307 299.466 li
186.381 300.161 li
187.455 300.866 li
188.529 300.866 li
189.603 302.491 li
190.677 304.125 li
191.751 304.595 li
192.825 303.656 li
193.899 301.326 li
194.973 298.762 li
196.047 296.432 li
197.121 294.328 li
198.195 294.103 li
199.269 291.294 li
200.343 285.686 li
201.417 276.084 li
202.491 264.085 li
203.565 249.394 li
204.639 237.932 li
205.713 225.414 li
206.787 210.312 li
207.861 194.251 li
208.935 185.5 li
210.009 183.23 li
211.083 190.013 li
212.157 203.432 li
213.231 215.94 li
214.305 228.556 li
215.379 239.851 li
216.453 247.964 li
217.527 254.855 li
218.601 262.43 li
219.675 268.322 li
220.749 274.44 li
221.823 279.598 li
222.897 281.947 li
223.971 284.755 li
225.045 284.051 li
226.119 272.326 li
227.193 255.09 li
228.267 245.586 li
229.341 247.495 li
230.415 252.957 li
231.489 253.906 li
232.563 254.141 li
233.637 252.722 li
234.711 250.823 li
235.785 253.671 li
236.859 258.408 li
237.933 261.246 li
239.007 265.024 li
240.081 264.789 li
241.155 264.789 li
242.229 264.32 li
243.303 262.9 li
244.377 262.665 li
245.451 260.062 li
246.525 254.385 li
247.599 251.057 li
248.673 252.251 li
249.747 255.804 li
250.821 244.392 li
251.895 227.107 li
252.969 214.961 li
254.043 221.783 li
255.117 232.168 li
256.191 238.892 li
257.265 241.769 li
258.339 242.239 li
259.413 242.483 li
260.487 242.483 li
261.561 237.218 li
262.635 231.688 li
263.709 225.894 li
264.783 228.077 li
265.857 230.729 li
266.931 236.014 li
268.005 244.392 li
269.079 251.537 li
270.153 258.887 li
271.227 265.494 li
272.301 269.497 li
273.375 273.97 li
274.449 277.954 li
275.523 281.478 li
276.597 280.538 li
277.671 274.91 li
278.745 258.643 li
279.819 222.752 li
280.893 197.735 li
281.967 178.17 li
283.041 171.554 li
284.115 160.749 li
285.189 157.9 li
286.263 159.456 li
287.337 161.012 li
288.411 177.67 li
289.485 190.766 li
290.559 201.2 li
291.633 212.769 li
292.707 218.867 li
293.781 221.538 li
294.855 225.414 li
295.929 226.863 li
297.003 224.689 li
298.077 224.925 li
299.151 224.445 li
300.225 228.077 li
301.299 229.28 li
302.373 222.987 li
303.447 212.279 li
304.521 198.724 li
305.595 172.327 li
306.669 146.37 li
307.743 134.655 li
308.817 131.689 li
309.891 138.667 li
310.965 144.521 li
312.039 145.049 li
313.113 160.493 li
314.187 173.09 li
315.261 180.959 li
316.335 186.499 li
317.409 187.507 li
318.483 193.008 li
319.557 197.98 li
320.631 198.724 li
321.705 201.2 li
322.779 205.399 li
323.853 207.122 li
324.927 206.387 li
326.001 213.982 li
327.075 204.41 li
328.149 193.507 li
329.223 191.266 li
330.297 163.596 li
331.371 102.18 li
332.445 64.2339 li
333.519 64.5366 li
334.593 68.1489 li
335.667 69.3428 li
336.741 78.249 li
337.815 100.76 li
338.889 123.83 li
339.963 133.578 li
341.037 142.396 li
342.111 151.108 li
343.185 163.078 li
344.259 163.332 li
345.333 162.559 li
346.407 174.617 li
347.481 171.808 li
348.555 173.09 li
349.629 172.836 li
350.703 168.745 li
351.777 182.477 li
352.851 160.749 li
353.925 165.143 li
354.999 151.891 li
356.073 143.189 li
357.147 82.3501 li
358.221 58.1558 li
359.295 59.0752 li
360.369 61.5127 li
361.443 68.1489 li
362.517 74.4126 li
363.591 92.4902 li
364.665 126.277 li
365.739 157.636 li
366.813 171.299 li
367.887 190.766 li
368.961 208.354 li
370.035 214.227 li
371.109 214.716 li
372.183 216.185 li
373.257 218.621 li
374.331 209.823 li
375.405 190.766 li
376.479 209.578 li
377.553 222.263 li
378.627 237.218 li
379.701 202.688 li
380.775 180.705 li
381.849 153.202 li
382.923 122.734 li
383.997 67.5518 li
385.071 70.2427 li
386.145 65.7407 li
387.219 74.4126 li
388.293 74.4126 li
389.367 128.45 li
390.441 145.313 li
391.515 156.853 li
392.589 185.5 li
393.663 200.466 li
394.737 208.599 li
395.811 210.312 li
396.885 211.046 li
397.959 205.154 li
399.033 199.468 li
400.107 196.248 li
401.181 208.844 li
402.255 224.689 li
403.329 242.483 li
404.403 233.372 li
405.477 224.689 li
406.551 213.738 li
407.625 167.453 li
408.699 131.963 li
409.773 135.193 li
410.847 147.428 li
411.921 139.47 li
412.995 152.674 li
414.069 159.192 li
415.143 183.739 li
416.217 217.154 li
417.291 228.077 li
418.365 237.698 li
419.439 231.932 li
420.513 233.851 li
421.587 238.412 li
422.661 239.371 li
423.735 241.524 li
424.809 246.78 li
425.883 259.592 li
426.957 261.481 li
428.031 265.963 li
429.105 268.558 li
430.179 266.443 li
431.253 259.357 li
432.327 244.392 li
433.401 236.014 li
434.475 230.484 li
435.549 197.49 li
436.623 201.699 li
437.697 193.761 li
438.771 187.008 li
439.845 193.761 li
440.919 230.005 li
441.993 258.173 li
443.067 276.554 li
444.141 278.658 li
445.215 289.424 li
446.289 298.997 li
447.363 302.726 li
448.437 306.689 li
449.511 310.879 li
450.585 309.714 li
451.659 304.595 li
452.733 315.302 li
453.807 320.186 li
454.881 328.565 li
455.955 320.421 li
457.029 304.125 li
458.103 302.491 li
459.177 288.494 li
460.251 270.437 li
461.325 253.436 li
462.399 250.588 li
463.473 250.108 li
464.547 247.964 li
465.621 251.292 li
466.695 259.357 li
467.769 279.598 li
468.843 299.231 li
469.917 311.338 li
470.991 321.117 li
472.065 329.495 li
473.139 337.187 li
474.213 341.151 li
475.287 345.585 li
476.361 348.384 li
477.435 351.888 li
478.509 344.176 li
479.583 343.011 li
480.657 339.977 li
481.731 329.729 li
482.805 320.657 li
483.879 308.079 li
484.953 272.091 li
486.027 222.987 li
487.101 199.468 li
488.175 222.263 li
489.249 203.92 li
490.323 221.293 li
491.397 244.392 li
492.471 256.753 li
493.545 269.262 li
494.619 275.615 li
495.693 279.363 li
496.767 284.286 li
497.841 292.469 li
498.915 298.302 li
499.989 298.066 li
501.063 298.762 li
502.137 298.997 li
503.211 299.927 li
504.285 302.491 li
505.359 305.985 li
506.433 312.043 li
507.507 312.503 li
508.581 310.644 li
509.655 306.22 li
510.729 290.129 li
511.803 233.616 li
512.877 228.556 li
513.951 262.196 li
515.025 259.592 li
516.099 269.497 li
517.173 275.849 li
518.247 282.172 li
519.321 298.066 li
520.395 312.278 li
521.469 322.976 li
522.543 332.293 li
523.617 340.681 li
524.691 347.68 li
525.765 353.063 li
526.839 357.506 li
527.913 361.724 li
528.987 365.013 li
530.061 367.597 li
531.135 371.13 li
532.209 373.49 li
533.283 363.838 li
534.357 351.184 li
535.431 337.187 li
536.505 319.022 li
537.579 302.256 li
538.653 268.087 li
539.727 259.357 li
540.801 265.024 li
541.875 268.792 li
542.949 273.03 li
544.023 286.86 li
545.097 298.997 li
546.171 299.231 li
547.245 302.726 li
548.319 302.96 li
549.393 304.36 li
550.467 308.079 li
551.541 315.763 li
552.615 316.928 li
553.689 315.763 li
554.763 315.302 li
555.837 314.598 li
556.911 314.833 li
557.985 313.903 li
559.059 311.338 li
560.133 301.561 li
561.207 283.112 li
562.281 272.326 li
563.355 277.954 li
564.429 277.259 li
565.503 281.712 li
566.577 279.598 li
567.651 276.554 li
568.725 280.067 li
569.799 284.521 li
570.873 295.268 li
571.947 308.784 li
573.021 317.632 li
574.095 324.845 li
575.169 331.128 li
576.243 337.187 li
577.317 342.776 li
578.391 349.314 li
579.465 354.227 li
580.539 358.916 li
581.613 364.074 li
582.687 367.362 li
583.761 371.13 li
584.835 369.251 li
585.909 358.446 li
586.983 344.411 li
588.057 330.424 li
589.131 313.903 li
590.205 308.314 li
591.279 309.949 li
592.354 320.657 li
593.427 317.632 li
594.501 326.235 li
595.575 336.483 li
596.649 340.681 li
597.723 341.376 li
598.797 344.645 li
599.871 348.149 li
600.945 352.828 li
602.02 357.037 li
603.093 362.195 li
604.167 365.248 li
605.241 365.953 li
606.315 368.067 li
607.389 370.661 li
608.463 372.08 li
609.537 368.067 li
610.611 363.604 li
611.686 354.698 li
612.759 350.723 li
613.833 346.75 li
614.907 322.516 li
615.981 318.092 li
617.055 302.031 li
618.129 292.233 li
619.203 293.163 li
620.277 302.491 li
621.352 313.903 li
622.425 326.94 li
623.499 334.624 li
624.573 335.083 li
625.647 332.754 li
626.721 333.458 li
627.795 332.754 li
628.869 330.424 li
629.943 328.33 li
631.018 329.035 li
632.091 327.634 li
633.165 327.634 li
634.239 330.894 li
635.313 334.388 li
636.387 331.589 li
637.461 317.632 li
638.535 302.256 li
639.609 230.005 li
640.684 197.49 li
641.757 194.75 li
642.831 199.468 li
643.905 227.587 li
644.979 243.198 li
646.053 258.887 li
647.127 262.665 li
648.201 268.792 li
649.275 274.91 li
650.35 276.554 li
651.423 281.242 li
652.497 286.391 li
653.571 288.494 li
654.646 291.059 li
655.719 290.599 li
656.793 291.059 li
657.867 298.066 li
658.941 302.726 li
660.015 304.82 li
661.089 305.76 li
662.163 304.36 li
663.237 303.89 li
664.312 297.832 li
665.385 300.866 li
666.459 304.36 li
667.533 309.244 li
668.607 309.949 li
669.682 311.114 li
670.755 312.043 li
671.829 312.043 li
672.903 322.046 li
673.978 331.589 li
675.051 344.645 li
676.125 357.272 li
677.199 360.09 li
678.273 367.362 li
679.347 369.721 li
680.421 368.312 li
681.495 369.017 li
682.569 371.6 li
683.643 375.613 li
684.717 379.401 li
685.791 377.267 li
686.865 383.659 li
687.939 377.502 li
689.013 375.378 li
690.087 372.55 li
691.161 370.426 li
692.235 375.143 li
693.31 375.378 li
694.383 367.833 li
695.457 366.658 li
696.531 369.957 li
697.605 370.191 li
698.679 369.486 li
699.753 368.312 li
700.827 367.597 li
701.901 368.546 li
702.975 368.782 li
704.049 369.957 li
705.123 370.426 li
706.197 370.191 li
707.271 373.254 li
708.345 380.105 li
709.419 384.373 li
710.493 386.751 li
711.567 390.793 li
712.641 391.273 li
713.715 391.273 li
714.789 386.272 li
715.863 371.13 li
716.938 350.723 li
718.011 325.071 li
719.085 334.154 li
720.159 332.754 li
721.233 340.212 li
722.307 341.151 li
723.381 341.376 li
724.455 352.358 li
725.529 368.312 li
726.604 380.82 li
727.677 391.988 li
728.751 399.162 li
729.825 405.171 li
730.899 411.456 li
731.973 415.576 li
733.047 419.226 li
734.121 422.163 li
735.195 424.61 li
736.27 427.066 li
737.343 429.033 li
738.417 431.5 li
739.491 431.5 li
740.565 419.47 li
741.639 403.244 li
742.713 319.022 li
743.787 334.388 li
744.861 356.332 li
745.936 338.812 li
747.009 348.854 li
748.083 353.063 li
749.157 358.446 li
750.231 369.957 li
751.305 380.105 li
752.379 385.323 li
753.453 385.802 li
754.527 384.608 li
755.602 382.474 li
756.675 384.853 li
757.749 384.373 li
758.823 382.954 li
759.897 380.82 li
760.971 380.585 li
762.045 376.083 li
763.119 374.194 li
764.193 373.019 li
765.268 371.835 li
766.341 361.254 li
767.415 356.567 li
768.489 350.019 li
769.563 341.846 li
770.637 318.562 li
771.711 322.046 li
772.785 320.657 li
773.859 324.845 li
774.934 317.397 li
776.007 324.375 li
777.081 339.047 li
778.155 353.063 li
779.229 363.134 li
780.303 362.9 li
781.377 365.013 li
782.451 369.017 li
783.525 367.362 li
784.6 366.188 li
785.673 370.895 li
786.747 373.019 li
787.821 373.49 li
788.896 373.724 li
789.969 376.083 li
791.043 376.328 li
792.117 359.621 li
793.191 329.729 li
794.266 312.973 li
795.339 291.294 li
796.413 285.686 li
797.487 298.527 li
798.562 300.631 li
799.635 304.595 li
800.709 311.808 li
801.783 324.611 li
802.857 343.716 li
803.932 359.621 li
805.005 371.366 li
806.079 381.29 li
807.153 388.18 li
808.228 394.141 li
809.301 399.162 li
810.375 403.723 li
811.449 408.068 li
812.523 410.241 li
813.597 411.456 li
814.671 414.851 li
815.745 416.554 li
816.819 414.607 li
817.893 403.967 li
818.967 334.624 li
820.041 260.776 li
821.115 238.412 li
822.189 243.433 li
823.264 264.085 li
824.337 273.735 li
825.411 285.216 li
826.485 297.832 li
827.56 321.117 li
828.633 338.812 li
829.707 354.932 li
830.781 366.892 li
831.855 376.798 li
832.929 384.608 li
834.003 391.273 li
835.077 397.009 li
836.151 401.56 li
837.225 405.896 li
838.299 408.792 li
839.373 411.456 li
840.447 413.148 li
841.521 414.607 li
842.595 413.392 li
843.669 402.763 li
844.743 361.02 li
845.817 305.985 li
846.891 277.954 li
847.965 274.675 li
849.039 287.095 li
850.113 296.198 li
851.188 302.491 li
852.261 316.692 li
853.335 337.187 li
854.409 352.123 li
855.483 365.013 li
856.557 376.083 li
857.631 384.373 li
858.705 389.844 li
859.779 394.375 li
860.854 398.682 li
861.927 403.008 li
863.001 406.14 li
864.075 404.692 li
865.149 403.967 li
866.223 403.967 li
867.297 406.621 li
868.371 407.344 li
869.445 394.611 li
870.52 379.401 li
871.593 369.957 li
872.667 312.738 li
873.741 296.432 li
874.815 289.189 li
875.889 305.524 li
876.963 305.524 li
878.037 314.833 li
879.111 332.293 li
880.186 346.281 li
881.259 360.09 li
882.333 368.782 li
883.407 375.613 li
884.481 379.401 li
885.555 385.802 li
886.629 389.844 li
887.703 388.416 li
888.777 391.273 li
889.851 394.611 li
890.925 394.611 li
891.999 399.162 li
893.073 398.927 li
894.147 396.529 li
895.221 389.365 li
896.295 350.723 li
897.369 315.538 li
898.443 288.494 li
899.518 282.877 li
900.591 283.346 li
901.665 300.631 li
902.739 306.22 li
903.813 310.879 li
904.887 331.364 li
905.961 347.68 li
907.035 357.272 li
908.109 361.959 li
909.184 365.718 li
910.257 362.429 li
911.331 361.02 li
912.405 360.315 li
913.479 359.621 li
914.553 360.786 li
915.627 358.916 li
916.701 358.681 li
917.775 363.604 li
918.85 368.067 li
919.923 371.366 li
920.997 367.833 li
922.071 361.254 li
923.146 356.801 li
924.219 314.598 li
925.293 309.019 li
926.367 312.278 li
927.441 318.092 li
928.515 321.351 li
929.589 335.083 li
930.663 357.976 li
931.737 379.401 li
932.812 394.375 li
933.885 404.926 li
934.959 410.731 li
936.033 418.012 li
937.107 425.842 li
938.182 428.544 li
939.255 426.333 li
940.329 430.511 li
941.403 436.452 li
942.477 440.436 li
943.551 442.432 li
944.625 434.221 li
945.699 433.477 li
946.773 410.731 li
947.848 361.02 li
948.921 273.5 li
949.995 258.408 li
951.069 291.529 li
952.143 305.76 li
953.217 323.916 li
954.291 319.727 li
955.365 318.327 li
956.439 343.951 li
957.513 359.386 li
958.587 366.188 li
959.661 369.957 li
960.735 369.957 li
961.81 373.254 li
962.883 376.562 li
963.957 377.982 li
965.031 381.525 li
966.105 383.423 li
967.179 386.272 li
968.253 388.65 li
969.327 389.365 li
970.401 392.947 li
971.475 394.856 li
972.549 392.703 li
973.623 365.483 li
974.697 307.854 li
975.771 298.762 li
976.846 273.97 li
977.919 299.702 li
978.993 315.302 li
980.067 327.634 li
981.141 337.882 li
982.215 357.272 li
983.289 374.194 li
984.363 386.272 li
985.438 396.529 li
986.511 405.171 li
987.585 412.423 li
988.659 418.747 li
989.733 424.365 li
990.807 428.544 li
991.881 432.743 li
992.955 436.208 li
994.029 439.692 li
995.104 442.188 li
996.177 444.938 li
997.251 444.693 li
998.325 437.206 li
999.399 387.466 li
1000.47 332.754 li
1001.55 308.784 li
1002.62 321.585 li
1003.7 318.327 li
1004.77 321.585 li
1005.84 328.799 li
1006.92 337.187 li
1007.99 360.55 li
1009.07 373.959 li
1010.14 380.105 li
1011.21 382.954 li
1012.29 382.719 li
1013.36 383.904 li
1014.44 389.13 li
1015.51 390.559 li
1016.58 388.895 li
1017.66 385.802 li
1018.73 385.087 li
1019.8 384.608 li
1020.88 382.239 li
1021.95 388.416 li
1023.03 386.751 li
1024.1 385.087 li
1025.17 382.954 li
1026.25 377.267 li
1027.32 374.438 li
1028.4 373.254 li
1029.47 375.378 li
1030.54 374.438 li
1031.62 376.798 li
1032.69 377.267 li
1033.77 378.686 li
1034.84 383.659 li
1035.92 386.987 li
1036.99 390.324 li
1038.06 393.417 li
1039.14 394.856 li
1040.21 397.968 li
1041.29 404.692 li
1042.36 410.965 li
1043.43 405.417 li
1044.51 404.926 li
1045.58 401.56 li
1046.66 403.488 li
1047.73 406.621 li
1048.8 409.762 li
1049.88 407.824 li
1050.95 401.325 li
1052.03 396.049 li
1053.1 392.467 li
1054.17 379.636 li
1055.25 378.216 li
1056.32 383.189 li
1057.4 376.083 li
1 0 0 rgb
@
73.6113 283.346 mo
74.6851 271.584 li
75.7593 264.801 li
76.833 260.375 li
77.9072 264.438 li
78.981 275.599 li
80.0552 286.887 li
81.1289 302.015 li
82.2031 322 li
83.2773 340.488 li
84.3511 356.84 li
85.4253 370.265 li
86.499 380.624 li
87.5732 387.956 li
88.647 394.296 li
89.7212 400.342 li
90.7949 404.051 li
91.8691 405.724 li
92.9429 401.836 li
94.0171 390.883 li
95.0913 376.426 li
96.165 357.252 li
97.2393 336.881 li
98.313 317.303 li
99.3872 301.037 li
100.461 293.432 li
101.535 290.532 li
102.609 291.738 li
103.683 296.152 li
104.757 298.529 li
105.831 300.008 li
106.905 302.926 li
107.979 307.261 li
109.053 310.012 li
110.127 310.859 li
111.201 308.144 li
112.275 303.678 li
113.349 299.422 li
114.423 296.187 li
115.497 293.222 li
116.571 290.691 li
117.645 290.697 li
118.719 292.81 li
119.793 294.464 li
120.867 291.815 li
121.941 280.132 li
123.015 266.57 li
124.089 250.427 li
125.163 236.432 li
126.237 220.538 li
127.311 202.767 li
128.385 199.732 li
129.459 204.919 li
130.533 213.452 li
131.607 225.757 li
132.681 237.316 li
133.755 248.916 li
134.829 259.543 li
135.903 267.144 li
136.977 273.823 li
138.051 281.257 li
139.125 289.663 li
140.199 299.883 li
141.273 310.185 li
142.347 319.171 li
143.421 326.448 li
144.495 332.567 li
145.569 337.306 li
146.643 339.299 li
147.717 340.57 li
148.791 329.919 li
149.865 314.541 li
150.939 297.182 li
152.013 274.522 li
153.087 258.1 li
154.161 252.674 li
155.235 254.122 li
156.309 257.752 li
157.383 263.917 li
158.457 275.439 li
159.531 290.495 li
160.605 303.088 li
161.679 312.972 li
162.753 321.498 li
163.827 327.969 li
164.901 333.458 li
165.975 336.883 li
167.049 336.702 li
168.123 332.419 li
169.197 325.958 li
170.271 318.936 li
171.345 310.139 li
172.419 297.769 li
173.493 285.414 li
174.567 275.366 li
175.641 267.782 li
176.715 260.993 li
177.789 252.819 li
178.863 243.145 li
179.937 234.511 li
181.011 228.167 li
182.085 223.196 li
183.159 219.269 li
184.233 216.851 li
185.307 215.116 li
186.381 212.55 li
187.455 212.387 li
188.529 215.422 li
189.603 216.172 li
190.677 214.438 li
191.751 211.195 li
192.825 207.884 li
193.899 205.055 li
194.973 204.658 li
196.047 207.025 li
197.121 211.069 li
198.195 213.043 li
199.269 202.842 li
200.343 195.386 li
201.417 191.068 li
202.491 180.45 li
203.565 169.976 li
204.639 160.436 li
205.713 150.705 li
206.787 144.927 li
207.861 148.722 li
208.935 156.532 li
210.009 168.852 li
211.083 183.884 li
212.157 198.872 li
213.231 211.81 li
214.305 222.598 li
215.379 230.983 li
216.453 237.007 li
217.527 242.387 li
218.601 246.959 li
219.675 248.634 li
220.749 247.388 li
221.823 245.444 li
222.897 242.036 li
223.971 231.601 li
225.045 216.498 li
226.119 203.367 li
227.193 195.875 li
228.267 190.902 li
229.341 188.149 li
230.415 186.403 li
231.489 185.636 li
232.563 181.469 li
233.637 177.113 li
234.711 178.836 li
235.785 182.923 li
236.859 186.957 li
237.933 190.063 li
239.007 190.591 li
240.081 189.709 li
241.155 188.456 li
242.229 187.505 li
243.303 186.169 li
244.377 184.596 li
245.451 183.582 li
246.525 183.475 li
247.599 185.163 li
248.673 184.308 li
249.747 180.515 li
250.821 168.875 li
251.895 156.607 li
252.969 148.199 li
254.043 141.001 li
255.117 134.438 li
256.191 128.816 li
257.265 124.619 li
258.339 122.513 li
259.413 123.34 li
260.487 128.168 li
261.561 137.736 li
262.635 149.949 li
263.709 160.815 li
264.783 170.744 li
265.857 179.853 li
266.931 188.614 li
268.005 193.515 li
269.079 195.056 li
270.153 195.972 li
271.227 198.387 li
272.301 202.323 li
273.375 206.125 li
274.449 206.626 li
275.523 201.572 li
276.597 183.272 li
277.671 152.528 li
278.745 122.229 li
279.819 100.324 li
280.893 83.2344 li
281.967 69.4502 li
283.041 62.2139 li
284.115 64.3711 li
285.189 71.7144 li
286.263 81.6211 li
287.337 99.1831 li
288.411 121.571 li
289.485 140.201 li
290.559 155.919 li
291.633 169.056 li
292.707 179.872 li
293.781 188.891 li
294.855 196.83 li
295.929 203.598 li
297.003 209.156 li
298.077 213.811 li
299.151 217.95 li
300.225 218.467 li
301.299 210.417 li
302.373 190.036 li
303.447 160.541 li
304.521 135.14 li
305.595 117.766 li
306.669 103.346 li
307.743 91.4805 li
308.817 88.228 li
309.891 92.5239 li
310.965 96.6367 li
312.039 103.36 li
313.113 116.004 li
314.187 133.823 li
315.261 150.014 li
316.335 162.337 li
317.409 172.221 li
318.483 180.799 li
319.557 187.639 li
320.631 193.374 li
321.705 197.711 li
322.779 201.467 li
323.853 205.445 li
324.927 208.482 li
326.001 209.107 li
327.075 203.152 li
328.149 186.859 li
329.223 166.89 li
330.297 147.045 li
331.371 128.32 li
332.445 113.351 li
333.519 102.714 li
334.593 101.199 li
335.667 107.891 li
336.741 116.458 li
337.815 125.706 li
338.889 136.823 li
339.963 147.882 li
341.037 160.826 li
342.111 175.396 li
343.185 188.874 li
344.259 201.232 li
345.333 212.502 li
346.407 222.573 li
347.481 230.946 li
348.555 237.601 li
349.629 243.137 li
350.703 247.944 li
351.777 248.146 li
352.851 239.614 li
353.925 220.189 li
354.999 195.704 li
356.073 170.44 li
357.147 148.208 li
358.221 134.814 li
359.295 129.459 li
360.369 129.836 li
361.443 133.282 li
362.517 137.091 li
363.591 144.362 li
364.665 153.982 li
365.739 166.493 li
366.813 181.205 li
367.887 195.778 li
368.961 207.523 li
370.035 215.345 li
371.109 220.685 li
372.183 227.552 li
373.257 236.577 li
374.331 244.896 li
375.405 251.65 li
376.479 257.86 li
377.553 262.074 li
378.627 257.455 li
379.701 241.249 li
380.775 218.021 li
381.849 195.615 li
382.923 174.176 li
383.997 161.078 li
385.071 153.856 li
386.145 146.677 li
387.219 147.697 li
388.293 155.235 li
389.367 167.104 li
390.441 182.264 li
391.515 198.824 li
392.589 215.621 li
393.663 230.963 li
394.737 244.052 li
395.811 254.839 li
396.885 263.338 li
397.959 269.621 li
399.033 273.853 li
400.107 276.262 li
401.181 277.314 li
402.255 277.851 li
403.329 277.809 li
404.403 274.422 li
405.477 268.362 li
406.551 255.851 li
407.625 238.946 li
408.699 221.468 li
409.773 205.953 li
410.847 193.997 li
411.921 190.181 li
412.995 194.367 li
414.069 199.505 li
415.143 206.545 li
416.217 214.707 li
417.291 225.227 li
418.365 232.126 li
419.439 236.043 li
420.513 240.703 li
421.587 245.156 li
422.661 249.104 li
423.735 252.671 li
424.809 258.018 li
425.883 265.425 li
426.957 270.924 li
428.031 275.203 li
429.105 278.091 li
430.179 278.531 li
431.253 273.086 li
432.327 262.903 li
433.401 247.415 li
434.475 229.769 li
435.549 214.478 li
436.623 204.276 li
437.697 202.942 li
438.771 210.2 li
439.845 227.043 li
440.919 248.348 li
441.993 269.075 li
443.067 286.02 li
444.141 299.246 li
445.215 311.906 li
446.289 322.613 li
447.363 330.058 li
448.437 335.115 li
449.511 338.091 li
450.585 339.289 li
451.659 340.533 li
452.733 343.271 li
453.807 348.153 li
454.881 351.601 li
455.955 349.316 li
457.029 339.254 li
458.103 331.167 li
459.177 325.613 li
460.251 315.006 li
461.325 298.25 li
462.399 289.411 li
463.473 287.257 li
464.547 286.496 li
465.621 289.438 li
466.695 297.097 li
467.769 311.291 li
468.843 326.37 li
469.917 340.109 li
470.991 352.537 li
472.065 364.292 li
473.139 374.172 li
474.213 381.628 li
475.287 388.462 li
476.361 394.021 li
477.435 394.89 li
478.509 391.505 li
479.583 386.917 li
480.657 379.656 li
481.731 368.461 li
482.805 352.103 li
483.879 330.818 li
484.953 309.249 li
486.027 287.368 li
487.101 266.258 li
488.175 250.952 li
489.249 245.663 li
490.323 246.942 li
491.397 248.878 li
492.471 252.294 li
493.545 255.262 li
494.619 257.345 li
495.693 261.414 li
496.767 267.305 li
497.841 274.789 li
498.915 282.896 li
499.989 290.218 li
501.063 296.593 li
502.137 301.57 li
503.211 306.48 li
504.285 310.672 li
505.359 314.819 li
506.433 320.04 li
507.507 323.25 li
508.581 324.57 li
509.655 323.572 li
510.729 313.846 li
511.803 297.607 li
512.877 290.595 li
513.951 291.302 li
515.025 294.176 li
516.099 296.543 li
517.173 302.033 li
518.247 312.216 li
519.321 325.558 li
520.395 339.472 li
521.469 352.822 li
522.543 365.884 li
523.617 377.556 li
524.691 387.277 li
525.765 395.274 li
526.839 402.03 li
527.913 407.039 li
528.987 410.509 li
530.061 414.042 li
531.135 418.364 li
532.209 417.849 li
533.283 408.812 li
534.357 392.892 li
535.431 373.814 li
536.505 354.638 li
537.579 334.138 li
538.653 314.689 li
539.727 297.625 li
540.801 284.055 li
541.875 280.991 li
542.949 280.981 li
544.023 283.69 li
545.097 287.432 li
546.171 293.899 li
547.245 300.691 li
548.319 305.849 li
549.393 307.831 li
550.467 309.81 li
551.541 315.411 li
552.615 320.519 li
553.689 323.207 li
554.763 324.822 li
555.837 325.494 li
556.911 325.343 li
557.985 324.063 li
559.059 319.446 li
560.133 311.287 li
561.207 303.573 li
562.281 298.496 li
563.355 295.994 li
564.429 295.205 li
565.503 296.555 li
566.577 296.632 li
567.651 296.987 li
568.725 299.292 li
569.799 303.95 li
570.873 311.63 li
571.947 320.409 li
573.021 328.542 li
574.095 336.314 li
575.169 343.917 li
576.243 351.255 li
577.317 359.641 li
578.391 368.003 li
579.465 375.494 li
580.539 382.777 li
581.613 389.257 li
582.687 395.195 li
583.761 399.246 li
584.835 397.84 li
585.909 391.158 li
586.983 380.245 li
588.057 365.648 li
589.131 348.614 li
590.205 338.808 li
591.279 338.248 li
592.354 339.246 li
593.427 339.79 li
594.501 341.001 li
595.575 344.532 li
596.649 349.775 li
597.723 355.193 li
598.797 360.521 li
599.871 363.881 li
600.945 364.246 li
602.02 363.398 li
603.093 362.845 li
604.167 362.576 li
605.241 362.658 li
606.315 363.305 li
607.389 364.569 li
608.463 366.05 li
609.537 367.132 li
610.611 364.266 li
611.686 357.073 li
612.759 347.885 li
613.833 338.661 li
614.907 330.972 li
615.981 324.664 li
617.055 317.88 li
618.129 312.982 li
619.203 311.257 li
620.277 312.017 li
621.352 316.027 li
622.425 321.376 li
623.499 324.971 li
624.573 326.991 li
625.647 327.819 li
626.721 328.406 li
627.795 328.303 li
628.869 328.447 li
629.943 329.51 li
631.018 330.165 li
632.091 329.91 li
633.165 330.943 li
634.239 333.458 li
635.313 335.444 li
636.387 332.946 li
637.461 319.811 li
638.535 298.433 li
639.609 274.343 li
640.684 251.131 li
641.757 233.366 li
642.831 225.746 li
643.905 227.61 li
644.979 233.919 li
646.053 240.263 li
647.127 246.742 li
648.201 253.055 li
649.275 257.902 li
650.35 263.347 li
651.423 269.9 li
652.497 276.043 li
653.571 278.993 li
654.646 280.896 li
655.719 283.863 li
656.793 289.128 li
657.867 296.151 li
658.941 301.589 li
660.015 305.548 li
661.089 308.083 li
662.163 309.417 li
663.237 310.172 li
664.312 311.229 li
665.385 314.555 li
666.459 320.224 li
667.533 326.118 li
668.607 331.532 li
669.682 335.854 li
670.755 338.142 li
671.829 341.585 li
672.903 347.56 li
673.978 354.149 li
675.051 361.114 li
676.125 367.463 li
677.199 373.78 li
678.273 381.411 li
679.347 387.459 li
680.421 391.058 li
681.495 393.923 li
682.569 396.013 li
683.643 397.542 li
684.717 398.471 li
685.791 401.015 li
686.865 402.886 li
687.939 403.028 li
689.013 402.561 li
690.087 400.292 li
691.161 396.751 li
692.235 393.221 li
693.31 389.525 li
694.383 384.978 li
695.457 380.998 li
696.531 379.48 li
697.605 379.565 li
698.679 380.542 li
699.753 381.81 li
700.827 383.558 li
701.901 385.326 li
702.975 386.764 li
704.049 387.546 li
705.123 388.451 li
706.197 390.906 li
707.271 394.906 li
708.345 399.01 li
709.419 401.871 li
710.493 405.486 li
711.567 408.946 li
712.641 411.117 li
713.715 410.95 li
714.789 407.341 li
715.863 396.554 li
716.938 380.797 li
718.011 369.988 li
719.085 367.03 li
720.159 365.546 li
721.233 350.567 li
722.307 340.794 li
723.381 350.146 li
724.455 363.051 li
725.529 378.882 li
726.604 394.669 li
727.677 408.123 li
728.751 418.739 li
729.825 427.636 li
730.899 435.345 li
731.973 440.889 li
733.047 442.814 li
734.121 444.627 li
735.195 448.019 li
736.27 450.967 li
737.343 452.2 li
738.417 451.135 li
739.491 444.828 li
740.565 434.518 li
741.639 417.928 li
742.713 399.527 li
743.787 388.544 li
744.861 375.88 li
745.936 359.775 li
747.009 350.88 li
748.083 350.875 li
749.157 354.718 li
750.231 358.604 li
751.305 361.539 li
752.379 361.372 li
753.453 358.914 li
754.527 356.284 li
755.602 355.261 li
756.675 356.115 li
757.749 356.533 li
758.823 355.736 li
759.897 354.98 li
760.971 353.334 li
762.045 353.184 li
763.119 354.609 li
764.193 354.9 li
765.268 353.415 li
766.341 348.806 li
767.415 342.114 li
768.489 330.807 li
769.563 320.136 li
770.637 313.674 li
771.711 309.039 li
772.785 305.077 li
773.859 302.03 li
774.934 299.659 li
776.007 303.917 li
777.081 314.646 li
778.155 329.011 li
779.229 341.182 li
780.303 349.655 li
781.377 355.965 li
782.451 361.126 li
783.525 364.588 li
784.6 368.339 li
785.673 372.245 li
786.747 375.538 li
787.821 378.135 li
788.896 380.244 li
789.969 382.818 li
791.043 381.302 li
792.117 370.712 li
793.191 355.291 li
794.266 339.452 li
795.339 325.905 li
796.413 317.538 li
797.487 312.129 li
798.562 307.877 li
799.635 306.975 li
800.709 311.576 li
801.783 322.291 li
802.857 338.284 li
803.932 356.298 li
805.005 372.934 li
806.079 387.501 li
807.153 399.532 li
808.228 409.407 li
809.301 418.118 li
810.375 425.949 li
811.449 430.908 li
812.523 432.46 li
813.597 433.762 li
814.671 436.116 li
815.745 436.114 li
816.819 430.558 li
817.893 414.918 li
818.967 385.229 li
820.041 351.378 li
821.115 323.45 li
822.189 300.354 li
823.264 284.148 li
824.337 276.053 li
825.411 280.97 li
826.485 295.045 li
827.56 312.959 li
828.633 335.89 li
829.707 356.48 li
830.781 374.749 li
831.855 390.637 li
832.929 403.143 li
834.003 413.272 li
835.077 421.911 li
836.151 429.202 li
837.225 433.95 li
838.299 437.106 li
839.373 437.165 li
840.447 435.542 li
841.521 434.195 li
842.595 428.317 li
843.669 411.894 li
844.743 387.576 li
845.817 362.678 li
846.891 341.798 li
847.965 325.295 li
849.039 311.548 li
850.113 303.418 li
851.188 304.923 li
852.261 312.456 li
853.335 324.032 li
854.409 340.736 li
855.483 359.861 li
856.557 376.59 li
857.631 387.914 li
858.705 395.865 li
859.779 402.277 li
860.854 408.412 li
861.927 412.31 li
863.001 412.43 li
864.075 410.546 li
865.149 408.933 li
866.223 409.042 li
867.297 410.296 li
868.371 405.564 li
869.445 392.023 li
870.52 371.589 li
871.593 350.634 li
872.667 333.379 li
873.741 318.375 li
874.815 305.733 li
875.889 297.06 li
876.963 297.427 li
878.037 303.925 li
879.111 313.897 li
880.186 329.122 li
881.259 346.103 li
882.333 360.606 li
883.407 370.047 li
884.481 378.624 li
885.555 387.667 li
886.629 389.359 li
887.703 390.011 li
888.777 393.808 li
889.851 396.473 li
890.925 398.694 li
891.999 398.532 li
893.073 396.637 li
894.147 391.662 li
895.221 379.151 li
896.295 361.285 li
897.369 341.964 li
898.443 324.589 li
899.518 309.898 li
900.591 297.515 li
901.665 287.926 li
902.739 285.908 li
903.813 291.695 li
904.887 301.404 li
905.961 312.793 li
907.035 321.967 li
908.109 328.768 li
909.184 333.062 li
910.257 335.567 li
911.331 337.624 li
912.405 337.278 li
913.479 336.248 li
914.553 336.165 li
915.627 335.616 li
916.701 337.605 li
917.775 343.273 li
918.85 348.25 li
919.923 351.96 li
920.997 353.939 li
922.071 354.106 li
923.146 348.931 li
924.219 340.551 li
925.293 332.869 li
926.367 322.795 li
927.441 316.317 li
928.515 320.799 li
929.589 332.853 li
930.663 350.612 li
931.737 371.619 li
932.812 391.798 li
933.885 408.493 li
934.959 421.31 li
936.033 432.307 li
937.107 442.374 li
938.182 448.919 li
939.255 452.712 li
940.329 457.87 li
941.403 463.358 li
942.477 467.325 li
943.551 466.545 li
944.625 463.578 li
945.699 453.233 li
946.773 430.313 li
947.848 403.74 li
948.921 378.879 li
949.995 358.995 li
951.069 342.531 li
952.143 328.949 li
953.217 318.181 li
954.291 313.649 li
955.365 317.825 li
956.439 324.543 li
957.513 332.134 li
958.587 338.238 li
959.661 343.83 li
960.735 347.01 li
961.81 351.618 li
962.883 360.273 li
963.957 368.752 li
965.031 376.041 li
966.105 382.602 li
967.179 388.012 li
968.253 392.56 li
969.327 396.483 li
970.401 399.706 li
971.475 401.346 li
972.549 397.771 li
973.623 379.407 li
974.697 357.973 li
975.771 336.333 li
976.846 326.707 li
977.919 329.483 li
978.993 331.525 li
980.067 335.903 li
981.141 346.748 li
982.215 362.927 li
983.289 381.553 li
984.363 400.482 li
985.438 418.012 li
986.511 433.076 li
987.585 445.76 li
988.659 456.144 li
989.733 464.352 li
990.807 470.909 li
991.881 476.384 li
992.955 481.263 li
994.029 485.153 li
995.104 488.224 li
996.177 489.974 li
997.251 487.716 li
998.325 472.387 li
999.399 440.705 li
1000.47 406.414 li
1001.55 383.795 li
1002.62 369.285 li
1003.7 353.974 li
1004.77 341.443 li
1005.84 338.259 li
1006.92 343.083 li
1007.99 351.462 li
1009.07 358.879 li
1010.14 363.959 li
1011.21 368.93 li
1012.29 374.612 li
1013.36 379.982 li
1014.44 382.167 li
1015.51 380.321 li
1016.58 377.583 li
1017.66 374.654 li
1018.73 372.014 li
1019.8 369.181 li
1020.88 368.179 li
1021.95 369.251 li
1023.03 369.203 li
1024.1 368.831 li
1025.17 367.277 li
1026.25 366.135 li
1027.32 367.278 li
1028.4 369.899 li
1029.47 371.626 li
1030.54 373.242 li
1031.62 375.293 li
1032.69 377.403 li
1033.77 380.288 li
1034.84 383.644 li
1035.92 387.283 li
1036.99 390.987 li
1038.06 395.325 li
1039.14 398.391 li
1040.21 403.01 li
1041.29 410.496 li
1042.36 413.525 li
1043.43 411.769 li
1044.51 408.767 li
1045.58 407.787 li
1046.66 409.743 li
1047.73 412.422 li
1048.8 414.237 li
1049.88 414.542 li
1050.95 413.021 li
1052.03 410.052 li
1053.1 406.106 li
1054.17 402.013 li
1055.25 400.75 li
1056.32 397.619 li
1057.4 395.014 li
0 0 1 rgb
@
73.6113 282.407 mo
74.6851 255.804 li
75.7593 268.322 li
76.833 269.497 li
77.9072 280.067 li
78.981 323.916 li
80.0552 339.047 li
81.1289 353.063 li
82.2031 393.181 li
83.2773 415.331 li
84.3511 425.098 li
85.4253 434.475 li
86.499 434.964 li
87.5732 438.694 li
88.647 433.976 li
89.7212 441.689 li
90.7949 443.685 li
91.8691 438.195 li
92.9429 430.267 li
94.0171 399.407 li
95.0913 371.6 li
96.165 345.585 li
97.2393 305.76 li
98.313 296.902 li
99.3872 278.188 li
100.461 281.478 li
101.535 304.125 li
102.609 310.184 li
103.683 335.083 li
104.757 333.458 li
105.831 327.634 li
106.905 331.824 li
107.979 340.447 li
109.053 348.62 li
110.127 341.612 li
111.201 336.718 li
112.275 317.632 li
113.349 313.208 li
114.423 310.644 li
115.497 311.808 li
116.571 308.314 li
117.645 310.409 li
118.719 320.881 li
119.793 324.845 li
120.867 321.351 li
121.941 295.033 li
123.015 250.588 li
124.089 250.108 li
125.163 214.716 li
126.237 220.559 li
127.311 175.889 li
128.385 184.992 li
129.459 240.565 li
130.533 249.873 li
131.607 277.954 li
132.681 294.563 li
133.755 299.927 li
134.829 313.443 li
135.903 316.928 li
136.977 315.302 li
138.051 322.281 li
139.125 333.918 li
140.199 344.411 li
141.273 364.074 li
142.347 370.426 li
143.421 372.08 li
144.495 375.378 li
145.569 376.328 li
146.643 374.194 li
147.717 365.483 li
148.791 363.134 li
149.865 300.866 li
150.939 297.127 li
152.013 253.201 li
153.087 241.045 li
154.161 257.458 li
155.235 292.693 li
156.309 307.15 li
157.383 324.14 li
158.457 340.917 li
159.531 378.216 li
160.605 395.09 li
161.679 397.723 li
162.753 405.651 li
163.827 409.762 li
164.901 413.148 li
165.975 418.992 li
167.049 411.935 li
168.123 401.081 li
169.197 386.037 li
170.271 380.585 li
171.345 375.848 li
172.419 352.828 li
173.493 338.118 li
174.567 331.128 li
175.641 334.154 li
176.715 335.318 li
177.789 329.964 li
178.863 313.443 li
179.937 307.385 li
181.011 309.949 li
182.085 310.879 li
183.159 312.278 li
184.233 312.738 li
185.307 317.397 li
186.381 319.257 li
187.455 317.397 li
188.529 339.282 li
189.603 338.586 li
190.677 332.754 li
191.751 324.375 li
192.825 323.211 li
193.899 320.421 li
194.973 321.117 li
196.047 325.775 li
197.121 351.888 li
198.195 351.888 li
199.269 343.716 li
200.343 291.764 li
201.417 327.166 li
202.491 286.625 li
203.565 290.364 li
204.639 273.03 li
205.713 274.675 li
206.787 257.703 li
207.861 292.693 li
208.935 316.232 li
210.009 340.212 li
211.083 369.017 li
212.157 388.895 li
213.231 401.081 li
214.305 406.375 li
215.379 412.423 li
216.453 412.904 li
217.527 414.851 li
218.601 419.96 li
219.675 419.716 li
220.749 413.148 li
221.823 406.865 li
222.897 410.965 li
223.971 384.853 li
225.045 357.741 li
226.119 327.87 li
227.193 340.917 li
228.267 344.176 li
229.341 351.888 li
230.415 356.332 li
231.489 352.358 li
232.563 356.097 li
233.637 335.788 li
234.711 352.828 li
235.785 370.661 li
236.859 376.328 li
237.933 382.474 li
239.007 377.502 li
240.081 371.13 li
241.155 369.486 li
242.229 369.017 li
243.303 370.191 li
244.377 366.658 li
245.451 363.604 li
246.525 368.782 li
247.599 371.835 li
248.673 380.585 li
249.747 365.953 li
250.821 353.993 li
251.895 306.689 li
252.969 311.338 li
254.043 314.598 li
255.117 308.784 li
256.191 305.29 li
257.265 302.491 li
258.339 315.067 li
259.413 317.397 li
260.487 333.918 li
261.561 345.116 li
262.635 377.502 li
263.709 387.935 li
264.783 389.609 li
265.857 402.529 li
266.931 408.068 li
268.005 415.82 li
269.079 398.682 li
270.153 394.375 li
271.227 399.641 li
272.301 407.344 li
273.375 418.747 li
274.449 414.117 li
275.523 396.294 li
276.597 365.483 li
277.671 312.973 li
278.745 232.168 li
279.819 237.698 li
280.893 230.005 li
281.967 227.832 li
283.041 228.312 li
284.115 253.436 li
285.189 283.816 li
286.263 301.795 li
287.337 325.541 li
288.411 373.724 li
289.485 388.416 li
290.559 397.244 li
291.633 403.008 li
292.707 407.344 li
293.781 411.456 li
294.855 414.851 li
295.929 419.47 li
297.003 418.747 li
298.077 422.163 li
299.151 425.098 li
300.225 424.12 li
301.299 403.967 li
302.373 357.037 li
303.447 293.163 li
304.521 252.251 li
305.595 257.224 li
306.669 256.753 li
307.743 247.729 li
308.817 245.341 li
309.891 296.667 li
310.965 296.432 li
312.039 306.22 li
313.113 319.952 li
314.187 361.02 li
315.261 382.954 li
316.335 385.323 li
317.409 385.567 li
318.483 388.18 li
319.557 391.988 li
320.631 389.609 li
321.705 395.334 li
322.779 393.181 li
323.853 397.244 li
324.927 397.244 li
326.001 399.886 li
327.075 380.105 li
328.149 350.958 li
329.223 291.294 li
330.297 272.326 li
331.371 248.209 li
332.445 243.198 li
333.519 238.892 li
334.593 249.158 li
335.667 284.286 li
336.741 304.595 li
337.815 312.503 li
338.889 327.166 li
339.963 339.517 li
341.037 349.089 li
342.111 375.613 li
343.185 384.138 li
344.259 395.815 li
345.333 400.122 li
346.407 406.14 li
347.481 407.58 li
348.555 412.904 li
349.629 411.21 li
350.703 413.148 li
351.777 408.314 li
352.851 384.373 li
353.925 336.953 li
354.999 280.067 li
356.073 252.251 li
357.147 234.575 li
358.221 221.049 li
359.295 246.301 li
360.369 247.964 li
361.443 282.407 li
362.517 273.735 li
363.591 287.32 li
364.665 302.726 li
365.739 319.727 li
366.813 343.481 li
367.887 356.332 li
368.961 364.779 li
370.035 360.786 li
371.109 349.314 li
372.183 356.801 li
373.257 371.13 li
374.331 379.871 li
375.405 380.341 li
376.479 381.525 li
377.553 384.138 li
378.627 370.661 li
379.701 327.4 li
380.775 262.665 li
381.849 234.096 li
382.923 225.414 li
383.997 196.248 li
385.071 227.107 li
386.145 211.535 li
387.219 222.018 li
388.293 248.923 li
389.367 270.917 li
390.441 293.163 li
391.515 317.632 li
392.589 331.824 li
393.663 345.585 li
394.737 350.723 li
395.811 352.123 li
396.885 353.063 li
397.959 351.418 li
399.033 347.68 li
400.107 342.776 li
401.181 335.553 li
402.255 331.128 li
403.329 331.824 li
404.403 322.976 li
405.477 297.362 li
406.551 280.067 li
407.625 235.779 li
408.699 215.206 li
409.773 195.249 li
410.847 193.761 li
411.921 190.258 li
412.995 225.894 li
414.069 230.963 li
415.143 246.78 li
416.217 256.519 li
417.291 273.03 li
418.365 285.92 li
419.439 270.681 li
420.513 277.493 li
421.587 281.478 li
422.661 285.451 li
423.735 284.755 li
424.809 290.129 li
425.883 312.503 li
426.957 312.738 li
428.031 312.973 li
429.105 312.738 li
430.179 308.549 li
431.253 298.997 li
432.327 270.437 li
433.401 248.444 li
434.475 213.004 li
435.549 207.611 li
436.623 189.514 li
437.697 209.578 li
438.771 237.698 li
439.845 276.319 li
440.919 326.94 li
441.993 346.75 li
443.067 361.02 li
444.141 358.916 li
445.215 369.486 li
446.289 379.401 li
447.363 378.452 li
448.437 376.562 li
449.511 374.438 li
450.585 369.957 li
451.659 367.833 li
452.733 376.798 li
453.807 379.157 li
454.881 392.947 li
455.955 374.909 li
457.029 360.09 li
458.103 322.046 li
459.177 339.282 li
460.251 321.585 li
461.325 298.527 li
462.399 260.776 li
463.473 310.879 li
464.547 302.96 li
465.621 317.397 li
466.695 328.799 li
467.769 363.369 li
468.843 389.844 li
469.917 401.081 li
470.991 411.21 li
472.065 418.992 li
473.139 428.299 li
474.213 428.299 li
475.287 431.5 li
476.361 430.267 li
477.435 431.5 li
478.509 408.792 li
479.583 403.488 li
480.657 391.039 li
481.731 374.673 li
482.805 345.81 li
483.879 313.208 li
484.953 278.893 li
486.027 262.665 li
487.101 234.331 li
488.175 227.352 li
489.249 237.932 li
490.323 269.732 li
491.397 277.954 li
492.471 282.877 li
493.545 290.599 li
494.619 288.26 li
495.693 290.364 li
496.767 305.29 li
497.841 315.763 li
498.915 329.495 li
499.989 334.624 li
501.063 341.846 li
502.137 340.681 li
503.211 341.846 li
504.285 347.219 li
505.359 346.515 li
506.433 361.02 li
507.507 360.315 li
508.581 356.097 li
509.655 351.654 li
510.729 334.624 li
511.803 283.816 li
512.877 276.789 li
513.951 310.644 li
515.025 324.14 li
516.099 332.059 li
517.173 328.565 li
518.247 354.698 li
519.321 378.216 li
520.395 399.641 li
521.469 411.7 li
522.543 423.875 li
523.617 435.708 li
524.691 438.694 li
525.765 442.188 li
526.839 446.445 li
527.913 446.7 li
528.987 448.716 li
530.061 447.199 li
531.135 454.275 li
532.209 454.53 li
533.283 427.311 li
534.357 388.65 li
535.431 356.332 li
536.505 332.293 li
537.579 312.503 li
538.653 271.855 li
539.727 293.398 li
540.801 260.542 li
541.875 287.79 li
542.949 299.231 li
544.023 312.738 li
545.097 320.421 li
546.171 326.47 li
547.245 345.35 li
548.319 347.219 li
549.393 346.985 li
550.467 335.553 li
551.541 349.785 li
552.615 362.195 li
553.689 358.446 li
554.763 355.402 li
555.837 354.932 li
556.911 353.523 li
557.985 342.082 li
559.059 339.751 li
560.133 319.727 li
561.207 306.689 li
562.281 301.561 li
563.355 315.067 li
564.429 313.668 li
565.503 325.305 li
566.577 324.611 li
567.651 320.421 li
568.725 329.495 li
569.799 334.624 li
570.873 350.958 li
571.947 367.597 li
573.021 375.613 li
574.095 379.157 li
575.169 388.65 li
576.243 393.662 li
577.317 403.723 li
578.391 415.576 li
579.465 419.47 li
580.539 425.588 li
581.613 433.976 li
582.687 435.708 li
583.761 440.69 li
584.835 429.279 li
585.909 409.762 li
586.983 384.853 li
588.057 362.429 li
589.131 332.059 li
590.205 321.117 li
591.279 353.063 li
592.354 365.013 li
593.427 368.312 li
594.501 366.423 li
595.575 374.909 li
596.649 385.567 li
597.723 394.375 li
598.797 397.488 li
599.871 402.285 li
600.945 394.375 li
602.02 387.935 li
603.093 384.853 li
604.167 387.701 li
605.241 388.18 li
606.315 388.895 li
607.389 392.232 li
608.463 394.375 li
609.537 396.294 li
610.611 394.375 li
611.686 376.328 li
612.759 350.253 li
613.833 345.35 li
614.907 335.318 li
615.981 337.187 li
617.055 326.47 li
618.129 321.351 li
619.203 326.94 li
620.277 336.483 li
621.352 344.88 li
622.425 359.621 li
623.499 361.724 li
624.573 360.315 li
625.647 354.227 li
626.721 355.167 li
627.795 356.332 li
628.869 352.828 li
629.943 354.227 li
631.018 358.916 li
632.091 355.167 li
633.165 355.167 li
634.239 361.254 li
635.313 368.782 li
636.387 360.786 li
637.461 336.718 li
638.535 282.172 li
639.609 244.392 li
640.684 215.206 li
641.757 202.199 li
642.831 213.493 li
643.905 243.433 li
644.979 270.917 li
646.053 281.712 li
647.127 287.095 li
648.201 295.268 li
649.275 301.561 li
650.35 300.631 li
651.423 308.314 li
652.497 318.327 li
653.571 313.903 li
654.646 310.879 li
655.719 312.503 li
656.793 321.117 li
657.867 340.212 li
658.941 343.951 li
660.015 342.551 li
661.089 342.082 li
662.163 339.047 li
663.237 339.047 li
664.312 334.624 li
665.385 342.551 li
666.459 358.211 li
667.533 366.423 li
668.607 369.721 li
669.682 373.959 li
670.755 373.49 li
671.829 371.6 li
672.903 387.935 li
673.978 393.181 li
675.051 403.008 li
676.125 409.997 li
677.199 413.638 li
678.273 422.897 li
679.347 432 li
680.421 427.555 li
681.495 428.299 li
682.569 427.555 li
683.643 427.8 li
684.717 426.333 li
685.791 425.343 li
686.865 436.452 li
687.939 433.232 li
689.013 427.8 li
690.087 426.333 li
691.161 412.668 li
692.235 408.548 li
693.31 407.58 li
694.383 400.122 li
695.457 393.417 li
696.531 397.244 li
697.605 403.723 li
698.679 405.896 li
699.753 409.517 li
700.827 411.456 li
701.901 415.576 li
702.975 415.82 li
704.049 417.279 li
705.123 416.799 li
706.197 417.524 li
707.271 422.652 li
708.345 433.976 li
709.419 432.743 li
710.493 437.451 li
711.567 443.685 li
712.641 443.685 li
713.715 441.189 li
714.789 429.033 li
715.863 408.314 li
716.938 390.559 li
718.011 354.462 li
719.085 378.921 li
720.159 383.423 li
721.233 377.502 li
722.307 298.302 li
723.381 381.77 li
724.455 412.668 li
725.529 440.436 li
726.604 459.365 li
727.677 472 li
728.751 474.339 li
729.825 476.699 li
730.899 481.69 li
731.973 484.068 li
733.047 479.586 li
734.121 471.736 li
735.195 481.426 li
736.27 484.607 li
737.343 483.804 li
738.417 477.746 li
739.491 466.04 li
740.565 440.69 li
741.639 419.47 li
742.713 364.309 li
743.787 375.848 li
744.861 381.525 li
745.936 342.776 li
747.009 340.212 li
748.083 360.786 li
749.157 387.935 li
750.231 393.662 li
751.305 396.763 li
752.379 392.703 li
753.453 381.525 li
754.527 371.6 li
755.602 374.438 li
756.675 381.525 li
757.749 384.853 li
758.823 379.636 li
759.897 377.737 li
760.971 379.636 li
762.045 373.49 li
763.119 383.904 li
764.193 380.341 li
765.268 379.871 li
766.341 365.953 li
767.415 355.873 li
768.489 342.316 li
769.563 307.619 li
770.637 313.443 li
771.711 324.375 li
772.785 319.492 li
773.859 326.706 li
774.934 312.043 li
776.007 324.375 li
777.081 358.681 li
778.155 385.802 li
779.229 405.171 li
780.303 400.601 li
781.377 397.244 li
782.451 403.488 li
783.525 402.529 li
784.6 397.488 li
785.673 406.865 li
786.747 409.272 li
787.821 411.21 li
788.896 411.21 li
789.969 413.392 li
791.043 414.607 li
792.117 387.221 li
793.191 344.88 li
794.266 327.4 li
795.339 311.338 li
796.413 311.573 li
797.487 326.47 li
798.562 319.257 li
799.635 323.916 li
800.709 336.953 li
801.783 360.786 li
802.857 395.57 li
803.932 424.12 li
805.005 443.186 li
806.079 451.74 li
807.153 460.393 li
808.228 461.411 li
809.301 466.04 li
810.375 472.254 li
811.449 473.821 li
812.523 466.558 li
813.597 460.393 li
814.671 470.699 li
815.745 465.531 li
816.819 454.275 li
817.893 420.939 li
818.967 367.833 li
820.041 285.216 li
821.115 273.5 li
822.189 258.887 li
823.264 254.855 li
824.337 275.379 li
825.411 291.529 li
826.485 347.68 li
827.56 369.251 li
828.633 414.607 li
829.707 438.195 li
830.781 447.199 li
831.855 460.393 li
832.929 463.985 li
834.003 467.586 li
835.077 470.435 li
836.151 474.339 li
837.225 475.652 li
838.299 469.662 li
839.373 471.736 li
840.447 458.347 li
841.521 456.311 li
842.595 451.74 li
843.669 417.524 li
844.743 361.254 li
845.817 326.235 li
846.891 305.76 li
847.965 304.82 li
849.039 298.762 li
850.113 296.902 li
851.188 315.998 li
852.261 349.314 li
853.335 366.188 li
854.409 399.162 li
855.483 431.5 li
856.557 449.724 li
857.631 451.486 li
858.705 443.441 li
859.779 444.693 li
860.854 448.716 li
861.927 451.486 li
863.001 450.732 li
864.075 432.489 li
865.149 430.267 li
866.223 429.279 li
867.297 438.694 li
868.371 436.952 li
869.445 395.334 li
870.52 356.567 li
871.593 320.186 li
872.667 311.808 li
873.741 302.96 li
874.815 295.963 li
875.889 292.693 li
876.963 303.196 li
878.037 340.212 li
879.111 358.446 li
880.186 380.105 li
881.259 413.638 li
882.333 427.066 li
883.407 429.533 li
884.481 421.673 li
885.555 437.206 li
886.629 436.952 li
887.703 407.58 li
888.777 425.098 li
889.851 432.988 li
890.925 423.386 li
891.999 436.452 li
893.073 415.576 li
894.147 415.576 li
895.221 383.423 li
896.295 352.358 li
897.369 319.727 li
898.443 303.431 li
899.518 294.103 li
900.591 289.424 li
901.665 284.521 li
902.739 285.686 li
903.813 322.516 li
904.887 344.411 li
905.961 366.423 li
907.035 373.959 li
908.109 374.673 li
909.184 376.798 li
910.257 366.423 li
911.331 368.782 li
912.405 369.486 li
913.479 357.741 li
914.553 359.855 li
915.627 359.621 li
916.701 359.15 li
917.775 383.423 li
918.85 387.221 li
919.923 388.416 li
920.997 386.037 li
922.071 379.636 li
923.146 384.138 li
924.219 346.985 li
925.293 337.413 li
926.367 329.964 li
927.441 313.443 li
928.515 337.882 li
929.589 378.216 li
930.663 409.762 li
931.737 445.691 li
932.812 469.407 li
933.885 481.955 li
934.959 484.333 li
936.033 484.333 li
937.107 495.569 li
938.182 497.742 li
939.255 488.59 li
940.329 492.339 li
941.403 503.183 li
942.477 504.28 li
943.551 503.183 li
944.625 483.804 li
945.699 476.169 li
946.773 411.21 li
947.848 369.017 li
948.921 336.953 li
949.995 326.94 li
951.069 323.916 li
952.143 313.903 li
953.217 311.114 li
954.291 309.714 li
955.365 346.75 li
956.439 363.134 li
957.513 377.737 li
958.587 380.82 li
959.661 380.105 li
960.735 386.987 li
961.81 382.004 li
962.883 404.692 li
963.957 416.309 li
965.031 418.992 li
966.105 426.087 li
967.179 428.544 li
968.253 430.267 li
969.327 432.489 li
970.401 434.221 li
971.475 433.731 li
972.549 427.311 li
973.623 386.987 li
974.697 324.14 li
975.771 328.799 li
976.846 283.581 li
977.919 343.246 li
978.993 369.017 li
980.067 360.09 li
981.141 387.466 li
982.215 418.257 li
983.289 451.995 li
984.363 473.038 li
985.438 489.931 li
986.511 500.453 li
987.585 505.102 li
988.659 510.622 li
989.733 513.127 li
990.807 514.801 li
991.881 516.475 li
992.955 519.578 li
994.029 521.838 li
995.104 521.554 li
996.177 523.826 li
997.251 517.316 li
998.325 490.459 li
999.399 409.997 li
1000.47 343.481 li
1001.55 327.166 li
1002.62 355.873 li
1003.7 341.846 li
1004.77 328.105 li
1005.84 336.023 li
1006.92 373.959 li
1007.99 390.324 li
1009.07 406.14 li
1010.14 403.723 li
1011.21 406.375 li
1012.29 411.935 li
1013.36 420.205 li
1014.44 423.63 li
1015.51 404.448 li
1016.58 396.763 li
1017.66 393.417 li
1018.73 390.559 li
1019.8 389.13 li
1020.88 379.871 li
1021.95 399.162 li
1023.03 395.815 li
1024.1 394.611 li
1025.17 391.039 li
1026.25 388.416 li
1027.32 387.701 li
1028.4 399.641 li
1029.47 403.008 li
1030.54 401.804 li
1031.62 407.099 li
1032.69 406.375 li
1033.77 411.456 li
1034.84 416.309 li
1035.92 421.429 li
1036.99 425.842 li
1038.06 427.555 li
1039.14 435.963 li
1040.21 432.489 li
1041.29 452.503 li
1042.36 457.837 li
1043.43 436.708 li
1044.51 430.022 li
1045.58 423.386 li
1046.66 435.463 li
1047.73 444.439 li
1048.8 445.947 li
1049.88 443.186 li
1050.95 438.195 li
1052.03 430.022 li
1053.1 429.777 li
1054.17 413.638 li
1055.25 414.607 li
1056.32 423.875 li
1057.4 409.517 li
0 1 0 rgb
@
1.25025 lw
2 lj
[7.5 4.5 ] 0 dsh
73.6113 292.206 mo
74.6851 274.888 li
75.7593 283.037 li
76.833 283.802 li
77.9072 290.684 li
78.981 319.229 li
80.0552 329.079 li
81.1289 338.204 li
82.2031 364.321 li
83.2773 378.74 li
84.3511 385.099 li
85.4253 391.203 li
86.499 391.521 li
87.5732 393.949 li
88.647 390.877 li
89.7212 395.899 li
90.7949 397.199 li
91.8691 393.625 li
92.9429 388.463 li
94.0171 368.373 li
95.0913 350.271 li
96.165 333.335 li
97.2393 307.409 li
98.313 301.643 li
99.3872 289.46 li
100.461 291.601 li
101.535 306.345 li
102.609 310.29 li
103.683 326.499 li
104.757 325.441 li
105.831 321.65 li
106.905 324.376 li
107.979 329.991 li
109.053 335.311 li
110.127 330.749 li
111.201 327.563 li
112.275 315.138 li
113.349 312.258 li
114.423 310.588 li
115.497 311.347 li
116.571 309.072 li
117.645 310.436 li
118.719 317.253 li
119.793 319.833 li
120.867 317.559 li
121.941 300.425 li
123.015 271.492 li
124.089 271.18 li
125.163 248.14 li
126.237 251.944 li
127.311 222.863 li
128.385 228.789 li
129.459 264.968 li
130.533 271.027 li
131.607 289.307 li
132.681 300.12 li
133.755 303.611 li
134.829 312.411 li
135.903 314.679 li
136.977 313.622 li
138.051 318.165 li
139.125 325.74 li
140.199 332.571 li
141.273 345.372 li
142.347 349.507 li
143.421 350.583 li
144.495 352.731 li
145.569 353.349 li
146.643 351.96 li
147.717 346.289 li
148.791 344.76 li
149.865 304.223 li
150.939 301.789 li
152.013 273.193 li
153.087 265.28 li
154.161 275.965 li
155.235 298.903 li
156.309 308.314 li
157.383 319.375 li
158.457 330.296 li
159.531 354.579 li
160.605 365.564 li
161.679 367.277 li
162.753 372.438 li
163.827 375.114 li
164.901 377.319 li
165.975 381.123 li
167.049 376.529 li
168.123 369.462 li
169.197 359.669 li
170.271 356.121 li
171.345 353.037 li
172.419 338.05 li
173.493 328.474 li
174.567 323.924 li
175.641 325.893 li
176.715 326.651 li
177.789 323.167 li
178.863 312.411 li
179.937 308.467 li
181.011 310.136 li
182.085 310.742 li
183.159 311.653 li
184.233 311.952 li
185.307 314.985 li
186.381 316.196 li
187.455 314.985 li
188.529 329.232 li
189.603 328.78 li
190.677 324.982 li
191.751 319.528 li
192.825 318.77 li
193.899 316.954 li
194.973 317.406 li
196.047 320.439 li
197.121 337.439 li
198.195 337.439 li
199.269 332.118 li
200.343 298.297 li
201.417 321.343 li
202.491 294.953 li
203.565 297.386 li
204.639 286.102 li
205.713 287.173 li
206.787 276.124 li
207.861 298.903 li
208.935 314.227 li
210.009 329.837 li
211.083 348.589 li
212.157 361.53 li
213.231 369.462 li
214.305 372.91 li
215.379 376.847 li
216.453 377.16 li
217.527 378.427 li
218.601 381.753 li
219.675 381.594 li
220.749 377.319 li
221.823 373.229 li
222.897 375.898 li
223.971 358.898 li
225.045 341.25 li
226.119 321.802 li
227.193 330.296 li
228.267 332.418 li
229.341 337.439 li
230.415 340.332 li
231.489 337.745 li
232.563 340.178 li
233.637 326.958 li
234.711 338.05 li
235.785 349.66 li
236.859 353.349 li
237.933 357.35 li
239.007 354.114 li
240.081 349.965 li
241.155 348.895 li
242.229 348.589 li
243.303 349.354 li
244.377 347.053 li
245.451 345.065 li
246.525 348.437 li
247.599 350.424 li
248.673 356.121 li
249.747 346.594 li
250.821 338.809 li
251.895 308.015 li
252.969 311.041 li
254.043 313.163 li
255.117 309.378 li
256.191 307.104 li
257.265 305.281 li
258.339 313.469 li
259.413 314.985 li
260.487 325.74 li
261.561 333.03 li
262.635 354.114 li
263.709 360.906 li
264.783 361.996 li
265.857 370.406 li
266.931 374.012 li
268.005 379.058 li
269.079 367.902 li
270.153 365.098 li
271.227 368.526 li
272.301 373.541 li
273.375 380.963 li
274.449 377.95 li
275.523 366.347 li
276.597 346.289 li
277.671 312.105 li
278.745 259.5 li
279.819 263.1 li
280.893 258.092 li
281.967 256.678 li
283.041 256.99 li
284.115 273.346 li
285.189 293.124 li
286.263 304.829 li
287.337 320.286 li
288.411 351.654 li
289.485 361.218 li
290.559 366.965 li
291.633 370.718 li
292.707 373.541 li
293.781 376.216 li
294.855 378.427 li
295.929 381.435 li
297.003 380.963 li
298.077 383.187 li
299.151 385.099 li
300.225 384.461 li
301.299 371.342 li
302.373 340.791 li
303.447 299.209 li
304.521 272.575 li
305.595 275.812 li
306.669 275.506 li
307.743 269.631 li
308.817 268.076 li
309.891 301.49 li
310.965 301.336 li
312.039 307.708 li
313.113 316.648 li
314.187 343.384 li
315.261 357.663 li
316.335 359.205 li
317.409 359.364 li
318.483 361.065 li
319.557 363.543 li
320.631 361.996 li
321.705 365.722 li
322.779 364.321 li
323.853 366.965 li
324.927 366.965 li
326.001 368.685 li
327.075 355.808 li
328.149 336.833 li
329.223 297.992 li
330.297 285.644 li
331.371 269.944 li
332.445 266.681 li
333.519 263.878 li
334.593 270.562 li
335.667 293.429 li
336.741 306.651 li
337.815 311.799 li
338.889 321.343 li
339.963 329.385 li
341.037 335.616 li
342.111 352.883 li
343.185 358.433 li
344.259 366.035 li
345.333 368.838 li
346.407 372.757 li
347.481 373.694 li
348.555 377.16 li
349.629 376.058 li
350.703 377.319 li
351.777 374.171 li
352.851 358.586 li
353.925 327.715 li
354.999 290.684 li
356.073 272.575 li
357.147 261.067 li
358.221 252.262 li
359.295 268.701 li
360.369 269.784 li
361.443 292.206 li
362.517 286.561 li
363.591 295.405 li
364.665 305.434 li
365.739 316.501 li
366.813 331.965 li
367.887 340.332 li
368.961 345.831 li
370.035 343.231 li
371.109 335.763 li
372.183 340.637 li
373.257 349.965 li
374.331 355.656 li
375.405 355.961 li
376.479 356.732 li
377.553 358.433 li
378.627 349.66 li
379.701 321.497 li
380.775 279.355 li
381.849 260.755 li
382.923 255.104 li
383.997 236.117 li
385.071 256.206 li
386.145 246.069 li
387.219 252.894 li
388.293 270.409 li
389.367 284.726 li
390.441 299.209 li
391.515 315.138 li
392.589 324.376 li
393.663 333.335 li
394.737 336.68 li
395.811 337.591 li
396.885 338.204 li
397.959 337.132 li
399.033 334.699 li
400.107 331.506 li
401.181 326.804 li
402.255 323.924 li
403.329 324.376 li
404.403 318.617 li
405.477 301.942 li
406.551 290.684 li
407.625 261.851 li
408.699 248.458 li
409.773 235.466 li
410.847 234.498 li
411.921 232.216 li
412.995 255.417 li
414.069 258.716 li
415.143 269.013 li
416.217 275.353 li
417.291 286.102 li
418.365 294.494 li
419.439 284.573 li
420.513 289.007 li
421.587 291.601 li
422.661 294.188 li
423.735 293.735 li
424.809 297.233 li
425.883 311.799 li
426.957 311.952 li
428.031 312.105 li
429.105 311.952 li
430.179 309.225 li
431.253 303.006 li
432.327 284.414 li
433.401 270.097 li
434.475 247.024 li
435.549 243.514 li
436.623 231.733 li
437.697 244.795 li
438.771 263.1 li
439.845 288.243 li
440.919 321.198 li
441.993 334.093 li
443.067 343.384 li
444.141 342.013 li
445.215 348.895 li
446.289 355.349 li
447.363 354.731 li
448.437 353.501 li
449.511 352.119 li
450.585 349.201 li
451.659 347.818 li
452.733 353.654 li
453.807 355.19 li
454.881 364.167 li
455.955 352.425 li
457.029 342.778 li
458.103 318.011 li
459.177 329.232 li
460.251 317.712 li
461.325 302.7 li
462.399 278.125 li
463.473 310.742 li
464.547 305.587 li
465.621 314.985 li
466.695 322.408 li
467.769 344.913 li
468.843 362.148 li
469.917 369.462 li
470.991 376.058 li
472.065 381.123 li
473.139 387.182 li
474.213 387.182 li
475.287 389.266 li
476.361 388.463 li
477.435 389.266 li
478.509 374.483 li
479.583 371.031 li
480.657 362.925 li
481.731 352.272 li
482.805 333.482 li
483.879 312.258 li
484.953 289.918 li
486.027 279.355 li
487.101 260.909 li
488.175 256.366 li
489.249 263.253 li
490.323 283.955 li
491.397 289.307 li
492.471 292.512 li
493.545 297.54 li
494.619 296.016 li
495.693 297.386 li
496.767 307.104 li
497.841 313.921 li
498.915 322.86 li
499.989 326.199 li
501.063 330.902 li
502.137 330.143 li
503.211 330.902 li
504.285 334.4 li
505.359 333.941 li
506.433 343.384 li
507.507 342.925 li
508.581 340.178 li
509.655 337.286 li
510.729 326.199 li
511.803 293.124 li
512.877 288.549 li
513.951 310.588 li
515.025 319.375 li
516.099 324.53 li
517.173 322.254 li
518.247 339.267 li
519.321 354.579 li
520.395 368.526 li
521.469 376.376 li
522.543 384.302 li
523.617 392.005 li
524.691 393.949 li
525.765 396.223 li
526.839 398.996 li
527.913 399.162 li
528.987 400.474 li
530.061 399.486 li
531.135 404.092 li
532.209 404.258 li
533.283 386.539 li
534.357 361.371 li
535.431 340.332 li
536.505 324.682 li
537.579 311.799 li
538.653 285.337 li
539.727 299.362 li
540.801 277.972 li
541.875 295.711 li
542.949 303.159 li
544.023 311.952 li
545.097 316.954 li
546.171 320.891 li
547.245 333.182 li
548.319 334.4 li
549.393 334.247 li
550.467 326.804 li
551.541 336.069 li
552.615 344.148 li
553.689 341.708 li
554.763 339.726 li
555.837 339.42 li
556.911 338.502 li
557.985 331.054 li
559.059 329.538 li
560.133 316.501 li
561.207 308.015 li
562.281 304.676 li
563.355 313.469 li
564.429 312.557 li
565.503 320.133 li
566.577 319.681 li
567.651 316.954 li
568.725 322.86 li
569.799 326.199 li
570.873 336.833 li
571.947 347.666 li
573.021 352.883 li
574.095 355.19 li
575.169 361.371 li
576.243 364.632 li
577.317 371.183 li
578.391 378.899 li
579.465 381.435 li
580.539 385.417 li
581.613 390.877 li
582.687 392.005 li
583.761 395.249 li
584.835 387.82 li
585.909 375.114 li
586.983 358.898 li
588.057 344.301 li
589.131 324.53 li
590.205 317.406 li
591.279 338.204 li
592.354 345.983 li
593.427 348.13 li
594.501 346.901 li
595.575 352.425 li
596.649 359.364 li
597.723 365.098 li
598.797 367.125 li
599.871 370.247 li
600.945 365.098 li
602.02 360.906 li
603.093 358.898 li
604.167 360.752 li
605.241 361.065 li
606.315 361.53 li
607.389 363.703 li
608.463 365.098 li
609.537 366.347 li
610.611 365.098 li
611.686 353.349 li
612.759 336.375 li
613.833 333.182 li
614.907 326.651 li
615.981 327.869 li
617.055 320.891 li
618.129 317.559 li
619.203 321.198 li
620.277 327.41 li
621.352 332.876 li
622.425 342.472 li
623.499 343.842 li
624.573 342.925 li
625.647 338.961 li
626.721 339.573 li
627.795 340.332 li
628.869 338.05 li
629.943 338.961 li
631.018 342.013 li
632.091 339.573 li
633.165 339.573 li
634.239 343.536 li
635.313 348.437 li
636.387 343.231 li
637.461 327.563 li
638.535 292.053 li
639.609 267.458 li
640.684 248.458 li
641.757 239.99 li
642.831 247.343 li
643.905 266.834 li
644.979 284.726 li
646.053 291.754 li
647.127 295.259 li
648.201 300.578 li
649.275 304.676 li
650.35 304.07 li
651.423 309.072 li
652.497 315.59 li
653.571 312.71 li
654.646 310.742 li
655.719 311.799 li
656.793 317.406 li
657.867 329.837 li
658.941 332.271 li
660.015 331.36 li
661.089 331.054 li
662.163 329.079 li
663.237 329.079 li
664.312 326.199 li
665.385 331.36 li
666.459 341.554 li
667.533 346.901 li
668.607 349.048 li
669.682 351.807 li
670.755 351.501 li
671.829 350.271 li
672.903 360.906 li
673.978 364.321 li
675.051 370.718 li
676.125 375.267 li
677.199 377.638 li
678.273 383.666 li
679.347 389.59 li
680.421 386.698 li
681.495 387.182 li
682.569 386.698 li
683.643 386.858 li
684.717 385.902 li
685.791 385.257 li
686.865 392.49 li
687.939 390.394 li
689.013 386.858 li
690.087 385.902 li
691.161 377.007 li
692.235 374.325 li
693.31 373.694 li
694.383 368.838 li
695.457 364.474 li
696.531 366.965 li
697.605 371.183 li
698.679 372.598 li
699.753 374.955 li
700.827 376.216 li
701.901 378.899 li
702.975 379.058 li
704.049 380.007 li
705.123 379.696 li
706.197 380.167 li
707.271 383.505 li
708.345 390.877 li
709.419 390.075 li
710.493 393.139 li
711.567 397.199 li
712.641 397.199 li
713.715 395.574 li
714.789 387.66 li
715.863 374.171 li
716.938 362.613 li
718.011 339.114 li
719.085 355.038 li
720.159 357.968 li
721.233 354.114 li
722.307 302.554 li
723.381 356.891 li
724.455 377.007 li
725.529 395.083 li
726.604 407.406 li
727.677 415.632 li
728.751 417.155 li
729.825 418.691 li
730.899 421.94 li
731.973 423.489 li
733.047 420.57 li
734.121 415.459 li
735.195 421.768 li
736.27 423.838 li
737.343 423.316 li
738.417 419.373 li
739.491 411.751 li
740.565 395.249 li
741.639 381.435 li
742.713 345.524 li
743.787 353.037 li
744.861 356.732 li
745.936 331.506 li
747.009 329.837 li
748.083 343.231 li
749.157 360.906 li
750.231 364.632 li
751.305 366.653 li
752.379 364.009 li
753.453 356.732 li
754.527 350.271 li
755.602 352.119 li
756.675 356.732 li
757.749 358.898 li
758.823 355.502 li
759.897 354.266 li
760.971 355.502 li
762.045 351.501 li
763.119 358.281 li
764.193 355.961 li
765.268 355.656 li
766.341 346.594 li
767.415 340.032 li
768.489 331.208 li
769.563 308.62 li
770.637 312.411 li
771.711 319.528 li
772.785 316.349 li
773.859 321.044 li
774.934 311.5 li
776.007 319.528 li
777.081 341.861 li
778.155 359.516 li
779.229 372.126 li
780.303 369.151 li
781.377 366.965 li
782.451 371.031 li
783.525 370.406 li
784.6 367.125 li
785.673 373.229 li
786.747 374.796 li
787.821 376.058 li
788.896 376.058 li
789.969 377.478 li
791.043 378.269 li
792.117 360.44 li
793.191 332.876 li
794.266 321.497 li
795.339 311.041 li
796.413 311.194 li
797.487 320.891 li
798.562 316.196 li
799.635 319.229 li
800.709 327.715 li
801.783 343.231 li
802.857 365.875 li
803.932 384.461 li
805.005 396.874 li
806.079 402.443 li
807.153 408.075 li
808.228 408.738 li
809.301 411.751 li
810.375 415.798 li
811.449 416.817 li
812.523 412.089 li
813.597 408.075 li
814.671 414.785 li
815.745 411.42 li
816.819 404.092 li
817.893 382.39 li
818.967 347.818 li
820.041 294.035 li
821.115 286.408 li
822.189 276.895 li
823.264 274.27 li
824.337 287.631 li
825.411 298.145 li
826.485 334.699 li
827.56 348.742 li
828.633 378.269 li
829.707 393.625 li
830.781 399.486 li
831.855 408.075 li
832.929 410.414 li
834.003 412.758 li
835.077 414.612 li
836.151 417.155 li
837.225 418.009 li
838.299 414.109 li
839.373 415.459 li
840.447 406.743 li
841.521 405.417 li
842.595 402.443 li
843.669 380.167 li
844.743 343.536 li
845.817 320.739 li
846.891 307.409 li
847.965 306.797 li
849.039 302.853 li
850.113 301.643 li
851.188 314.074 li
852.261 335.763 li
853.335 346.748 li
854.409 368.214 li
855.483 389.266 li
856.557 401.13 li
857.631 402.277 li
858.705 397.04 li
859.779 397.855 li
860.854 400.474 li
861.927 402.277 li
863.001 401.787 li
864.075 389.91 li
865.149 388.463 li
866.223 387.82 li
867.297 393.949 li
868.371 392.815 li
869.445 365.722 li
870.52 340.484 li
871.593 316.801 li
872.667 311.347 li
873.741 305.587 li
874.815 301.031 li
875.889 298.903 li
876.963 305.74 li
878.037 329.837 li
879.111 341.708 li
880.186 355.808 li
881.259 377.638 li
882.333 386.379 li
883.407 387.985 li
884.481 382.869 li
885.555 392.981 li
886.629 392.815 li
887.703 373.694 li
888.777 385.099 li
889.851 390.234 li
890.925 383.984 li
891.999 392.49 li
893.073 378.899 li
894.147 378.899 li
895.221 357.968 li
896.295 337.745 li
897.369 316.501 li
898.443 305.893 li
899.518 299.82 li
900.591 296.774 li
901.665 293.583 li
902.739 294.34 li
903.813 318.317 li
904.887 332.571 li
905.961 346.901 li
907.035 351.807 li
908.109 352.272 li
909.184 353.654 li
910.257 346.901 li
911.331 348.437 li
912.405 348.895 li
913.479 341.25 li
914.553 342.625 li
915.627 342.472 li
916.701 342.167 li
917.775 357.968 li
918.85 360.44 li
919.923 361.218 li
920.997 359.669 li
922.071 355.502 li
923.146 358.433 li
924.219 334.247 li
925.293 328.015 li
926.367 323.167 li
927.441 312.411 li
928.515 328.321 li
929.589 354.579 li
930.663 375.114 li
931.737 398.505 li
932.812 413.943 li
933.885 422.112 li
934.959 423.66 li
936.033 423.66 li
937.107 430.975 li
938.182 432.389 li
939.255 426.432 li
940.329 428.873 li
941.403 435.932 li
942.477 436.646 li
943.551 435.932 li
944.625 423.316 li
945.699 418.346 li
946.773 376.058 li
947.848 348.589 li
948.921 327.715 li
949.995 321.198 li
951.069 319.229 li
952.143 312.71 li
953.217 310.895 li
954.291 309.983 li
955.365 334.093 li
956.439 344.76 li
957.513 354.266 li
958.587 356.273 li
959.661 355.808 li
960.735 360.288 li
961.81 357.044 li
962.883 371.814 li
963.957 379.377 li
965.031 381.123 li
966.105 385.743 li
967.179 387.341 li
968.253 388.463 li
969.327 389.91 li
970.401 391.038 li
971.475 390.718 li
972.549 386.539 li
973.623 360.288 li
974.697 319.375 li
975.771 322.408 li
976.846 292.971 li
977.919 331.813 li
978.993 348.589 li
980.067 342.778 li
981.141 360.6 li
982.215 380.645 li
983.289 402.608 li
984.363 416.307 li
985.438 427.305 li
986.511 434.154 li
987.585 437.181 li
988.659 440.774 li
989.733 442.406 li
990.807 443.496 li
991.881 444.585 li
992.955 446.605 li
994.029 448.077 li
995.104 447.892 li
996.177 449.37 li
997.251 445.132 li
998.325 427.649 li
999.399 375.267 li
1000.47 331.965 li
1001.55 321.343 li
1002.62 340.032 li
1003.7 330.902 li
1004.77 321.956 li
1005.84 327.11 li
1006.92 351.807 li
1007.99 362.46 li
1009.07 372.757 li
1010.14 371.183 li
1011.21 372.91 li
1012.29 376.529 li
1013.36 381.913 li
1014.44 384.143 li
1015.51 371.654 li
1016.58 366.653 li
1017.66 364.474 li
1018.73 362.613 li
1019.8 361.683 li
1020.88 355.656 li
1021.95 368.214 li
1023.03 366.035 li
1024.1 365.25 li
1025.17 362.925 li
1026.25 361.218 li
1027.32 360.752 li
1028.4 368.526 li
1029.47 370.718 li
1030.54 369.935 li
1031.62 373.381 li
1032.69 372.91 li
1033.77 376.216 li
1034.84 379.377 li
1035.92 382.709 li
1036.99 385.583 li
1038.06 386.698 li
1039.14 392.171 li
1040.21 389.91 li
1041.29 402.94 li
1042.36 406.413 li
1043.43 392.656 li
1044.51 388.303 li
1045.58 383.984 li
1046.66 391.846 li
1047.73 397.689 li
1048.8 398.67 li
1049.88 396.874 li
1050.95 393.625 li
1052.03 388.303 li
1053.1 388.145 li
1054.17 377.638 li
1055.25 378.269 li
1056.32 384.302 li
1057.4 374.955 li
0 0 1 rgb
@
1138.29 128.039 mo
1138.29 19.2886 li
902.787 19.2886 li
902.787 128.039 li
1138.29 128.039 li
cp
1 1 1 rgb
f
0 0 0 rgb
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2020 Adobe System Incorporated. All rights reserved.systemdict beginCOPPMX+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/I <1C60D8A8C9B854D0EE4B20327A907C36187261> |-/g <1C60D8A8C9B7EF322B9E33783F120324D4831FD54687FCF0A3239094C0D4E3AAB20B4037430546FA4664C0C2EC6F9AF25AB8C7F18077B54094AD8EBB679EA5C6D7AFD732ED61A8DCEA904021433763160B264DB52A614A19F2765FBBC5798DAD5FE93A7CA6F9AD05E8ADF7528A45B919107B69D8844684194FE7F92E944890ACD166034B8B64BAE18E8E65CE4B5414E043D7BFC474CE1F5EA604A5C9DC3A7BA914202197CB4B05F919B47B1EB5B22C18D76DC248F3694EA79BFDDDCC0F068EB1529F2B8631C6> |-/l <1C60D8A8C9B88C084B857C39B4185359B4FDA8> |-/n <1C60D8A8C9B7EF3217E3BC2FA8BE5FFDDE7BA6B2BB97B82CAF2D20211744A627BCE3171C7124085EFB87C01551538DC74ADD76A4A469E736F37382A8E68FCF64FCF52E65C49BB3C47B4136748A05BC6A02EABE080CF030B375C809CD67343FEE2448D6> |-systemdict /gcheck known {setglobal} if end {end} ifendCOPPMX+Helvetica /Encoding getdup 73 /I putdup 103 /g putdup 108 /l putdup 110 /n putpop%ADOEndSubsetFont
/COPPMX+Helvetica*1 [32{/.notdef}rp /space 12{/.notdef}rp /hyphen /.notdef /slash /zero /one /two /three /four /five /six /seven /eight /nine /colon 8{/.notdef}rp /C 3{/.notdef}rp /G /H /I 3{/.notdef}rp /M 6{/.notdef}rp /T 12{/.notdef}rp /a 3{/.notdef}rp /e /.notdef /g 4{/.notdef}rp /l /m /n /o /p /.notdef /r /s /t /u 138{/.notdef}rp]COPPMX+Helvetica nfCOPPMX+Helvetica*1 [21.9998 0 0 -21.9998 0 0 ]msf938.029 41.7261 mo(Internal logger)[6.1123 12.2354 6.1123 12.2354 7.3252 12.2354 12.2354 4.8877 6.1123 4.8877 12.2354 12.2354 12.2354 12.2344 0 ]xsh3 lw
1 lj
[] 0 dsh
905.787 33.8633 mo
935.787 33.8633 li
1 0 0 rgb
@
0 0 0 rgb
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2020 Adobe System Incorporated. All rights reserved.systemdict beginCOPPMX+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/O <1C60D8A8C9B6FF86FAE00AF1D2F86EE41080CA4FE58FE601E0C2094F12B2546E9E38BAEF65733BECF7148D0EA0DA88DD45A55274AD12A1DAB92015F88338234BE6A027107EEF674C9235BAD46D7DFF766B4165047A7FA440E1670CEEAAB2425BA29AB4CCAE0C0F708E15BAD5B5B8F2A1708072DEF2F49003A8347C8BC4E813779196F3AD613B7571> |-/d <1C60D8A8C9B7EF322B197A4CECAEBFA93CFC6ACCC571419BFA5461EED77BFB3D8FE900AE7AE7F3558D5F515A8BFDAAA816E55EE92701787F654353E7BD1A4CD427A1C3D52C079A2D5373BCA2D0E81E97334505A34C6046F7856771303B422A1AED127DFB82533DF581F3B1C10CE7C6EB68EFDC809921DBBDF534E7567CC2D2750B89DE10766FCFB923BB97A09A4C79BB9A> |-systemdict /gcheck known {setglobal} if end {end} ifendCOPPMX+Helvetica /Encoding getdup 79 /O putdup 100 /d putpop%ADOEndSubsetFont
/COPPMX+Helvetica*1 [32{/.notdef}rp /space 12{/.notdef}rp /hyphen /.notdef /slash /zero /one /two /three /four /five /six /seven /eight /nine /colon 8{/.notdef}rp /C 3{/.notdef}rp /G /H /I 3{/.notdef}rp /M /.notdef /O 4{/.notdef}rp /T 12{/.notdef}rp /a 2{/.notdef}rp /d /e /.notdef /g 4{/.notdef}rp /l /m /n /o /p /.notdef /r /s /t /u 138{/.notdef}rp]COPPMX+Helvetica nfCOPPMX+Helvetica*1 [21.9998 0 0 -21.9998 0 0 ]msf938.029 68.2651 mo(Our model)[17.1123 12.2354 7.32617 6.11133 18.3262 12.2354 12.2354 12.2354 0 ]xsh905.787 60.397 mo
935.787 60.397 li
0 0 1 rgb
@
0 0 0 rgb
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2020 Adobe System Incorporated. All rights reserved.systemdict beginCOPPMX+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/E <1C60D8A8C9B64EDFE336C703EA12FABA68C9F5D15F1A9B67653505BC29F8D56A4237858E054C3198877A> |-/i <1C60D8A8C9B88C084EE8A68C7FA2A58C433876A9B19799899FEF7A13> |-/v <1C60D8A8C9B7A73DDF32B99894CC6FA66F5D07EC695DA6C164CB40F9A791729569775D3BE9C3> |-systemdict /gcheck known {setglobal} if end {end} ifendCOPPMX+Helvetica /Encoding getdup 69 /E putdup 105 /i putdup 118 /v putpop%ADOEndSubsetFont
/COPPMX+Helvetica*1 [32{/.notdef}rp /space 12{/.notdef}rp /hyphen /.notdef /slash /zero /one /two /three /four /five /six /seven /eight /nine /colon 8{/.notdef}rp /C /.notdef /E /.notdef /G /H /I 3{/.notdef}rp /M /.notdef /O 4{/.notdef}rp /T 12{/.notdef}rp /a 2{/.notdef}rp /d /e /.notdef /g /.notdef /i 2{/.notdef}rp /l /m /n /o /p /.notdef /r /s /t /u /v 137{/.notdef}rp]COPPMX+Helvetica nfCOPPMX+Helvetica*1 [21.9998 0 0 -21.9998 0 0 ]msf938.029 94.7964 mo(Environment)[14.6738 12.2354 11 4.8877 7.3252 12.2354 12.2354 18.3262 12.2354 12.2354 0 ]xsh905.787 86.9302 mo
935.787 86.9302 li
0 1 0 rgb
@
0 0 0 rgb
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2020 Adobe System Incorporated. All rights reserved.systemdict beginCOPPMX+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/L <1C60D8A8C9B7EF320B5E1B1901757FD427860A5A6931496E07> |-/R <1C60D8A8C9B6079F62E4AB3BE2637412A7FA2BF1A87387986CC045CAB872B149BF5CA8B183616945E928E44276850B6ACD583D0202E4733E2391A44F4BCB738AB089D22707E0F4100F2BC6F35BD460D56FBB8A5713D4AF8760EB8EC1E1AE6F49A9B2B1066A8DA04011CCA29E2BB62A652880D30D80185E3336BD5BF6EB5D116E1FAF0793D4F86835A22CB564EFB5339E311318AE2981A0679F359C9E7A1FF6CE964A> |-systemdict /gcheck known {setglobal} if end {end} ifendCOPPMX+Helvetica /Encoding getdup 76 /L putdup 82 /R putpop%ADOEndSubsetFont
/COPPMX+Helvetica*1 [32{/.notdef}rp /space 12{/.notdef}rp /hyphen /.notdef /slash /zero /one /two /three /four /five /six /seven /eight /nine /colon 8{/.notdef}rp /C /.notdef /E /.notdef /G /H /I 2{/.notdef}rp /L /M /.notdef /O 2{/.notdef}rp /R /.notdef /T 12{/.notdef}rp /a 2{/.notdef}rp /d /e /.notdef /g /.notdef /i 2{/.notdef}rp /l /m /n /o /p /.notdef /r /s /t /u /v 137{/.notdef}rp]COPPMX+Helvetica nfCOPPMX+Helvetica*1 [21.9998 0 0 -21.9998 0 0 ]msf938.029 121.335 mo(Linear Regression)[12.2354 4.8877 12.2354 12.2354 12.2344 7.32617 6.1123 15.8877 12.2354 12.2354 7.32617 12.2344 11 11 4.8877 12.2354 0 ]xsh1.25025 lw
2 lj
[7.5 4.5 ] 0 dsh
905.787 113.464 mo
935.787 113.464 li
0 0 1 rgb
@
0.50025 lw
0 lj
[] 0 dsh
902.787 128.039 mo
902.787 19.2886 li
1138.29 19.2886 li
1138.29 128.039 li
902.787 128.039 li
cp
0.149 0.149 0.149 rgb
@
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
/COPPMY+Courier*1 uf/COPPMY+Courier uf/Courier uf/COPPMX+Helvetica*1 uf/COPPMX+Helvetica uf/Helvetica ufAdobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 13.0%%AI8_CreatorVersion: 13.0.2%%For: (Sean) ()%%Title: (full-pred.eps)%%CreationDate: 12/2/20 10:16 AM%AI9_DataStream%Gb"-6pQkB[dP#ucJ9uenBA;LoA<XX!)`e4u#u,4TB(+E&I+S?hE]1?\@Eu4:ZedQTq>i.JUf-HTW`#*m[hgt"om"3B(,l1fRf.In%CA(.OF!=AHUNkR)[o_aR'Vd2n#t.*7h!>P!!a$k2KAq+uN^ptESJ_8N$=59#7f*q.hR2UmLglb2B"=V'Uq-9p?u<Us9YlpDq2JQ1%2ubWLQ@mROnk+26hSGqU4[#]VnA&hB;TlhRh0_&@'^P+pgZ=qDlPIn!,/*Pp8X27,C9TLH(;o$KU0$!nQfIuAC.Q`DF#Xkg5DOQ`%SPKZ-+KQ0&Aq-tc8'CjuC4hgMj4Xi&B&J;D%t3kB],b8iBESgd5?8->:++:'qTnj)8589kNZRQLS+W,;Xgh$+[`cLI6ECW+=<M'"%&de&/nsM!73e9o^2us44C6$<ok%H<k4r)aFrACMPPls2jc.BQ:1Ln&HSrZu[jQTr_rZBM!3/3ir(rlRO\6i/+ds;KA8\gr2lt^g7%0ssF*inc7?#I'h:QZ2IJ>G+'NVpl2Ib\"D@]gPiP7tB(5_;>sOE4%!<XY$sKDOs^@rNUUg*)@j(YgYRd&a!1TDC2*6!"d4*_3)SH%3NbNL#5CAhE=?g$%E>/3c_pAWP&"+"=/"eeEK!/*EV9oXGp"a85JdBG2A,S)\"hMZPC_'pn&0Of!8Vbt7<1ODDH;kp5UPh$0Z\#`%rl`QNI3s>2:Vc;nXm*_;8d'Y<RiTIu\sAR@&IhM"_-`EE-fVu?(s"FV_?BHeGT879R@>jrK-3/km<;P!IKq-b$F]_=VVm[-`dfWr%5d^cH%+%6l-;3X]_1>^CI=Hbs+7YUpkY5!;@UGrWY>W6<F11p*>@oK:1De38;>$gEL+U#GbAJS:2aZ1,gQXj*FO(`YMa^@V]hil7%Qqf(k3!KhfW8IsN436b:H3nr7:a7B,_;TjRUisTAJ;,&rc@Xu6eR1N]/ch;P2#fgXj5=UWr>Q$aC_m6GED3J=oHMAb5p-tGDg#W*%'$QQU(:+u71R%=WG.D6doCZE@`;f]n[19A5b+DB5jnO<aoQW]RWoe((IU3JNd=)D:n-'$SGE2OgSml(Ta.%R\K@IY+bJ=O6"O[I8%D@'V\hO8to4's'f@gXo.8Zan_,rOA4hcNVR0V32kc^?@M\R;!LN'&J(gco=g"(c"+##,G&/+a>bAADYR.K>+('7CODB7CoIs-c:U%&XXp7r(ZrCTa0q?P'_M->)HpLcu/Ib<G)Y6k+KV^GQ>n&/YKEf6NKJ_/^C]]J>%W#U+`2'DRS4S5X\;^]L5.Zalbc:)5PV=P%@@I%rOjNmf:#O7`YN<oKj'Z9pjT^)&l3>#-YYG6m%Z9T.>F5q-#^*lYo8R7..70(;6dqC9aGo7ZSU;LSF+qW!PMhl#Q#O/LRU0/#`],I%4]@\8#TB]:\dV\"P3.,\OBkEh9TeYg#-R_mF,sO,L%Y*`aSut8+0hk4pRSDd?lo?Z\P)Cjmb_6k0K!;#QE9%qU@9HW(,/#H"-;F]%@$pId-jUYcrU'n`n0K!CY:!`;mJ`DFB?4mg!2)&(JDp[GR.*'FB/Mr>h0cFHcR4o!kf4#^jM<F])=L&qF69.8*CN\"I68*XXf1L"%Cr-jJ+Fk:g6d9j"(*%/,$if?mOba68e.QF]"<Q^&"dmU8U"3/b9S>-&GR5]hYOhL'\68NWm(]it7p$Q#!))'So\nM7]&1@PnQpRQ%#ELA,B"tIM-QA7"5McetF*k-\!Mp/t@`E9IIUg-]ff-^Mc1t]\qcdG^hn!srldAV]R$q6s*rs4:AaTfn;eJ>P;9(3PN8S_LRg\k[%R@1[Vbu/5Ir/o?"mUu/B/H=TnUQ&S^\(3+.%k2K%Pa$]Ioj:2mPh)]3*r\+M?6"JA%I!obOW"7ck5lt'fa5TIY"2LNqrfR1Y5tmr%1OIEK6tqn`dY>h!>#Lp+Jc;r9?<`8T!-:ZI2Y8N1rejrt[ZX)e^OZ"'r%aqSH<%jk!f/i@1Bbs8Oc>j\(0ZOVc>9_]:igie1+Ls3%+NDU@H9dtImm<9NIXq=t4Hi,FqjUDr"N%keqYYej9MDZdTFnR.)kaknfN84r$@OWV6'Kk=5Uq"C=A`\&.G1$jl\shq@cis_$fKus%H"u>u+3aZZ2u$8U++D"$s"]ASGNOr>bWH*E^-893Y<]R)qiW_&!T6bh^FF?MdEnL1*WC,U,Cb_qoZrY[l')+EaN"5gfu+sU)oMX`%=o=>;<K-]oV#ME\`Vpj'`Vpj'`Vpj'`K$VC5=t\WK)Ln/O.b,i8322&ao4l[Ih'`_Ih'`_Ih'`_Ih'`_Ih'`_Ih'`_Ig""[^orCh%Eqa]E8)^p\i.%p4n,o<pLkQKZ@E&Ar=?IS?d0D387lqP)Sqm^_bo:OXY0gup1]]+"1msBX?1#Ikg?g<<p@cjXCR$tlW8"NU0cfVN%[7@*;6"gL!mM*RB$*'1!_*L"WJTEA9*+L(qju][,s):2TMA/9i<6hn:hpO"aFp!rA(Z`=5aai:2a?Mk]s(9$\hDOa\@nQE&b3]!!%C:OP0rI`pdSe(QWMK&`L"%Df<4nucj`>.[)PT%g/b:u_nfeS4@=9G'*T#*_(^S*Fb5'8m:9^f.cc(r-[lg1:.>[I'+_/dkgKtfD^%jjmh2ZGj>>0X>Ws6b*:QO>=V=j^tlm`^Vr*Qh:70ILYHgC&p9?2]s(\C3P_"EP-eLdT7@d$TWe(El(ZQkC_`V1*ZK`8+hA[6r3en%GcJZUIorFRpI9LA[orZ4,l?cc0Za`r$3\sC0ZB!.j$,^\5[45GRe$Kq/7g1.qCc07s6qjQQLiN(F=`GAUB)n]NL>E[e6o93f,4ae%3/e8#?h2Np0TJY5JP_#U*:)7lk2Y:A8ADZdJ$rQj=QbfarS,\8r8ZVl@oJH\k&2KXq>3t^#'?WEg$!Nf\CgnZTLhk$D![pZ?6-cO%?_@BAjQgXUoS>h2a+%=r!:/.,DSh:b%E:XV]!NK7$eo)1EukT3dNp=NJ&-@9cI[$jbWdo0R15+(2@j5p&IKCB%#\Nk]Zo%@ju\Hg%R3)YfFE@F'j9%/q+i_+D0@moOh<]@J.2uOmMhWogjfSK!$OZ*!+,rZT&WV5-V#e7KD?fac4G#lIAfS1Mk7Spe[\F(CAiftp0_u_F%@6QS*oD_VkX+WcS*;KjP-K<`j#mpF&78KnKk)K/2N>5(FZ@Q]<'LU8t;<BM(n"#jdcZb$#Ho^*_/W:TL,q(:R[nqmf\N*bfpOao+%DJuu]d,CAQ%EpqCUU)E'9V^#,s$_ojTK0p+Ej-T6Ti:L(BK=t%k!NY=he!]C]]%C29]HR)7kcdObj=Q<K#^9]lF2/e2h+]s(:s5K%f"M6Vio!kB_M"YrghmAWZ(e\WJ6=:(`,%BTaZ!>I\Rrd)3?<&$!VWEFpBqg:>+!>*RQ8.?D1q^N*V:Oah@?ue"3c/#?Ok"7K58U;%#:CU;e9J]78L>BuKg2^&,Ch(&^8QlX=^W/2YFSh]M#f.GD<N]353/CtGe_qR*ok[dX>f-HRHJ?2*#f(c3pF"QdSRdh\>@Y6WN;bu%74<dW:'Mf:1)L[;)dAQgJ+/kkn:F?NV.du:Y/#ila=nI_`PSMSd>mr*2j<Wh??]pFb0k,n$&2l8O=m!n9"K%jJ/#AYE*0Qf9p1NY%$;,T_(,O/c[eOi[ah,^0FhFnJKTF0ZTVuK,Il>3[E5#Nc+FY_?\:`5),omh>ej*nmE3_:r,mE6K_L*l)ZLg,\Tclc-8'$=7'/4a=%%K.Ad7F<N;k)m#'QBqhU5ms$3D.$t[ggAcPgJ1h.!748e@_k@,lO[;2?=81sPPL@srXKdNh0d8XJH\HZn=]!4RR$D.fR'&]hh%\C%^7K/$'Vcrn@n2D#kT(.H7YeOQ+CH'EhFo6sQu$3@n8>Qi>a?/mGQXdF4,$U$1lK6c*_,"$",2G0)^m4N[=QcS<i_5%AA&A0QWndA%=mJf;/JE[#&.Ps2FGH4i!-Et\`#9>TT[lENIr>Fr&mPttWg0(mJK[jM6Qo<P_0*r+.[5+9oU'7OZPQ^'3%DqK:^j*nH*dqJ$JB+c%[iY7""ZO%27I)XT965'G9bs$4ZWkYDgjis69l`KZ#q3_)R\cf40NX+"!&PR_LOYddo_^Ap>$\K:mu&N]3k-YCU0U=D&623:6HK-\%KVWSCPI4,-"^?PeO"Ch5o_@tXb5<Qj.+CmEUVW,QlT/3EB.79tD3q$4FT`DD)6Fc>Q@^m(q,4G[23FJ]!=VK@+ETcT@aI4uW\p1J%0\MPdQ=9JS^/lJ#i*'$.;+mH__uQ&..T*e@\#-$1(&U_.h[iE341*\C;eCkR^`Do=<ZcPl\$NmfVY]Q8e!<EM&Y!6E$5.kXV8]GA%SNtZP`Sf!aUn]Q8!fTn+;1\9:']VmW])DhE_0Wj;)$0q?HE^`I-ELmL*0`L=_>r%R.<RcW3W\g[2$>8H?jFL=e(&_X[6NL0^BjcR%Tqu0Bl@ssQ.@:2skIk3-+>:F>2p3M:_(;o.&*deN97B/mRQS>M*FU:BN@QZBOcajrA&u4Bg2Ngq`ft?8$9N(@)gGV'c'uTq(*mYN%Z'']6(J0;Q91h%P=@@5TA]lRq3N]\&W.#/OVq\MXVkTQY*B9p`q/h$Q[>+ogUQ4r3+"\lQ@GPr+L,D@FXrufQKAM_Q?eu2c>bfm<%+Z!Mkm8CJrJ?)OKDmb-;#$A1;"6T<-*p]+[FTSWCn'^?*CGqiY0jj5tGPjOm\"bJDgDV1;h'2nm]!M?M\/rk\gaE_rW6SW2GR\np%7n7Nukn-5#e[jf+c@EWDL:N()@5W*>dEHRM<1*\CUXj$hn/%UIK=/7u>jd`j\=q/D&Bk4\rlh4uQ-+^I4CEVI:mKtB]X#:2Hh/#S%=6@c]$l00E"Hd;sRh"RrkWP+@nsKM5iRKe&C@c<FWu+^r3HDM:bfdi[cqb/cT'%?L$.%s.1YB@o\qF[I=:Io?%A[\K>.9oUjQDJI%^L"]8gOMHhnaZg_*msTHU"`J?0^(*'?$c\-Bg=Y8SFMoCFUTMJ1hb1d3X,puoT>U!5uU\eBk4UeNkq'`oV9-@c^0>uXjhH`'M"_L%HI[6(q<FbN2MF$JaSMYeTTY"1eSO@SFauMGTd,F9iHs:9X],?e8[WsWc&#a<gb]3s_?EL1/bVLAHQY-\7B_:K-Mif-?]u_#7Rm`-%oY>"gZS;U0*ABRJOMQQs:?jXIF'%.ua7H(T(D1EP%aa6q#M=f4\usQ>dW"S&`V&>KBe7IL<[37#FJV(t3\R_/#mmu%/H-Ci>BXLn%cJ'SD*\)^Q8GagaRh^IMIr4D'3,o3jbs]r]L!\d[q;LHh@k+=&huFA_GVBEYqJ,J](M-^MlH.Ifs1tSR=b9]oKBCB*F']^plSd^>%ZefA::o!d*[iom.b#KV8bmiM&Nb1OU..%q5l8bkPUGpWVkb;S=R$3h?3OOY@5_RtBk(Fn#PbSJSR\qu@!Pl!AWqm![mrtDT8Z>m$%"FBV`H8?Q-fE9_NU8LK/:uFgqOQ`[dO+qGiE)=U>4q<:7!1pNdU.<VS=Q%#06RU:/oKc\Fq[Fa0k1l;**Zn9iid=6$0J*;[QBObr%3CcFn9\9Dc]5<2MF[iq;?Jc19/bY<;QTA69o-S1c;lnO/OV.h%#9S],/]WW*rGq3t%:4JUOJCnjjQOa$QCP*0os2R"EYdhj!+UpN%<QV0sR<trEm_[Xfo@%uOU\CNcR3_4[G!$bQ@Mi&?.8>5X/XQ;DG]INUQH:ij,&":F;G@PD(TQp2e*9:VQOZrbiqt\j.Kon!klIdG%p^PT.Q-/f2m(K\TrHo?sms\Vm[:qDl>%]ecAtmk)\J2Kc'Rl@n(R)Nh_<OD<b&"?$,kh0*nX8h]"4,[hV<*kI\b)WoPtNl`Q+,h\%n&qlVG[ds'AsN7$#qSfb?=JV"DY]`k'P=u:/G>+If[4o-7X4M`Qd.X!fQofHRH!u5HNQGlIS7(gbu4&OIr+q@hn!FSn2_ET:%lMd%b<$n<OU"s-(@J$IH$dWk/_p7"hH\J(<%_'q:Zf3*SY\fN_#f(SHc\j#`_sg]i#kM8D>iPn]07hum9-?Zp3uH$c&Ug#[bmWKeRp%h%4dp]rb2q5"kK8-uQO:`5T==Do/BCLOH$WH-]o+-ge2Sr.R:j=DR$3E@KWoH:?47=Zpu6M,0#*Gs/7\&^gOlu44]e_]XY6J'&RiJb%e39VX9WYc"p84J&+%]pTrBf%HeooE69[mR+6h1h;M*A!aT/)+S46kuso6K-0n1X*5.6'j[aqjG-%B2bSK5X]s.Uo\n_jagHIJ.9q%C$nprKl"!4Ma"Gm<^s_62'BK6QoC3PI7,MG^#eO)\P9!A5PO&K,_ZGTqHARY7g0SVe:e*SM%.7+[u[a)'h5r,/;6t4Yo4H]fl6RH%qD69<90_:],hVl<#6Um+&03qt,hhtDVgPOIBU:':q/>]q.lfK?$fSR4O(II#FSno-E:7ikr0hPh90Y)Ciqt/B9MJR]Bt64ni.-BH%IOt1PhMCg`S_mElheIHUjcXuG@!TXGR[&:TqR^V&_4,ior3@?c7,ro)Wk5mbGO)m>@Fl3`Q10>HLf`<I=4I=-VcDN?m,\&r4sg'i%C^DVAk!DTAdf"9u"Jirqo+j6@Drk*C3@c+PINVb7aj-8:iY(I5PY^sa-/Yc`87L$(D5prd9cARFQL;I#DVKB(D2=]&dJ[R,._?[)%GB"CH>`dfSTI`\bQiM%DLbKii$md_8-Ip6>\n6($V_aKmV++7Aq:Ie!U)\f/FnmShqkc^VID^`lO<bT@UM-sr]6@a<5aY6><+rut%e67c&9$1/j@M:G08-1"ciO_J!fsT#kp+fW#7G\>hVUG4.lsd^pY==^2=c1-);1ImL!DWWu55Po=;R!q/'Rk5c<FNFehW2;T<u\*4%i>!ipP.o1(;0M_E+8Nt!bR%VQEYP8)k);`%GA6'<7R:fK1DU/9kLV0oiIF2RWuEPOVRN`?i;9?ZGkR;MZB#iJ3Cj(Rqlu+[/H':9%B];>YW//bYFY$g#\@2!L\q7O>f`(m6)+]#See/9kj4J<H\o*")`0Eg^'M,NF(Rp$=;4W@&n\-q^@jV2\8(L33h_.4bSUS8n4\b#7%\TG4r!(Hb1!!SgO!rfq&jZE?W=F>u5!uqD-XE*q]l!R"S3^878l"mE1Nl;n=.otPUjKOAS7=mba!nP0-H1k28m5=u/]k5&uK:MQm%Hs/dR!%QE["7F-_CKfe+quNGFM)P5@pGPftXbX#p>6a2pO5SJ_M(QRZhQg+6k.sC4H4Z?A8QgbCn\Q7<`ONjoL2@Q>*3'1L!E*@<%M/%^'EYge'Dd6kP=,732>KJ(_a\&;P1rgP3+6q$><q:E^f1LZ^:Kd2M,;3US,4GBRnQ\aP86E[uoA+]<fCGIK3=De,#>0DX:E9_[%0F1V`98.!oBIHs[,K'+E`X]GIpm%*\,WUtW@2h'"@Ur#+&(j[*NSIIc=""i'>VlRN7kELK9kge!;)r/&H2sqC0oPELiWRR;8Y9F"%<MgtnOS"rNTYN9nYJE:?4eW4.CF#+.mI!J67MOFo&q/#tq'(ibHrO8*_&D"dJ.lZrKq"1n2)kW46Ae>4Yi>eWT??Gonq(!Cb'$LD%0k'"ZGM$Uh/Y48CBLoZ$,*&@b$u*>K/cHFK&F9VU;s1&`p%.7Vc]*'-kG5[Se"73""XB.:K=,aR/GJViP%BP!!*1h5)CFMBC@AV4%c)%eg]i^o(`VF^27ueA"%X':bW"Y;!>MG[1WZBq4ABk0Z9Q&4ML6e]cGEu8-g,8W&\AlXl/^0Z1G.J=*g&CNTe7eaqU`CrWW;P\e%eB2pJkonD]Qamh`VrC.R6h2:&p<rqhH)#a*]Q&E$,P67SNdTYj+mL<M'"\`/%&YDo6WQY3$>N3+I6qHQVhKQ=>8#CZW^Hj9'\^!P%AU-(?e['l8?Gk\Ys!E!bpmHp)!h'bKeg'XM(afM]'<!?cBUfnn9fT7NOAJ1.)J_+OCu=]8BVEA2!P6F5_39;`ksqrM!`EMs5)E;<%^L^Oj6^kK^Wh6+W+mK15gr$urm__tJY^c&%3fMT>GYEfe;Hj9\I4!YRP\NFfJ]K`W=[9uHm*Dl9Z0,])Rr:GIJ@L6baU4ru&1sZ/%j_#nYo`u5(;HQDd+%Z8ffgYl>Yb>$s<*@j&0YJOUd&A`$T7"8np1B[_GZ3RJH*p?U,:2_f&Z1`[/9>.ep@K.C4_@ndm`CXM/CgnY%!mFi$Nu7i6qncO,I9Mf,_7^mSqHj9Mh#Ni>KuKT!(aA?==I:4&BGc+5(<!=DHlr\VQ5m)o(`]EabXRU.b%^E&+Oh#SIt)aFATGHh%Z]_O?<cM0GI(%s'4>ps*$P2W0RrH-Em^\)?hsC/oqp%")[J:%\59Z'-)[@-_m"]GZ\IC)?9T,V[PdsqrTRC\"-G(C`jW%"@T#/U]%QRj>B_Qp.)[-ih(,Z1X7l>CGHeO"Lf^i80EA!)bea*0_0CA<Jfh=,>jSk$4+l-%I5okN1?p4WNP]`@rL2dV-el*4L]\LfVidnhY[%r*JPm*k[NobhJP<`@pb6jBR;^#7c]m^Jq*oI9+>t-,r8`fTO,LPuVF4p(Gcc"0I+#%s)RdL.%r7rp5n,"O:=]$>q303AZ^_YCccV%kRZ`m;,O(h.pl3AK*A@3r9OmOQ""6[MBq`%jW;WopKN!2DnP%=Fr5-:pZ'\HQ14=\kIL\;H58"GX&aBuno$(I!:'nu]k9"-OX/J$%:`Q+-m9j??Gf2nESMa;,9Ql`]rDWWPm![VQ5i\c.gi)0+-*13)61+a<7W!=aM*qfU3E'r8I%ST)(kgN`aEHatlfJmp9!O_pD+D<`%ZR',G&4r#AX^Mb(-7K3['/qrB@\<J#/+EVtmj69E!Z_#t24)TP3D-^0r1agKILY?[4RHk^Z0Nuoq-pOT`<m!#9M8A#G!WYJQ>.L9%%obG.;%\?(l&Js-j'@GB;smd/Dl!cu=()uUq+>drgP(k2@I>@7@VT6MR7Q,/-FV2nKkM;SU5o`IogC1UjUI7#[TE7L4kk-AJT;D4%n^J3-29Wep.n$rL^[.*3K%3%7Bs%eOI7542]:[1j3Hm[B!L:rs0:1Oq*jr/mb!iriHg5D<nYoURfb:t>V-8a#.I,[$5^p*$rA6AZ%I@GF#+CbQ#G9Z.Pb%g*Z_K%k'_Al+/PlY[Bh2G?EZI.8rn\4dg<QGBRHU1k"JD0qu#R3<`/("j;WiuJ2n&s9m7iNR#@h8Y3ZOr2R%Q@Gt"d]s`&Q!eJ@^TEgMUsn38k;TgT&F=?d^Wt=eC,,q4"U\ON1YO2D-:'cO8s50=Wj%b'hH\7PXrQh)lld_=o!,CgI;+l.#K_1)%k>:Y(nO#CM@,:j3bAUuE&)`g[=9NaQIJjj!%iU_88YdVQ)\&bQ87I]/]D5Rg&ZLc'dc>r[.l%JI>\gCkE\[SO/JiKWa/\MBYN6G6%7:*YuhXcqXma_U(FD3+:%7"Cg9eQ6.9lohVh*ZY56RjA?p7SYl;Uh9Um4#*ua_OILQ?Oit-<@*tp#Yp2od1)H#QQ0m5WAWDOH(DQ%mWm7:9BsejlhaT<EU;!tmsc)cjW+3_7W6H8,.I4h9\8/ad0-5Z!iqrPrQ\tn7Xb#V<`<EU40#E2WVXjn-/Yq#VVO0-'9L2BhnlCY%M&a[]_[T_^(@P'u9&VCQF(%.,e[iTFUe:f"&"BXG1U+lHodfaAV3.OThn.<I6O-Qn2??k'W>k9m]U"J>Ce1'[SG`MSK,A^KZ78o.%pA-ScLra%+WatH1:b`S[ed"9_IV4=K;e9$IquVl$:P]Ud,qAj&9ng8^1][>WSrh"SN^r<_$dab\5PZ($#QZ_C]?$g)>H;iunnJa2%1_*-fLbZX<B]^a;js0lF!sAu/O:!Ij)Z!_d\uKPo9t@e]8!,[%ljpU+R,uQ43d5-h#&io,-9lLL;ZWD,`3lUa!UU2_-L\SjY`a/M%(.0lX-MHf9BF2E2I)gD<&pMrQN6%;,J5GnnEqDgk9"F6\QS7^[5_Ui5$<#t;[mV0jS9El)XhWI6g]=J$=()uifoRZ!D.H,pk!I:u%LNr?VoM<oBcr6nOii_Rd$HqP>Y;"m')3ZW+6ZS!ZSPfogX"ha\a=dc4gm,+\bo//5\7tA'^=Mb?f9@%tU".Ta"]99$URUH`Y[f;,%R>a@2Q-.*bos'>^jj[i&Dud6C-S"CJ.N6)C5\r3+"rgCdd4%sHUpoIX!X=,Nou^k6^bfl[!9J5dNO$YYd!j*5QY!X*#?OsWd@PQ$%$NCn1a[@4&.,GC(Se/^MTI&sQXm<h%"tc):i7sbpEsaL+W8(S]UAuO6b?XCV9'5.KAd>fZrFK'ds'3L7<_SBC3`_p"O)?E.bjPmQ%OV!__,>*u^qg<e$SP#1N"M!n2K.>7@2HX_"Ve@CKDEObgj:,O-(^Z2D*rX%k*M@=pb2qCm#^L(?*?UX*-o-)\+.sWn#K5eZ!;]7_%0&Q3\^pm'$CFKuDSE+@5e'#f1JK(O!7MXndQD6<;#VX3Xkk!9TF$,a?<f=;FnI;k0DK=usd!)J:8Da]B`QHe_5#r^aaB\#r$)jE"%#;8RAIRaD"h\T\FSS[nYbK,SMKEn\@`r13^C=GU9m&buDHrXT&LgUWZ+fg-bN'Jk]q=W61UZ,ZYo#u`]"3_D98jFj,UcrA+!:BM_%[r8+:_<&e8^9N.Z(LuTXb"jW$QT,,)[_mH]-c]VdGOmJaC%uHEL2!!<3$m6%/a!r7O2g;^eiYmm#D<=41-$D:]#jj<iP++Ig<X0.%_RS`]R.UbbX>ap';0)Ytn"\jR8rXe*ri3`'J$dR-%#(cdM!SCIR?]hM8F\.U/^\V^mO8J2L9K*:iTDReX`Sp*m,\[f`8t'@d,0/c%J8LISVf-L/GA&14^#4U@+7E7ej4u'gE.(h1]\RI2p&(-)jUn96H!tY/Y*0C!*>F6MoVjt`JiW_hPM>M5%If^d;>QuTL"<:\l[\E]%):3])"!Hn?GGVL85XA70h?(kX2j%S<n"k%eo<)DDZnX'njDE:2QruphZ0le:lEuWZF6KY].I?cLD^uk,LJM^=eL8B-XbQ!B#1UkJ%pc*I)HK%U$j"`(1:;pZoXlm;^Q:o,>6E>uP0%FV9m0WBtQKjbB-?GeD!(H"Pm"BOn\QXj!C1N"d^XR%kS:CF5q/2&Z8;n^rMQNQE%lB,"?P`(5lLp^2a#:fZ=HU7c`j]iH@bEje9mG!t^AQRLCMS76GDeLnV'uKtt2QpQpo,$@OoHfU<o-&G(p&u[1\UA1,rNrh0<D1"d%^p-aI'J;dpUO]_T0e+)GIG7fhK$nlm('#!#l$2OMil3<.s'>-^o/?_:\/o8!)k]lRH$l8B%t;mqrZ2@Be8*)LTb$W?!QN)OhK]c"%o.Krk=h3@@Ku!Zbs(-kR/:$/X$(V`ai^dQ64tcT&<(H<u+2o*Jh1Js]Z&%C5UP"29<6o9pZq>JkO$#JI+]D/<72]ln.7Fcu;k9RN%=H$D,\&7;m0>Ri.K9p?$$j?t'S,`O^_Ka)::(1ZtjN%@N_qZ)#L)_fd%bQ77)cMMT(=1m)T*>hjYc#E,k4-bk-ur8_Me^n>2\YGr%]\2IV&.<gQ4PoF@(P898E;C^q&fs.@T?r3i.,3PmJ.bpd<3;4j")**oKVr3\H&U$"0)r_(n^eH3-G.5ePY$cT]-FQ<m@,%lM-,Z'%LG2(L5XgKn(?')1T*Z7lTf=_b<q",ILr/JrVc^>s'ko`#36t[$pXSish=XlFfP\:2$%bWCZG+2qNjk0:TZ+>E2'-hni\3u[/l!mg%(4]iL-_N&HJ,$0()4Dn>Q,ULe(r?L?/`(]<fA[<%?S-F.DcjZI5S<VlFQq?8bq/.2:br,9ghuLf-=hHg7(J'GlWM<^3,;\oFC@sk%n!Yo+7a9B?T9^7D+;:_DQ:(5PoNmPWo@6C[?HRS,5[>u6mtjf@Oj!U:%jO<n[;*H^'Y:a7`p37Lb]^:r@I>GtANLSYc*?3m,,Qmm%8'#5=56i9=d#IhWS#KL0ib3k.`@Jn+XZlqq.nbo%@^RZIQ2Yfjm]^*/j-"R*N"C6_q]<HpOrj*2^,FXj!s-Nl?V`reeKPoW#VB^A%U4)n(GP@n&e78gQ(5L;XJY,2<Psh&8$a)q*)G\rV$[&3.)[GE1D756KO>/auHJ]7c>XR9+V]&F6N+LHV7&*de4>f^/&I%2]LYk;#%EjtP2b2Ac[2JI*SmiGJc<ihdf-;eEh)88I+J_>Imi$\AB7+<AWpYi(-]S,X6SJ/XOhAhJgd[&jJ[[g0UW6(&h2;F0kQA@*[aU^s'%d4b@^H2+=(1tddLNMf'BU>Pt<4X(6r^5OTe)@K;$:3E:FMjn=A?:LK!48'\DSMbg&U<pCTA/T%B%9MjGSB`q"ZTqO?M2'pEY]9fW%=!`/kT#PT-/#%a;je/eZq<P)_5r<>a0@k>9/YW?Kip/fZL]T%Wfa=$h;QeZA.YDqG?^;r5k'&7$:%gbuqoKHs58RlKdJ#KKN;7HY%"d&BsoX.;.pmE&T.XTnIGTUT1NEThMEVWg)'N3o2QEWHs=$iHkm5LI1U$j('M0;eBO=&?ZeHoYtI8T=rLEGjSgc+Ld)cc2&j5'*#%-2Qt5:DH80'om*Cp;#Xj$IK4Sgt8LSM)I`pVfFD<X%mb@^B(Z=X09j_b0<\>BFB1/2G37&mkSGBqr-j6,\jVXaF:N42,0f0Dio$B%KBQqfqdPk?Fe\Up>EaKc9#O)sII5S_CJCP1^#QM6&:JoBaSDhg&k**N!^PQ<D_/FP57*,mJ!H40hi%.eU;N's0koG3c%-*3-(GiS%<Sg[<$LN2'Gt?M1YgW/mIN<[Hf*+Q\l%A)7j1+3,m]p.f:G#tBGI'[FDg2_o@T"WHdEGP/!f7*k;5r^@HWo2RLjE"MRj^odM`:P@%+>hc"g[KV5OU^!,`J0n]NMZru2'e&.HV3J#%55J=Mh3>jq+2>]U<//j(`,2bD`1S0bH@kpTGNkPWqtfOhBXtN^-1DTB=4XN'oU:d%!bU>*]fcJE>B4C>"_6K[(@Bo++"F.4)NEdjY).YR/E4h8le0O`k0mGEQMf6[)CIY.IIX:gA)R0!nEn_Q4&7im8"*5ChK>,\H\sce%Se#%hPig`&S'eI?nMFQp<7=VOqfLiq9dnkHo$1/u4NAfD9iCe7=RW=KT0AUS]U#PfoYj!&>/[<D*..K4-#YZumb>Kd2U/-a]Cr\5%p6=UiigD2WBYM/`PV_3#:B<6m;A%0OFX!?$e`N6IZlXCZ>#-.S8+"d#q39+\%4Q.S3U0$+#1n/_D]rrbUrLkS'dIW[I%QV*P]Bf*%^"io?b<7K_dYbNGrJDu+olT?$AN=m8okF+_f+L&tSqh`TSDaf,^7sL``5^)`,&d2.QVu;6gl(B`B#Mt!c,_(c.,U\W4T"B[56:Op%g#=MF(?(l%BP,s$qjU"kNo&^!^uHbi6TB#=IVq$YmEu^n@gtG\"j(N><G7mok#:b%^30QFno^#;*C+P+(?enRo@orX@+u+sN?,bB%XJJ=uBk$o]>PA<,89Ct0gZ=2OdI>o&-;guMrSVEY3Gf`d:[U;ZI76Q_JiV7'3gLBfGAIndnbYXC[dK1s%]e5``]Bk9"em.Xd<IP?%CKh*.XXn$Oh/@$r9m3,E[tLQ\Eh^Wucl`[s8ROW-CCkpk6:?NM?f'D(1)&4c$>g#BU<mqJ.>U<-S/!>C5b#SKjebt?.+1UBM*cWd%.n(:?Q:gWU5bGQ;E#7EP.jO/ipT(]*3Km`L12?dd-=9tICQ-Is\`;&2!;cV]pIZE.il(5r<ihSY-ul\,b'TQZ(IojNR.5,od3nq8%CgH'RBBo(pW6Eh`h?rqd\@uJd<SJ%!74(n--ir6EOH=KR##12,L9u#OI!6Ni!)fI)DD'9Sd'_U[>=>^7GW-aq]g?[-Q0cA[8#a3S%pX+Q/,tOjVm4RiV!tB]oK<Gbu[dIQH&'#\kkNCc*dY"tqc9NiAZ$O?+7t70s^1]D2KaY^d/J9q37eQIM+M)b\_O8AXU;'1VhaB"C%^@m88K&nQ(A5%c.\Akj5\Ouml('FM&J'd,h<D7`B4#c.)C5nickatAOIkZ"Td!IN%K#boMUFDf^]*>T`.`4E'TCPRjDE@FTZHPr:%0:".aXt$'Y-MqpF%ooBK9tiu5cO$*h$L`iJl,^Yc8*/[Hg7:"_q'P2j)`e:O"A9_p#5MDsV$n',/7Y?*KcYBnI?O_Z-*<<U8g!;-%s)>V\SZ[a\Hh1Gu@9[MJ,&a'1TTPjb2]$ZiP^VuVZ0R;hX"+VaD"j\o6V:Ye]n1=?*H5tmIj"/)T^ob+\3kcR0Etl1XUqA''OgiU%#ADt08Rn-8>C9h"<]/Q>1<LG-H^11>]XPQ7#a1,d65l"l_Cql^53k>jXQ)F#J3/DS-1am[f"oVs?87VUcHhQJ(&'lM55=<Y/(roA%&.=#I0!]J=38kr5S?+!:mN8b5;kTejZIXZT,Y>U5?Zm17Fh\>SJ&l:0C_!4`:Vd,b9P6o/$6Y#u=Ck_tVM,nASjf/H>F$E&)q,\D%nHIXja%gh];N@oaQZOpq(!)U(2709$`FP;[[0j8.2WDTSe"g9XY0j&r,G]qFA#rOB.NR+d@H^\1:XC^>,7(Au?,bfVnQQCeMnp"T%@905<dME*q]c+)UZT^sd`2[AFaBW<I"m)IR^2:'pZ-V;XEi_c<O^iE"40auR=boG(7V8]S@mGio)-%M7=Z`c99L5JjC7>j9$T(_*%SQUoOf35M$QbBrXX=V$`g5a8,JYC<Uk,NAJM`7+$AsV[0GM[3W-ZS=22]9WR0$K'/"a.egH5mVa?OSd1\;@-2&?%&J3,f1"jLV1n%+XVh(3ATt:QD%Bb5`&\%ZjL*j+",_%m$=O4idMT.4Q;8:#"3YnX!uSlb`aCccu<_"9i0B>_<EYRn=_R&C<+ha_^;X%WR`K`PlT`X%#Haf^UM9c/CAIq'B('Lkh0BoJ$VaO%0=BiOJjO4[2#3a^g^nklFNY&GWjK[c0;bJ)$mqD$ULB>gl(<[TA<q%EKO`SI;d>)\nd0bU%XZU!WI#<\qM+(7H@g,'HPnP/2?::.or-CVCDiAp3"A]*^;j%Ml?0RMP)NBK2MH(\]n&IR:a'H!DCJOi2R?X7@m92FDE-I.c"*+gR%n)_a`)1EYM#JYq(LJ2m!d8D&:`L;+)ha`p9<?5rd^KoppJS[@7lVmRDA/;kK4&H*C/4'Baq.78E\MB`1/,+RE*#NZB.TC-4q9i+-%X.7#<jF^`S%C[^6k!Bp-5/j&4-%aVBoG>B!EZmP\^*FfU-_Z\aNtmSFXB-a\^81?phDW<;n+7+[Opknl^?D*i!8/`H7#`c'qUeZb%oF*_DQ+F&iO3+r-ct-4f@n`5C>?,XO=q\RNHNejU+q2LdfHP!'?mE/UcL?+oG)WSI'*"?MH3Yo]`S[\mG)2Lo/%]ckTh0kp.?7oD%SueY`4+557a7Joqa:66IAe&%'0`P7Wn*G@BG:LO7fKF6AHIQ!0e(6a+LY"-8+Zuk^\Q^&N'DPgQIC"b-ag_,>@FQB#7%pYr<O(-@%8TkoON!Prda/?aI(^]I^`(Gm_WK(ZIXFuLeqZ,$2Kolg,",M]kP]FNOC3'Go4R"(/la\dL_1TnU6Su4D"]fe,U-3E_7(ZjpK2FF^%BY&7,e8kd]"1<[,^Jq+=>BBVs/#l*P2oo'>$+i/_[@&96>(\!IF-9,(%b3^[>bDlTK*X"L(#M"KodUobE!ndI9H-4!R2*P#DlFqU%)T_JhYZ`^g.XST@d-C9iQGqqE2521!T/CJ"[.e<W3eL:.">q&"Ku;<Q5dcs.+qK2hCZTj7S7#0/GXpG5oKnV!W9!NL@!'H>I+>HN%?KG>rIe0&qf3&Q64o_Gu+CNj]H[WHCRjF&HALkAl^R&!?YD$F"o]^u$q5^CMT=TorEP'l"`JslYX!+Q7Ik<LcMP5>)lM#&$n<Q&8%kE=@l0jskWjO72J*dnUX%"FJEKlXO_Bf/Sq%)u_<5*NQ!/T7'&O@WNRd<iE`r-C5-25j,2[l'<*aR"@5V!6$2X`ZU8BSu*nQ\$J1%>ld=a>\Ef<#l+38<0ISO)X;Q,SQrf/"snjIMT/)/@4DKZ#7FHbT\<p>J$RYB6kitJaoK,=,1gB!5%pAX5(I*g*>Oh_F1l6k=IC`:%lA4s]afJRG/7_C2Rb.%j!05#n;__7G&G_ITWOa$*p;Ag8qjVKmX\9pL9iBeA5`INI&UGK@W>@0#\Qc+<(>Kb2B<t:jfdo:En+iH[%q"(1tQoRZo3HY*8FHZ=YU)Z5m$p&WVa#.o$%Z*e6kd^<IiZ(#X$p$!cp#6rPIXP)>T]80\QfcZZB@$t<Jf!RrWV0<4TMs/P4?\Hp%5D,!>(;)V^:-Xf!b8%]MLJC'd:<]rS/;HtbKC6NBEb5fPIKl@#"tL'Pf#\&043P['??lslFsbS@?l*<I@_L@hJ_M5Ul%*F5OAdd7%c_)Z#UpOu]q5!KDr@#chqfDQY\sTkaPRR.4jcQ[E.WK(06^M>E:F@$=qOsKViKLPsd=-Y3adlJqpJ729-d@,QHY=h\:%#R?D3BA1%@k)/Bl,GJ#O*Ii"pgc3m:,bqiOMI"`6:"9L&u^!MqQ5<F&5IkkNn]rgRYjP7&uBcICOW;beQq-8=%5N>qS=:DPMHpOmlXB!9QiL/%gI<FVQ2E0NYtpGC!-4bUWY#isL58<1a7?Q1G2:=%+^"O55`$<j^W5Ej(a]d9a0sld)SL`^4:E)7TbKDX[8Ta(2g<E76Ra@SB\NW$%l0N!)*+onEkrB4inZBZ&!oAA]S.9UNa/Yl3G-rBNAq=rIHq2^>_g-Y,@kmI#jFId5o3\RSO"c&aVb3]sg.<urVA@IYg+i(W[1l@&%nN.WkImS1Lgk0<cr7(<4iq0LG(urIu/(a`X.aq1U0qDG"GnR=+1&[W1PM1]pqcXug576?t`t[2_L"A8u4Og?V/9cjA^`QX^%t))P%P?i;e$=NGPI(:J%J-m(g-]*Aa:\9K^*<,3gcL0tc`h(nekd5*WfMdP1:k8s9.(n-OW]5/YMJ+-RZmSGjLk/O9j!3'kNit+Kc(dHS%@#CFN-\I^j$+&'=)KD\;a@YCfXG4/G6&1I@Gp52M'Y\Rt*gpOK6MXo`h'ls5[Ntn&:35k@9TN,o(fHa%g)3aLl]q+Ig*JO]To]0%%:35l;VqK0:LkI)]&O_BL1crh.T^B:Qk/J;02!?cQ&GO.=Pfn[f[%ii<E/%Znbc.=%R"McUPP?Eta931u))V2jqQX]t6QVZ,VFTd%%-oIY(gWoH4*5oXJCrq4f.NY#S2'RiA'eZ8A#A@7RVkID_OT?[:Vk.]`iOh!("!/>DJc*1MV&l$cU2j"TN[f7[P&o]ICb0rE?87&R%Q0!a(*idZJ1ZFB(AY6Wd1PJ+_Qu1kmViHkAV+_mmn;SB0l@?#`>t2FQd:&8r<^q`8FOS9L`VOUe?Cdd2_t\%6XU\WcDA^TtK3=`-%a6O%j3KcF<1)_:`cujp]RCuG+</0\G%sLq1D\jsH')P+\&U-NC[q\*sgs9n$VXCg=3;rHhY*BN1Z<o`i%-5;Dbd4f5+-*f\jV`')%oLa!"SWbXMH9RkqcH*Ebi=K06AAhb8+&;6V4^5fcOq/p%,s\bZ>rNj#k-\7Ppn!`]VmbolOY:ltAj'DU6s8$^(Gd$E#qA"X'5<W9%:bsHhH"/6Lo%;`1(84A9e`("f`*(dWW#jj\X\nNU((UKccL'.^1:_KO)&+6^VPDTO-J)rn`/^`/nGC:9`3]'eEtIm.r&leH#(eLi%Ab#VENG80reQ`a*1V8T@6VuGbTui\I#un.79;\DumI95kGk"D(!MarnT0=Y-^18W6qe0cPUDjW6F]6dS&m.Bhq[d0GNW_Olg6>?S%KA4H"Q*RnDR!bcD;B%KlU&Qcj%3/;,>52?P19@Qi+GnTU7dAoDGco4T_X4C7Uji;L-R0AWF*U5)bSRl\7OkM&)B#NY*b35U+*D;2%,%$tfTrA5?Q5%fpYAbe_>V&;).aq3I'b5O\:<V3K-P]D*Vf^Hg3(W.7M6>R3E5qgAEfQ]^$E%<6?9&`qIGMY].\,SlCi._li`%n$%_73a;pnY#/*]ju5?q!6bO>oJ.%X'UL9HQ&/<<XmO4fRb_UM.Go$nFF,A34(W.1R4ZGB3e]Y]1UA7o%O]4.R0Q\_`JsPmFK/7:i5X%235X0Z8fqo9UW/p`qe-JEFZdjJ_lhqQHt1iaZA:Bjb,5[?1)=YA1kB5(<bNMm&fndId<<V8NN3A7_<f,]iYQ!MT%od!O![1D#*26%^6CREo/Oj5Z#jl$93XTu$mjI4-d=`25:"u]nWG93V+.RKWUj7Z1c"[Te!>toL0aTA<A3$B*7Q6k0%JMq)R[FT[0PD'G'tC*'n8P:%<1/Z0oJ-Kqd,BD#YHt*FYG!-Dm)Glgm"Pa%M0dXMQ$.mfe8"rAmQ\+Bh*1Ioh,a@iG+3ANXflOn@?[.>[>7_,\V(Ks*5\ZI'dN03%.N1_8<SKR!l=giY3#GRJ?!0D,%=K!;4fMI[V-M/>3HX#ZZ'+N5>E2oKRo'nhPb5JIrDKnj*]Zm<5fg'4KCuAXG)4k4NT*WsZh%jj%8#Rp9-JJ2rrLV[f7EcK[e?Rq2K3<XYm8l1-lCsd/e@\GObAWP"l@o*`*K?aNa<usG`&6TOcFH><_[@:8C>"jV/s.sF5BtW($%_nu%pY$Y$CVXnaNnlLcfd++0_8-"hL7:S&:+&uR=].-4oo]^HUpi-b-_'P6+6FKpFDA@.Z5EA;ACIN#NOo3Z>scl[VE<]jg(V5E2Vkp3%O/HR<WCPZL4.Au^?&'KrlXnTd3?dHUflRF!j==ciWTDRmH*,E9VGm)mn2V`FbGI'4gN-d]SXQ`f'&.K(Cc\t/3jj#D0$C+jK2uD^%oP3'$C/';TJ)+p%D,'8`flUuOWMZTflte_j%'8JJ9V%VHVcM?i41n(il-u`]bca,jRnfMaf?U8*(<;FbLADn%8iE6o2Te;or5I?2%C:SEkGGJQ89rF:MVg;t,7G2ct\TI]DQ02],WE#UJ0P>%Ia[Cj+V:3!Hn]Yf123gXHm[p+G-Xhb6EI.NsR^6q&P:UX--QL8jFF#j9%>*I=9.!=Stg>`C1b)Yd`9j@u!=fL:Jm6j"G!N<t]dh1u0pgS]59m3LZU$g06G=A]\?el;Yba%Us;p3-Xh\?<SniAGd'?\C\7!)e'%96p.N>'<us8>@e/mo8'pGO,rGUJ4X"!(TgFe)Ac\gLh6,UXuFhr_GDmPhSQ.]ZqMPrY)R`[R]><N-OLGfA)o9%<^A^GH<&3\`iIW%GXO-:3I9*/`RilOpK&D1Ub`]-Tc]o.J'm)kfA%h&nlUY*H.UinAu4'IG=FA$AFi*5c(0k?)[h-NFNrX0kJD'T=#f@mP^UFA?&_>F%//h(@2NTG(5j@,`oE0UQjmmr)h7>90U7tp7GX:.gZ%n2kf1[ZWmI;2kUcUL;<jGaaFFuO]:0a/nGSkP$In-Mn!Y)\];EiLE%9(Cg%[]4bV;jgDa%o#3$U!nt0Cp1")f]BkO1_cnTB`+7VBIH]FObiEM10-fqGD48]_^'E%=2A9-L2q%J>#_i#3g\Xh.]\8mJ!]#UBIoA'%87YfbP/LP"C<C#ETWd<.Z*q!QhPl%0ZE%Y`Cg6"/B&ofq9icEHZ;Q//X'Q4BkKorYR<Z^qW!,h!.u'L%(0AUO;4`/_I`<_5Wi6=H%kM0GN*jc@r\9_uZ5@&Y621+_ZTM/U2`t5>m=<`CcDDf!0ma>#8?nLk)i(J!hAm;$Y[8mZK8uJI?4Iqn]TXhu+p8Ug(k;*bh%W>gA%hf3l&1fW7LV]$.UHl<ncWn>D+eX,04a(ISB@2eFdE-LkIH"Z4P*T!$)KkYdN_qbJTjdgA.SZZlN<Ha?@meHZc[I1Q:33cN*I_%YH%p@D?mbrOn@;-;LsC6$HIU[W04b7e[]S&j^*5+#]%B/hPMqj]09cP:C4e.OT[:ZCnjNgNThU\/<`_AYsSP51?hFa9>9[nDpPOtIiF%KQ8P6f9(V<3"940P>Hg?a3p=hX9?652KCepGBWiQN3FP@;gkuXaY?0^*$\$K8XH\bC#fmZkO$tgpn8kCo$uYYFP9;[gkfl;e!Q(O%l+m<FnLC'#j/P3oO\_6':^iVe2As\X/I%0Pfnmn/re`gK0#$aNU5uun0?<`[/]1TU4prSqY&?e5HSi[GMm%Kg1K.\]kN+_,#@SH1%=jP-0>X=QK]'^0Z3.m%ADM/,>N2b:d<Bll@<k[md(3m(qXM:"$<4u5QH99s;:#?lnT.4]BgLmgY?U)_D_O7q`YtGUJm7McHga?5;%hL5)p8lV)ea&ntkg/:G+2<7.\`o"\"/:P6G>lNm::;We#r?SO;'J![b41Ti7ILfZLdJ]naj4pP=k2/(m+Gt@!KmVIRmn]B?S[Dm6%Wc\iA>:2;1*?etEX5]j8B?VOU,8a<h3P&MLO/:DbGKLlffW8_ZY641I5HNX2[l&t2XnM74WNVQtf99jD.<>G<[\u+3b(K@mK4qnI%VH.`o*]_nD^"gBBZSk[DHn*=[e-;QAcmS)AdsKDX:pZt)>c<Gr.#7IYah5jDY>s#?h!@ROR07qe$S.K;@C&F7kq"<&1lqeP^XO.6%KE*\`ig0$;Q,L*+i`jWE[otC2/J!\]rf=>2.a9=12b\Mf`H+tIUl91Q(c;]^S=<Xk*4d&9'"N\naf:r.dYXYtg-aK&\Q2b"I`1qO%=_UCo4#h2+$WSY%+t+=bdk[G9-Z"#GM]UC4T:mYbPC[Q%NFnupd3c-1$)NjF[#Qt7,t^h_Z/XJYE79IAY/nqJ7h/Ur!?\YA4&\E#%2$4eP7sqPujL):UhYbMmQii!rS;hWrHWb3PkF9-Z,[/0<ETd2=aHO'62<2]kaX_V%@1FD:&9Mi#1rL5JX$r.(G0F\]4=fj<6[f0!%,1d9h/_35`iqj3fKIL9Q7NRfESA?\Q!?9\aL'`(XoD$ZE^lH-p<s:9NlS*^=/j''f;1;@QruM:S/E4%6:\5o\"R4%3g7*_m-'E!,%D3?tZ$t%2$H7"jL*Hig$F.h>7j>keK)aCKbbF54IW\=%])G:6=fZm1P<,,#?c!,*]+2>_lrJN/S^Xj<%-(I23TX&(:k\.FuOcKo#%;lhI8FOEE,cO#m$mp)I(Z(q'XSA_[Epf!rnK61Nrm8/oIaK@2ZAcXBZPZA9el8^,EZN.C4BoV?K1U@']J6=`7n4\?&M)X_!l'B>q%!&`N(Lg&0=`U%7RT[=?Lb7un+"fT-H*9I7dA_Cb&j5_0PPfS>X(80%p5[u^X<Yh?G%Ub<6%3O1L*TV_4;Ejamfrf`PT0Y-cKpVA8%nRMFLguXmn8T//:k:YlFh+>95V0n_Tj]*tq47+T,F"cWR\Lm+h\<QI?rlRkdjc_VpR?o2NSl'ipV$<u:<9r?)GM:_Hg@tH7Pf\(A%]m^<K.;ngjk\R3o29pq;j^(1M>Q$0<)iD8Z:VT7ec\=3"YMZUkTrrI?T7/DG8K?uQme,$>=l^gqj=:&kp\O,)m*Z069CDK5l)ES*%Vmu'gm!J^'j-_%,>iT-Tc)r4Tq_Gp_Gd!`gYE%B<@ea7or=6X\P&&k=Vgkb>dJV-sp\O,ES1/Ik02"NmmU44Uob0-90"]_2N5*2.%DY6(E/+$<FYkD?)Vqp[:)`lMXF5ARbf2$lL`V=k/=3,[%pg-0V/LjEM3VW'7I]qmBcH(;*qIqiZl05nF?9_-X<^5uqa4'JLdt\?q%i@H]WpKg)_>Q%O@jfEh-ZidI^[cTb5]Aq+^rD[CAjAs%=ZI4\L%#YnYAbZ&cDfgiWJ(_Ma!k20JofM1t51P#YoP7=;O7/$SrD[P%%/*tE"lS4o`TpO#Db.W6oUMZuGh!:kfWunC'?%/ta7e]ru'=6-4N6b>D(cphd5L"@#:XZl=?GDE*EPqPI)7bgs$J/bPhWf==I=14L%ZRe8Qi@n<m[&`u/DtQ3]>b-/DTDksA.[c?1h<T8KNh(3oT>$`r:H,u,]mb@@e8P"Al-q&NHi6^^HTh74^Oo^#hQ.+Qj#b)af"I.5%nmm"5<^6D;/5(a_l!?UQA9]>3V]31u:Z&@Pidj>[?9eBmrR=lQF7/_M@O6B%TC+^@-f"$cDmkSe_Hh>gT/"*WS7C0mGnP&g1MBi2%^";][d=VYkp!ZtN=o7=OHi<RO6ZJ1UZ?uP7XHWs(.!J/+^"6&0a$uY+HiC^-qXMAlm+V("ofM*!lrH@<]qj-Fp!`YWEnRi=bCf>3%r=!:X??iZGHuTEA('g/J]AE,*H89MsBr3XI3)L:d"s(=E)+1udpPQ=HR67_o&UdcLgT=b)cTA27EMQhp-3Q4NA$B@!M@09oQW^%W%L8G8hAc^(Ih;\CC[pd,)7?#j<@6TsqG*f030\>"k*.;Y@+aR0BB9ln]LF8/+^N)CD^BL]"^!Bo4pP#R-F"e)T:]6eH&l2LJGHKcC%aRA-U,8LT=8+F4^CS294/WjWkg]s.aj5MLLmbC6<AmO[co)%dJ-FT8R4'_Wmkrq!@a^t<k6Y0Qhhd5[$:?U3UHcsT\enGN&.T-*(%UK2I)B@`.5k*&E3JOPutRAXrcfb3e'k:FRDpDMmk3onLnj[,_mPp`=f<f&jYBtBpUd7jJ7``U!N6RFSdBFCei?12XWrt5Sp'/t<m%gJ<oC4u_u:\V*rl6);n)W"l<+AhT8g4_u:#$<KL0q]toah!W;IRWUK"+_H8mmMn&(Z<7l)"lgfmlc_5*;JkakHT,G=e%r>B#Z(3G%jk)>CRA=sh3RkA/D8Z*%?L;WiEY9u"Ejoi)Ct'="f&"I_p+<1JL_C&9X^./:c&)F#8_3sD.J-#O1ns^'^@Ya/?IAG6`NRGEC\5>#%^+n;^_-OXD$SpaA3FQ4#ad68r)mF1MW@XZK5P*F(AI.RHroL1ln%s/)hF.jM1;82";G@OYHBhiSRS:Hco$[,mc`^@D$$<Yi%%qUF%qH1'f'7$@8m=YXe/f9SpgTa9hN!,[K-esE'a+,Nl5VEcATWDK#341@5HL!q*_(,.EK<N5oDsmoUj^=K%mc'nn.cr>Ym/+)h>-$UG%kH)]_[,I<78F-Pt"0_>_dlS0`pr*IlK'59c$'0\dGIGJin,Se;W"a\hG/:j^qV.3La;;Sb8KUXD@k]P5UB%ma&?jf.(gIbkGh$.2%_$;s8U<NbCAfp!`#AN#3W>BUK_8d</fj[M_]`8U1nLEHAs"07AllcZ+Q<*c/>D$a=i2Re\4J?Lu;JXtnq<`mh`Fr\c&T3(8CB%QG%@gI9:Q\&17E4c"PYRF2gq=\LM1tbN]R\_6dUp)FIPT-cK\\VDkgspFKX[]_p\3'#;ebIM('l#9fG&80uq0J)to:<R3:;2eD)!hti%atN:ms3;ABK-60XhnFYb_2DAR/EqI0)\[nd`K(j,PTG^$%=AKQ@fHMp*e(r;fj8Vmh2T(?eR/JDL"K2,Lc_gpad5&DCt]9'nq:_L%r+^(Rj@eI7DR()69,_Eq8#le+$ZloW^%0`Z-S'b>HlS]]lK5_+hJa/&Fl?m8V""6*@)9fV!,?p@D+D[5=R@fd'k#,1i\uE84,RQ<%mR$D#lpb-h3;Jtp?^"e=nNRmNO+"lYI"F;Ki<WEc81B+0,69F^#-WCZ@+]Z\W8SAg@Y0+i,jl*q;dD)%o,%.0lb5'"4mX`h(%#5.%_3pgS`A)$C4T9pSaoMP5^5+FS\0rnHen'X==K.nK@%^$u(Q*UHK>ZsUQ!4dV^O%UP?+G_Y6h(^e'c>\I>N$8DIYEm%MY5HS7WA>b%Y'I>VOUgJ9SpJID<b&A^-UEBuIHtjh.JLK4/n.g&XMb;4djIat>9QrOcJ**0"E0>J.;S,OCZ$n#`Xofad2QpqTfbJf(?q7RMU#Lg%hN6s91s2Ni]F4+T/S8=AQ)jY@j/#QUIEB6G>Q67R%n%^@&*<9/c#ZDnj.^5#Y.h,d)c).Xl)_<aSk2^0Ed78:23K%R3Osg7b1Z#W%H9GYO^>:%o\V-QrkQpk_1pq@SWTE.(oOR\u*@3RnU^Ag/,))(A*ZB8\8%(D/$$WI<=CplB80dP)T7i*l.E/BTAXE)LA;Ni6A05Xr%#!-9U*OC':ANMLMdjtfMQY:oQ0.BUn-;Eao!ZQJ+;KZ/7_QDT]K'6397D'PSU*3&'*h`+D>JhfF\Sj,`0SHc>E)0nI@^T_A7RQYt%hBRjUrI'WGU)]pEa")Becd<,#mo[l@-QRc'p+qcN6C[m=l<m"4koP8*eLT`:=I\-83?4d^)!F3E:]Y>G[rn(%(P+OM/9-'I*ENfk%IuYSmjB@4(Nqn*g+?eETe*.1`e.rt`])Z:rZ456PfXOjfnjW$L2u;-V9LURpJmLPI9Wm*O^6ffMd_i]F,]47\6NF%pM%[I40`gX2%6'cR48`r+^X_q5a'dQd&T,RT91/`R[)MV0e<hi()5:@K]*HIt)iaro$F9DO/dNOCX(#ZDYFE&UOT)h!"Y@ai,8IB2KJ=$@8+ica9%fTF2eSCm@.Sh-,q;8?>nJe!d8ATNr#c?J)i:ab$U:EEna\e<.L`H&c\HRaX;]5ME/!r4E(gh)*.pln^?,03Tlb)2Mm.J]RSKquMQ%8f$qo0)_Fc`Hi4/B=AX*EQY7sVhm#fRDIEa9QoWhb6:5WpmuWI3?fF,nOr)TRpu@$]_K!hKqDqsFg94T\$Q4oS5`GfG8"dq;Y6Rn%Y/FO8PVMgbbtTMm7*3.qdIchG,=SUR<Fg!iA\2%F7bpIaM@*&Nf@P1PW+,1X=d,*sZ>Nd^L\sjA6]TY$NXp#"5%n3+>9W2hBSH]C%hnGI!F;'$W]Ns=I_/YSsXfP:k7&VpsI?:#k`VK2>WDVskH:Mo3K/`U'B26jtk/k;]#.ubZQ9`#-nt`N\MLC&1L+CWS(Q^pBnlMN)%fioRr$TeQ$k/2`Rb<65_W*@-][:]5V0+JIQ%G8/P3*'uW]_jd%eZZd5cP,6#[g\&sr5]4/4Q*<J!:?e23>RjHNkg6BOTg8-CB)Zo%R%QELc7<>?#9=^TNgg\b:ja@7o.0mDOg6*!,8MCnemsBQ-=K6Lpq)[*[];g&/Du>)8%Gll,%lJKY/UTPW@riSd86pPi0ZdrEJ&9C%'F"BaZ3c[bLB1)A$Z@+2'3moZj/7VO\6T_"g=)A%-q]pCaJ1fnDYNBqa=HbY<<1&#KIXX'1I?RTLfP-)5''"Kr0e?kB;KJ\JMXn]%C.dpPV;8p$6DY5B:6Kb#_"F`f>(P":Z<oT'I3&J*R-_Ca>`(4!<hq^8af7$U)Etp`2P=_3eQ)e]N(,5ii,WfP%'hI1"VQqQg!:9\%+*NfHU:IJ/!nZ@`Tt(1S+SZ;<<]%?HZt+&(NM<Lbcm+j`X[B'GJ'd>8OI$UaKNn11cCtJ>O>/o<":^Eq`omU/1)W/dE.Wff6^0<:%("fA=O?a#sa3F^F+E:9uOGkVl6!QJ2$0?-s/+O!H"AYC8C+D'5e-f$BnV$1L27+PPs#`2_j;?s>QU^tq2IS9peL%pYHaH[t?_YPE%^76MKZt#blZhl5]D_?5!L&B0,TMk19[pD+"Y"0l'L:,g1+9p2q3!NY^D3LM=]\tQbm.m"&6:O$JHk;]s]qg;#U$[oWDk,RL..<KN%hD4(Z'VVFdJ1$#C?.pFYcmig6aL;J0/\'b8@2ZPoi=;"cg.MO+Y;bm$5GNF\@k`m0o4]S/*HcV[h/Qs*p@\uDo_pS,>3EP6jfkX_%napK*dUcS17G&lMa,\<OhcU>o0J4N?KF76G4?7l:^'QoI@I(qg[Q'#nS1,<2l;HB-Jbrnkq_S/)526ST#hqS"=V#25pa5Zb[2"*Z%*:k79-kU,+%A#T8%AuOQq;r.RYJD>BIrM!).UmO4a53T.3H-8*d.X'c"j7WIq<)btOMG'%D8_?qls6r%XG-CF<THpAa'$YX]LJ*_%EB3*QpX!XIikg,_1!7+Kb=HcaE*tp+J@A;Y\\iqCpYLBlS0RkBb7ed*V#buI[in6[b@B&+R"N-50]6U?5*YO1DrDu?A:93.-X@!<%qHonZ,hsB_gd7@6,t!dY"rYRuOC`ZeA.8+,;&iQNUTZ9h3_''E.t5r&lrNTh,nUEBcO1\6>D^GCJrKJ0*mm3L$6&l0Q!Y1bN8fTV%,37+f%BfglU_.gK,DT.O!2G#ZEl8N0(rZsK0$ds5O!09.DP6bY3Gt5N#*HfOJ/mWC.ld8\CG:2^VV$o;k8uh:&Cngr-*!*kD^pXD%R4:<_hkA[5`IgSOD%G(uo'VTfN89'Bjs`4R#!-Qf%ZcD+\]@3]drn;SG0^5TZt(,SlUo<,X'T'od@ZCC4@#9iT68-Cq_-MW!3Wd[%R+QW?&Ye@D('sY),,upMb^(`mhT#_^e!"e\;=%?$[YBtG']rPmJ)@2tHP=1VRMaIK2p*,TDhbNYIErV37`p>\o259PNGsptTJcIt%4!<!:pT/T_+VoYHOJW_6b'4ls8@kLQ*%DI/IF2H>6#Y($e\T?!fEY3eIh;F(&2>;]SmMf^N#b1hk7_Chin^&UN#(M@W.O_M3[d&4%Xc.1sC]W$%iqk:90"cY[6Bl&7M^IT()$&648^57pqoE7<fPiUVP7[KI`I+VGYWf=ZKsi<^=!3;;$;hegVJ\X[c%8tCm<qUSam%OT%A?qQNA9c"<WLV]jLW)4Lkuqo"pl38_i2]H)e.@_oV%`7@br0fDZ(n)I;j_2Pk])C:B84>/pCojKb<>U?qgifl!iYJN](N?mG0):L%^I^C/W!`T6!(N,&B#,p6+H#0#"U'k/;&//$"U)gp**#9iEI<,-!qNc+&A8TM%GaAUoeE9Mnc:D*>[$&t%\%DSZDGW'J;X=h5`fsf%[+:P.X!0P@G>Q*?Dmd4rN3H/o2#oWI,Z$3b:E`pT:W\,4'o+liH$m,m#5*O8'1Uo?e^]0Q^rWUX"s[#1s2@6t#pV.0lY8\Z#pX8X%pm$@t'1PZ=MkfR9?3a"X@>*6@e:E:68N-o#;Aas(+c8F&8U/`L@`]aG\JC9?_?c#=^(ug/^rS<`&XXrK!0W\j$Q/J?$*Q1(68BZT%`j&,+Z%UXX[>LhF&h5m)HYh.%eA)KnKFs/.qZR!,iP=tlo=KPMHFCn_5b\Q0CkV)q5dGVq8KVAhI9-I_9c-1L*7k6)9c2ipd4Y\:%I<,UcV4JpmEcZuM+8IHXLehI)!:`Y`WQ`#@eY:5h)3Ymos+iZ;f1MGso8f7p#fi_Fc&(RVdI'4UB=Nap+cn:0:'ohe)UL!n%*ktd%P\C[5\7-sT]]cXmSNmV@+\'BMje!G--78DDA?h!W&WGGHQ@a't.saYZP?\"m^PMNh'/dN1@GRaLMu=io<s5)Nn.5=``5WhijbeL!%d4<*!r5SXY%$N`o0-ZCa]ag-S+`UL>@0G8Kg-FX^!"ogq'I#"?qL0$]51#XGbV(0W#kI]e6[fUZ7\H#W!(`R8J-qBcaJ6RM;A]]d%9#5f7]*[AS5VJWWOLPsK"okNr3(!k2!;+t\$$X1AU-fRugoD!MY6H8P0TqEW";q+'!Jr.^R'$`@RZ0,VY6ZDB0Z(iH.=`[h-BMoX%#]#>9#84toPP#O=%hgo&P'"&:*NXO\oNmFp"VONH6)U2Y$V3*_"Rbec%7i<aKNn12+F1hV.R9_!o8iuE3dV[59p-fS,c8$h0G5Xm%SfB7g%G*P9"HppO!`4CmgBrr$FFD)<^ClX@\*l]a[6)$6!6H>:iFSCp76A/[kp,IT]YrDS=[16:#p-kfR799NU6G(5+OPiS'WH+)%+OPiSc3&P:+HaO^G75-n"ArTY7$551!tqonKV4E]1HD94,X_q1e:0uMU%_apN'J=Bjs^;:BTS#H3:VK/_cHqK1kB2PGR:"FO$Gl(%C-\L",=4lb21S(.7YDb^bCCl;LHQn+>I)m@f0b-1!6ICWOLb_tf0c85,h#t&73>C&AL]efpCAqemjSX*<(L[&8H_rj-@m^'8ppiL%#0R[nQ)=\-EROk-*g0><mmmB/6ZN>@a_?k^fCt@,EGd\\ooS):5k8r&#BkJL9t9(&PQ0qld0,VLO\c&k7D?0'+*i,:T]!_onApZX%VM?E<_^kLl#+HlfPTCHhZolhmCA1Rq+_^lb*YK0;#!F73B_VkeXC4oT3&Q(oOmnmJ=X2`qqFACmct3_Prkj.kS&LNC=3f[qQ1YjY%qXQ"d)%Rg/o;R0mEEKXagPS0k[L<P.o!rA<a6j2c><[7'N[B1Vo0lF1oekG&iU@Gd'oOUNrU>s=mtnZj,6o:4pW4aeGQNan'mAKD%.tirp_DOIuClW:LL#l=/;6rZ_CleWF'/_Wq!.]+IJ9,)?IMipo-S9l>bp(PZ^F#4:"OGU2NlQ1`'eC=F@LfG*RJ!6u41p=Z<3ges%<,d81!Z$8KnSRg:I6EMWG?Y6Cr81mo`-tF(Mpl5F>9)L/`8\;;otsRSpm^+!#hOYD-glhCh[7+6f;#`lERV[H(.[\=#kJ7;dM!/P%PU3lLiR46]Yo%g;+GWDY'o,4cm]cE5i2-uMaQhlFgq/9(Gm[CH%Y1BcSAFL.='Q2u:p0#@OWO<GkUQm.r^g82p4]&g4H?[ZA7aI>%0CElr;aB^(\8ZVHjN'.tBkCZo/6%0:Cj/&AOGHu\q1mr73[tNMI9WQ4bjDX!oldpCXD@_D%*nTc),RV/4?X$NHj.h^%_>&8M$G]b%E1jE'LPg*7>euU4,kan.jpdk/FZ=@I++%$.Gh47&CE%j3R4UbgA<_&Rr$?02s&>\IjLRMkW8W!:#UG>%r6#0M,HrhZj=S`XZM/A[%`uunRC,g%?d%(aXV_S^ZTm.lG%'dm7d'TlG"k9(cJY)C/L5HB?nGqf2h`NS%h>hHg/BBUNpLKAgEs#sO'8MI&*?n1<8KdY7'd?lA%(OU(<!15nq#oKoX<hK*W)EnUOT<P_a;k2c]jQ@Nf1"$ET>_C2pOH@NB%O##5ULds+Gh!k;6]XnTT'$,^O1^8&;3;\t?_Va@;2\(W%?fIOZ3gCE![Qk"tM!gB8KAIEETgGu5LUN\fkZ;iN.]BW,<`c35DSgp'rrF-1#*gX0^p376iq\5W>gr;Znba3Do.s)8:WN'*bTa2T%/2/]20oK2Ejd;lg)Nd^]@Uhn]8d@,E9Q<!c>`oS-+G>b<m6i!`f6>,gfLN&cTJm!0#9e2'j9ueJLiTq?-r2Lg_=Vu,[M\7cP+d7A%,E\]-O6jErlAN]5,cJKM&LnD79=4rn,#4B.K+^JI^Y81eQkVY8#2!bL$iq'M(I0HJ]S5N_IX$PX3g9Nd+M*b'kYRiS$DQiLr)^o0%UJmBVB>jCG/P^NgrbR3\f$cG8q;'nk$o0GF82/,t$A/bYqU5Xai,+dN#M#1h&&kb%BQ-F?+-+LOh)bu,%Nh6Z5l!]9,+l*q'Z.PA%gGIlLXro'l\9AGA6d@U%%Aja"ZLGSn3'`$]%:E'm*ce%u@%cLh#tDbD,7U0h8T^$l-%'6If&?<[4E[cn!%Q6NJ6AHaJ/>Hn])r<Q%^*4tqY&[%qr<Z[:QrJP&X<Pq2P*dSZ^"3AHKKg(*n,]c_aCBJMq6]6Pk8n9mQ@:NUh65U?&ema+Co*,.Y@oqi\;PPIV"c:j:04`k%hV45KB>:Cu:.Hl`Gu&ul+Kh/0VcY/)<+]2Qg:9u0om,+8P8bQ7jA?m5#kKUs%h+,8>Vm+/GQ<<Sr_P%@FoK1/,-"s\*Zr[6%Y>ss%)V-_m2M'.E'5%Hdbr7W`FN1L@S&6h6P)K^.rj7F3-kca4[@)ZjHVdK&'p:%Tm"$h&&Yj@r+Q84jY3B_fE9B@!W(9-8!75B[X,OJt%E5*DD&\S^)M*4duFUK]1C+K?"_]$gP`ASS;b0)rT?E:?p4Z&'@csE_\%G+P;gA=Nu#bttQi"!a>3)]iDE>R4;i9-D;FHM[3Q`CA\%.hiQGGB%4AOO`>mAsro<&?5W&elVfD+C,/h0.J):b<jr2/1;X`#[E`8gOS6gH*i`DP@nN"IZ.\9l'BrVW4p=;m@mCMJ-blr>\0ZK%h>aRNJ?XBJC.K)ZLWu_0Z8'l'Qa!l!mL3,;T8IG#TYp[A+nE7%,giYJ($Jal^c:Km+SA]1kTM\mE^sOB+^i(N&K^,g"X)m,OiSc+%9mV7$`q5Qc/OV_Mrg4aIM&%;Ic,<J.$>SiLQY7Q?4c.5PO@uqlG'u+/_*)!1!TS2o&*XT^4h*th&4%C"We[Ne+\%*&AS2S\H3j/Q%q%S.2F>^G$iF)s[P!(.[D5O=["8Y/[:HVGW*)@di4b[e)qgb1=89N!Q*ZTi[PpYHlq:%?Op_0Q&ai#3D'=`Y0Hs_SR9nL8n"P13j%=3H(D_'q(IT<dsnP7K$d5jEL^%#!neHYCOBn@.B1!ir,_XeDM;+f&(ndRP)7"i^SB:`Z2o3b#Bf*?e;t$:F-W9(Y]\c9"A4ARN8`%@h@%<d52imGn<$&9.7-cY*G4[EsZFW<:1OaCBs>Zr2E5B3T<p/>T>@Dm-n=?J7%82L&&eSX!7Xd]&@]#SuVZd,puHgHW2B;nEmc5%5iCIKe>IETT^E2OOqAEDO"1*76g)*g-RfqP_C7UICu4jlgXC--E)cFnj`Z0a3W4PK%.;Uf>hQ[E'_i'bPMp+onJ:gE7$*^(Q#M4@%mstW0+u%@c'X<<@im+nNKT`$\j1Pk?XH["%=W$G%'0uH)ImGd\s"jDHgK%;,g?o\p%gs,K>XXOL&J:fO_(mmMYqFKT9kaFYJ'PHo%rq<g&Ylk4UcZ`R$m9[_i)%gr.(qo@`3"K6fV>fV(?['Lf48I0WYZl#j9)_0U/^pbuX!!'m[ML!s$IoC&PmXk"=Q]@>>JC!5a^k%Y%N7WN'9$-.Xhu.p-T&DOV#O_&trEn(Q-pJB;5@UcWf8ItFP<UQ"9h,$2X7Als]a+pcNY2'L`"[V($g?7[A8*+-R30.gR+#i"n"gCn%YIsW-Mn`MGZ2<^*3d9']S::>*lfYI"FQ:8_cYVX<BDX@]o@C5sf(=9sF0Pek7G[r*m>:=NVfT0DV,L\*9?MJYq4N'mUsAJMa;&ju%Ht'=2mO7l"*=]`4EObSZE'q`T^YO@m+V?ZDJ%PfWj:!F;s+QQUOatO0*ddI>#`&`7&PcP&?hIc,=lTC,QXpH+chigF94E7m@Z'"?%m5fsJ"%"2^Xba7Pet!a62F\.4GX1=Gn`[]7BgWs;icaq.>]P1E4Ls3XnG[X8Fk<5`k4Nr%]K1QA`oZgd?Fb.;h3W'8^%1IXrSo2>%Nh(ErFNq^5-$#2"h.nr&>^;F'UGbe-qim$8&'t:Fm$S%Ar,ZVJYcdG/F9hd>oDDE(Kf_p,\Wq4+kt%26N^((-q<@Z\_P"1-qA["I%L+EZg0:,s#Sf[q%89G$Y'A\eql5R=Gm)tfhS:Q63C0*Fdk6YM=B;I->3Url]V;11=L1'6rYV+4XG.RUWaG@;YKQ)M:p:Y^AmDM0S%3j?_^]JZ=lFMDO4asF1#<s`s-^:`?-^ILP#5IN6&;A%JDrQciYp[-'aRgA_#runlOpP&UsF2-NF'B@P#dtTm_`hbcK\OhTJU/@NO%/p<Mnh4H\0Ur$-Bm+#m_9<n7jY\&@Z<IW+]gM;;_ke-i+#d1d`Y]\uO7T/595"<T>T4`8#YATC#5HTWdN.g\m7Ur("B^D;a`"9Vm%>fp_2k1EVj1-PNtosmZuI.W*]'1HDr"97!g\fQhoH^#0mPPE]Tkj-\H>[31M:#Y[2EY14P%2UY3$ugpWd%6@mVlO0FpIB5@mX9;;%oBG?QT:]%r5@G3"BFOSGn4(h!YCH;0#d+\U[En9UF$U6c0A'YUaZhZX<Md\!F'#S-FPj6,Ic2$H_X:`"N4G.EG%!kKHC1nF:[aj!%&R+khrl_q2?/*JZ*9rm<X4>BXJ,JE(_/5dWED%S-iPd&!4^t?<VjE%Xk`ZG5-Tq\*c@aoC-ZaIF&qBqr&Tg/KE^_>FB[HG(_uAfK%4"mkXp8O^`s+5K7e/3IW`.K.]I_6<#7mKp9-Lh'rKVKi,Nt=!*`\!MHm<o;pSbKbNf3Yti5'sp8:3SS)]))#Cl[tq6\B@8!Xo6q:%03r=b^]2\c*cHK$"U$,iF*F"5(A0fXB,9[DGl,bg,/$M+XX]A2.c+@0Ekf;/pBk/h2ic[N](2IKJ+#U#_BbJ>IJ^**dVn$jTSA91%>F4&V+*SBA)S7>_4`dU;q;#s;!."5HFk:"RI-etDrFfP%IMj0*[nbi/bCX\]V-Uk2p?SqHQM0"6([cfuYWO=#Z6.EAp#.Q/^&=0>%,X5])IsCn8=,1_PY8bO.^Ae*:nt-HL3I^,iL$SXZUl*2Eru5u)V2B#m7nDdLo7+g"iCs7>OAo,XLeN!&1Alu6d7qm"pu'jnOu_n_%MX`jMpD7j]]=0q3+;WitI:NT#T/@=%fs!dCRu/s!MK[GI*Btp^U]8S(Cdr`3H9-hB>?CA>U,gE?mF9Ic/:SqSBN>s,D_N.IF_>+"%aMjac11SsC5V;:*Xk6,RG=1G$6s]_320@S"6r!)Sf/S!Or/GXPP@&Iq)X?useA2W5g_B5?Md*^N-H>r'0>W-@,5lRngHAN`hS.N8%]lP*7D<n%tbeN!HBBT$t,3e!7s3:/mIs^0$Zq]F@o7*eNp<n0"BoqH#2U<IOqrl%XY?cErIcJtV;]C)Ml'A4%I-]r#V3O^0`FCh2%4aL9lBC_g_\%OnPrq10Ip1\)o\d,`36.%gc>G!1CSFN&CC#rhPrjoc01n9V*os.*=`quB[(&-a*F@(KN+>YB8lq\%\^R\CpUj&/-%Ia#1)%J4#'K_BW#q=a(E5J2.)o'lQAJ"@_nd(Lm3l-a%Xjc^2oV9W^\h3_bV^V1_>/#7FA36[:g^g4[5f_IKhs8KWK!aK^IBSL*.%o#'567@IJ/6XJu;2Zg.dIkU9J&\52PKtB7PCHoR]]mK.K2_f.+US\jWVKV7jlaQo_7=(<g`,PRmY9/c(]`.o\B0MDGoD1NmFl%Q6%`d7[.j(BF2[HIQ'Em%&1CI$\<s&p>_4MI_U7XFTmiP]j,Ka4H:FDG.DP2:J/OE^FlT-23*;YA5j]b9lBK"U[A8)6&sfSTWK)G-,`%Un'X81sub%+u1T!s/[pSm+"%%#!V"oK.C->r:2f5ZFoIG4t;&:kM(>&Cna[A,4<=\[SQqpbOO"NI:NTDY<MAB7_X?LFVl\`[VLZ=%?gkc-m^pb@gYXX8&Ng!7IBfO_.XDc2S0#U/]D2@o&Rh<G/\g3a'hB!HgUCO;m`kIirE!l$<WW4B--R#<n=Mc?b#u4`YDKLZf4tXu%?@iE*p%Z)h0>)kEl;*J5D)^=)9-JBCYl_g=(`##*r"8MR'QmlG?@)ORYf/3oHf,+_L\D>VIf*?:Y)^dpZe@ouBnh?3>95p]S=@bd%?<C<XZ*Sr@>OH\`IqATW:A<JW5/*l`NrKUHnptA`B-*sApTO@X2Umdb@OEqjL$K9k\&2'*8oOLa;hSPMK@F$lik6+.d9B<K&d\r3%U0:@.U:Q0'(n>g@r^0sIq(3eKhA+LQ]Y[<hp@Gi<h.pB3G==)9KTe%_B>5PVA;p<pDsd?BDM'1/c-dF)RoaN5#12M@<n5:fqt_&@%b=<BJG$W@"FZlY*oEhSqD2U/5o<76ZQo'"?^Ner:n*3VQq>&W(s+-7+=d0<:BYX5h+d]Ss0d$D?`?f#<G_Z*P]2s(K6Lf!P#K_<q%I\DN'>="#(eo.'lpnt]3o$=@lrj<^.6Xk7PY+7^qs2N/^Dr&9J;4ejji=C83<;gLBpI0IKVLELIbZF>N\ba.ujdZ&'I/W!4X5B2S%o];j;YPe8S6X&U(HRHT#PM\?(5PT-o3^,OQa:qO2*C[@1j9+FP4a1prp#UD%6i5X2g0];Q#%RQ(=e6i&m=GYSZ`g^\$kWe"Uu";=%$bZN)j]`S1\*]ns^&9#@o(E(.pT,hJ?"7u@:RrH`:VBs:Afhb7kEVYL^H6l*XfoIPURp\eXM3kY>(*T];m5&fq"WJ:_c>R-o2<Tl%A0tNFDZ0"G5OLc1_tB))IL@jDGPdo2UA++_^A>_`kBjIPmg_OHhAse#]_:n/e)L=IPg7n;^'[-hqarj/,_'1(rT0qR9^h_Y9A`g?%nQ5WGn1P][2a3_2p3E/LhQo7)`+JlF*"9k_0/:-;rq.p<*fto2\0^j)'(KqlKE?$;G3!p:MU(FKMNr6XB8L46Xr`InI.II;<B"ig%19i27c(qM^/Nn>-+5H-DTR#gJqi?2FBfq4tih6XYP8A%o03p7ieB.^dh60&o8&i,%a!IVsn]5IW[/BOGX.TFXb1B05r:J--chqgY%5PNs8mpj$n+H??i).dns5%C0!SVmIF5F7B^bLRc:U\s<Q4847$k4^fas5CR3IQ9B7m)<JtYMAF?pO;r7f,MJSo?Fo)r1A>fIf8R2%cenY@n)2(!q()KTHL'-C?2Ncb?bcS0:0.OC.3Vj.=>MI^LKS;\Rb,:0DZ8tPBA\"!Meh3n+("er76%sV'!/il`-;l`nD`t:Dg\pK%"nR@oo_GtO#h&_TiVI?1cZQEMFY\1:lPa!&ZhDfEo1'VCI=C5.jo(n-7=o>[\P"T(H0+C2DnL8hp@b+Ol`1iZ5GUsMq^3J.lHJ(/%l,lY+WGF1F;>N?b2+[BFSc89$I0@O(s7(a%BE*8O3YMuNc[G<lD-m%aMoX.L);^N`rVYL3VgeF*dd_Cn]_r0'?pKCSUBoiHRsUK'%ePW#jmcoZmG(S03Ms#Qg6mn>&Rh$kR0TYUno+h/EJ+fT8(M_;=aT5O,VtZ*>f93jr4`L'jf@jY\nU+B^Mjj\5'qb3[a`u0.O0"-7%5aK?BMuLP(\P%D$??l:k-3*2K@JQQ%0X5EbK6mEa(JZ^'=mdi!6Vh<MpMR\=bo>hd=ChKi'9.A1c?YIP]\,U?S<;q.o0)p4HVNN=%ZKUaoG(I-*T"ujg9p`V;lWggIIWjV8b$0'"ocu=ghg216U%W%Ns7mT5r.(-!p%$;".A5i6:RN6niN9EpL7Z-5^Za\SbsT)NmE';7%T)/0Gp[aA'/Obj=^ZKrf(4Z<2D1B+U46I]-]jiF]r/0rc%g\kVIeEU"p2=$h^%0AD\sh>'+.p7t1Kio0WNSM\_+!1l6Y`e#I_WO:%2I>#P(9RE'*SOm,S"8PG?Tdr+F8Arf'/RN`66K4kiiTo_o:&n;J(QLOY9HcIlug]cmDlLK@<N:3m5;ti\$5R54b!+SbO7W&ffs\&%g&Gb_mFX%mp;Oem\`GiC9Zo4kSh0S^Qi7G$nr.kk:m^2%T<[%lLVGV@eR#b5r);l]=mp!''u+ll#OD9u+5ArR.ItAZEJn7oC[97f%V>rf1g!9s;s%sk7m]sn@]<n*NeZ1u"XIW!;Saf4aD5Q.BpNlb'gP=;jrU-NRf3Z)aCSt('S%cQ6ncK<KUBMWlBp;hMEoj77Wr^nb%!W%YFp6k$*D`m%91S7MP/Tj*:GQ$qTNl4$RO=>T^hX@oipNc"E8=&,AG/CH6gEh?Oa,]%=q4G14>=U<=L&@ie*fdF1q76D!`%T_k%s8Ad$:Y2hSVO0!-Hi6Y)0AfNB*tG8(jk0LtnIr)gGKhf1eal9`J@iI7^0IDIn\NJaKESg[TTN[&_$Pg&r78'=+I@2!qQYPLgQ-dX%qtV>jr'^bR`J^AS6ppHD-He#EK3pd5q?5"$\.6QIM_G)-%SY")ptu7%n16eKnYc-<-t>d3KHG=9o9Yn\9g&:Ha%i/=r;Pq6A/1ZG%+WosEHL"Z2kg[_@5Q3):7cWr<S@H6-0DU#<gm<5(^W0'@Z($48k3F^'T>B!(QnQK!pLD-*3<&7>lZ0sWY00Xjpp#jChXolqcb8q,%#c[>@T;G*EO_:sC\6F`]IJ:/[J\M(]+4WZ=kGa+'YOsgrKZc^m_W_^MO+6Rb0V6T6^si33LHs&AHmV("&73*?Y?uYg:7p1`d+?U_%&D0^"#jdi++]/+:K*L;2HTq>q+4!5455sa*k9"7V]R8\?HT&-93Hb5OM&:nI5<XDVa7jrm%aR:[*l,=2_+4#^?Uh:qUj@T%-iS&k%&H3a6&q@CkE*N2I&-VmoQOkTqqEZXkce!fH6fSdbaT%g'na2$oB-25H,HLB206-[SguJDC]n!NAZ.JD^rJ^J'SBjcLA4gR`k[.]V%mcEl1Q["/kaBd**nGUJDZas:)pSSf=$1et"f^>=0Hd?[("PhQ5?/cIR#!D.VO73Ru:Ai44][reQX1.W<`Ad>h_oG"7CV@O>Ki:T6%lq&Oh=u24#.rF\Ri=aiNnJ=RgB.EB*F16J/^jhrdq<BIZ/a$bBJ,K35mrG9B<i><.)aF%A*m.MIYNO_ek-U2Nl9-(h.`@]aIl8u>%miF[8qgJ7o^%pK/0'Ck#]ptS,?$I'G;<QTZ95+(<ht\.nT"EDG*.'H7dD%a"ko]R9ClTNaMD+Fipj4OjbMW0e3f?IVoLjT)giDiO%Bk2mN&-(4<s(]8oFLaT07b5/hWB]Xd%[hBGJ^Rod*+Zu/-gU8T3=#?#O-+R0_OQ7mrC>0p4CQN$md`>?LGM_lF&:BYULtUm4B]s\%>CZQB[_U]qesbt*o>oU?=oeH`=57@2*[)%;F6r@-+s%m<Tl]ShAKi0=%q1U$^QXM!KKR1-:I70h-K5X.&1+m]Um[#Dk94C0,2MbA%oj>G9WJ4n1:<8QIHuncUD`D2%m$2M'qr*l'?i9@O^E;bPpqKT'L]9!]6/U7G2GNb'#tOH3H0h>uHdJBG\F[nK';(i1o)$+95C@VB%LL5Q,iqNI9\:?pg]RK%W>Ls?;*:Vb0jP1O^:<M%-T?5dWd4+-85*IAllr\IN7K2b.s#G70rnj49#i?Zglk/=Js2mQ4P<XM\6iV3]%*kZsknYb3ZfD*?Ia3OAVE6teDbB37FZ#/prn"97@\XV\64f/)@B7,'m2"(+`Z0lR:L4bt9h]EB?_l;tU,WG##K@fja0,OK*Z#eCQ%gi\$oB`IePqlW.g[V_!;iddZK]'Z`Dc/O[Ai+EJs]Y@#Xn2&'B`eX?DO&&,m3-JSV(^KttH!'ge(C0ksAXrM@(C0ksFW(afD4BRE%38eH1)u7%WOo=h+9<jQI4'R/Is7D@V59@h"r.fbYo^-V=bPFI%j0A%_o=FWKs)@8S_`g<XJ,731p*5dZoQrWS%f:70q9og[Hh`!d%7t,MD'RuW^D*&^r)<O/QB(_[L:UPN"_l$^%letdFSoo//e^#:#p$,ZjT76I7LJPa4f#+Co4mV<2gl6?g)SZ&bP)1=m;dY*(DZAF]%Z<Q'pr-'OUQ?O5Gh+>3n?:KEgP-8s;rpHQ;3\P!X4))1RbL#]Qg9('(o"1*/$bd&Im\F)M]#s;.Z@FbT%dbNfUH:GrZoHLoU)il5%?i9iHX^AgAk5Xr.s1%ghn,M_RIdu&fc#?>k`n/8nK9N2C5'[)^Y2)>+g.usqp(X\f4N2)q:[qW;;nU]Z'X+o,`G;SOnQO[G]N5'J%L%(lSqs0XlAl>S<K?#a4*bGNpq*rsa(QN1QC(%s/`?6Qu5WpF<Jt4&]:T;?"[0PtW`C/>r"neC#.-rdITCBXIR(B%WGAm<<#nO:i%ie3(i5]OY.Xe7Z6TpANFnR-,\4t[VuA'DUk9$4%Xd@[<"m%:0Am%:0Em%:0Im%:0Mm%:0Qm%:-TD,4)\[_ETN.Qp4,DHlG)76Ok$%[i\jPVfO7AZp3@",YN:t%d-Qf4-cZ%Th]X#ESeW6V'@MAj0C5AEp)\+)nL_.7@&$?:6_6mlcOj<LlZC7(oQnC>dfIokJM#&gVGj%%LPoE-#H,IZQ'!,Cm;SFo4"0"OjR9@qREK3o*"Ia4'X9A6b,%QKF0W<YLKc\J4P1bLl[1CfKDbbgmOam'Qe=+;bMg$UqX&,]m"SN9%f@1;>C!bbI/b1-@9u]L@Vfd=%D*D2`Z%n)m+3J)2H>GWIqao*!Vo,ZAGi!\TN3+*/o(^\Lhm^^hc>YJuZY@f/Z8Jmg7r]nW)9'>M%C&O`qhj3qS`1Z-]G;tWR;VElGG3bk]?0.Iiq7,CSoUF]Z>n>[:+1GCegTN_X3G`R!p"6inqSUl%Wc[!&:S*!&nKbGGfY0EgdaqX_%[$c\[GhS&4"\X3jf=pr64[qFW@l*?\YFW=*)).HpnkHj)74(\5r?-$(l1e3=2pMN^KT&ef:O7e-OdUbZJbRhlqS8!tp51dPYAP1i%^$?l+V:VVL&%d;QH)"%@\P/2g,'0=,)\1WXg2>Q0-F88A@VVoBc7LeKqJjlc[XR@Qh4_E>Gqg2TD8r',GqeuNrWp`B%<"RfC$9oW%g+5V=j%[V4284KA-d.;^;%AR@+n-O2/:q3ciJ_cIg\t<mA*Q">hB#)_W_qZ+/D-f^j^`<G]E^G+Y?VQ3io@k])Oa@"@HK;TJ&@0]%jB\pYY1%FD:NGQ*PX4T(hI;pb7d-"s5FS-u)3,LVO"S-icPmu,jABG7:9l5==Hf^,b>(O7oc3QpI*r`[@Y*KM[ubm`@3MdY#'+D4%A4d7i2T]YQbu$ZrZ0:\X74RQ,7A^1jPs"oUEWF$H*;bI<Q:L3EIH#70.C%ftab?XLa$uI0E]a3QD<*>h+WrZoG$-25@m)0fUmH:V%O_X3tHh9'@jA==WWO#@<__s/%F6")E"V7cAah-bl_f]cV!5jDBMUOum1mL,>//Q\kJN5IUQoOjK?:BWp9lW274PfKV6p,\BT^uLn%o[N@[jK:8Apt[8P"0Z1t%d/r^><MC@AG.,V/h;lfQ&3ptfp+:+1/lo<)nI@3f7[3KJpUT(I?K<gh,-pj4^XV5_QJOhPBYG,S?bjY%G/1-q[ZK3;`aZfc(pMR>hHQ1HU#RS_^2S\H>[?i'77o-OV^=W@^l&c+1\MdL^!*pQ$c$)8=L-tu%_A`1ePUb92!M:16sbo08>RFA%DLgOmnniH%,ccBKE@\nBBr90D\SOFIU^U1sg)KhJ<B?%XgL8grf[dWn3_$7\i?XbR8PF8I#k<hBFs@5[k"'9)O^h%c**Mspg.h,_%A-m+Rr`#";bFh'nmP&[5=VqE2\$srr@5b5E[p-Uf*pR6145C$LI+\]EiH89_RPH,W)J$K]H&"@)Q8N6/*1N7KYDO>S_N6G.'_*E"%DQ0h?WM-TI6PT"!^-!Ygjs2uYAro4DeuQf]jfsS`d6lqRi/=>C6q)%*OG6aOdOM[+h>r)R_M'9(G*k?r9@hLb@]>-I;9:2,LF.U(%Sk0,#;f1dl4ir+?RWJ1>KBb)"cSFG;F+MLjYFUOO)'rQ?EbA7=R.9a=-_<0TYFP\;%jQ+YG/c'?*/?GW=0O6AbmbJ7^4(VU'>6Uh%4\HQ@.&BdImF"t=al<hIKFNUrU)'+IV?+8W*$Ep9]Wh\<8uDP8U1*G68;-1T9,#=/pr`BV%Gk=p-Z$T6kTP5c9bt=QO$ad@]tEQj%)%pT$U/G\W&n2k)2+0g$/L?!Z'*eN#^KXYSaO=sp.KcX%!RDlaK3ns713YdQ7@_JHLAZ`le+l*kl`(#<7APte_GQ7(L_*_,UV8DW%9@Q$KLs5"`a(u;Q.l4$*10R)ke7%-2_9%&PpRLMC`M)'*3b973/0ML2S.(r7CBdQg@N<FZAs3VD`2<\'<.p*[fcUS*dG4\n1N^"?%`ZV@Pc?B#[]rosdS0E@X75Z+JrIci@RiPSDPY;uXPA!Z&UQE;GQ./j"#r[S^Om.2%ChgV=bT7pEMGTm64u!PT;.Z8fcZN.ra]s@L%_kEo.HX5.c!^VXoV(YCMM4B11/:'SJMQIt7)f1GX;4.9^c?:`geKFFLXrFkVX(j%',I&.A$o3r"4lie9e_UM\J9#g3Pos,]/FEZO%M8WH>+]<\,<8#H`)PLP.0b_0Q<t[;TooMXf-bYhY3)s$1hODLj`;H!&X,4@S7uZs>OcKUk!BMiRk>`7m(mGr,Q:$;94ub;lC;.es%Rk!05#aQ)m?'b6=3rRoe-&!]X6Y,0iaGj3;bDPa;(ZbLkL;4,u;b]BZTa*Fk@$(,_iC'(B0Ii_pj:1+)#YHs;Eid4.RDr:p-i*/9%RP>Hi]"SDpQs$O3R9sEIkTQ'H1l<'^J/f/,5gp#i=D%j[Y;`lGXa4u4,AN"UP+5L$bHL3\>*B+`bq,lr=.9[(<E%dAHm+FZ*_B\)%-;7tlW-tUon4FP'=X9:-3h7nj%:3*@&LVX?el=5DncY.U##Z_3Nf'dW$'sm*ZVq\;#!3'MV9E/o0[L=NUao2D+<+9@Her:4PF"m/%k1;)OY5"g^5/h?&dmTM1`P*f7$*kAI@9BL[j<?;>`U<5P"_Y?#aU]b!-NT6adXl+^Grpj/V8qY7E$1$=J/^\fd24c?))qhY=LEoT%"Z6/9R#'*dO7^,g_]GPd+*c?>8WR@:.psphN9d06`N,,2+p=d.?PQ:"kb8]@2td+66>%#tCmd2Q-^TCB-5o4BI&(p#rs>j`W+)+f%&DbpTjVtH7B:VA;K;XK++k'T\*5.s-[g'Ha`4?i:D\ZP2o0H]:/0L)'qHHD)M/HPYR/F7=jY=t@Grf*[gWHF00OaH#jMd!Ce/'Vb%DMArYQ3K0r^0/j'l8jb^+]=$3.8"KOVA1C4n4?$mXmj%pq8+teakK2;^e5d20tX.>1&80?"I=Vs2kddTCWe]Zc/<Tm\KdQGNB3]m%rVK=Z%4LfXdT7eN-KWf5U,m@0McD'%!cLE&Ba5:ha37'k@I^^ikK0>%K8_S8nf.4I1).&Wk6U*\dA><QqMqg-7*COK?c@YX#88Y`%afZtJ!"*^tldq-/g&eh"l*75JK5>q4BoI"!5J\G)(EnO,W$BT'O\6.GU^=Rt5>S-_6;CI?A]O$a%lJ$68d1)90Z$Kh@>uH;a&uDS%0=jpf.M:/SiUisU*l)56iN"#k,]$EWdVZFN_3`/gOCP"LFLm>@&[,UZd->6XESs:,W6-^aVJ98l<Qf>=220!"&I#9e,3Kps$.q"8%-*:r>-H/"]XXYs;#V\+uH<:KKMSAW-hWg&M_jFn.-BYAO`6)WcCsYQPN`b05Tfk!r*Zd:m!@*ht#n:#gnrr/]$n<(c7mX,UGR:SS%BRG`W_C3P`Blm$uW/N5XY6gst,?)Mo@rV*(MfqK2+7kN-;V#gm<AQL7.t"$EN#Q)T#WWVhYbO8g9X!G[L-V@uFC8<"MZ%,E.YmeL%`i3trPG"ml]CO##R(PB%BS^g9CjM4!lJpfiGQYV6%%Sl'3fS(:a9(P/WUq8/L#5;h>*mtF1QLAJTUjg)60.cVA'aa9Rp@!"25krA%VA>3I2DAZBC^BQUANE(-ooO]gHn]RF.%p\0m(dt`<5>;qpH$Y16;U:eDAgb4/tS(NSpltA+euTn]E,qfhLmFiS_NX,i&E;j]fj8j%3$ttBPrFgY;2.Fb`3enAiV%L,1,e-Rns^l`$EHd1)%h!d6t^BU65BU;aC.HO&6bsB24F>l))/ZE)RTrtX.l$H1s%:OoL5S5,goV]%$s8@MLBLea.s+_;\ulqa&@YSMKP%*S.!3fnX#4CU1ai?P&eWLMaQ[!lSa\2@)'W<S!B7R1ZL&&f1#Z\5^]n!T"CC^3CfrV!nscbZ%!>!jHFF4SGNZ+]67i8R[2^5QHU?bf@Fpi43Ml7(7pZ-OX)ObLea45?$jF6OaH8Cd:hLtgX=f$<UrMZ_(hT7nNX7GZ_Q$d$F1?R:Y%gEFrK#IDf/DMU-O\g01m-BH8!SmVc#D:(a5M?KX9.rI/h6`^TKYl"k&L'PY-e.RdtI=j9r2k'(g`HZ4H+<$ctH03ZH;W-Gglk.K1%-[EW+e!OX?5pJ-amLL+EJm18,=HB]7VEU7N2Z5*.q5,c>+%%SWH^`J/L0%'@gN8;Y*X'E,)?LTLfOWHb<UKE*g2<HiPbgAncJRS=%d,l,L7`Sc:g\$OqKF,bT8&@rM`@q]=%r7m[711tQkFs;KT):SW1gS<NBlN&C*8$f0QW`;9Lk+fGJbKmXHW!?F;jT]WVD9cV\;/bk%%?;l(0<e3=9G&"Y.,M!50`h_G=.$(/$mHlPSU))]HcqA8)&&_Ne^RsGH[r)291!1B[Z%ghQV7Fj#_l9r`R$S>U*!s6qAMJ2U*+e"%'F5=("5id1&<R1df1@8E1+37sF@3->dEkUO$%l>MM=W[E"X$-(^oG69S2KsQE@iG9k##&FX8>p,IUnKS0qt739b>]Y@bIgk*6`dh%U*7MI@7Xdre1-S^,ZA1'6Y<8>*nb7D/)r6VF<lGgK;KM7r+'.,)YGN-:fLuSn5]`ng'Ut=mt-%F;@XW(b%qN-<9'blN(AaI>;RMC%<C3)J;h$$`Etr1ZO3&qU1kd6Qj/Sd^KOeYBlaT])*];?-/)jfY8b9lWZh99Ni2)@2W5C%sF$l`2j1il=$1L_%lG?Y-\cNDr,M%Q7%'F."_[_1":)u.?=Vj7X0/Ig)[I&IDRa(.AL\4_LgBLI:ciTIc6%?Q_#1;;`iBh3OkX"lsrCY"SKC3l]&e12G#Wf1GDMp1esQVl9Y%?GWX=Y7r$[%%E!bA6h(T:GlRREA-BP(DWhRR!0JDl=gGG67:Jf,@<20jIPM<kRi6jJ=.rdr?=ilR-64]Lgu',NcbrgEl,cH5WFeg%42EYX"%tU3$40W2@(OT$!0]W(+cBh\innlA+ht;!+tLbG"Ee-P@^rk+UElj\Rh:J%N9_T1:.+Ui/fApT3Vbg$_oHd,`k2lKeOVp1%\m)Z6]/)5EK3F?V'Tm$s3@Ia%XR_LIYgHB4")9nT(7$uc.2gB37!JmoA7d\g,cPp@ko2nOA;%Ld5?3pn1F-O^nZg*O0O6(g&:`)d%M_5.`lei4fAd6H3B9UDNc/:k>aReZb&iJ?P\Z%!I/4SB.6AY261Dk@3bo8saX)3As:")b86@+[]3%t^DQ.33u<u[R0C1CeT6jkfO%"b!p9R&]]h@1cMI,Ms!.1P0,:c7"UDJ2N`!W?B2@n%3;ZXb[uGAPLF7,d@PF8#i+kD*#\c@#7)2hao,j`]k=b$g@uhJ;M/PZm#Qd%$-&5b4<.QV&NM%f^,!L;>/G;FoOd352bRuLU6n$cJ#4nhCfJlZTdUL_AMR6qBp'7P#3K1LinO.hd8I;"_k9Me_X5R"_Qh'X]il=?%M)DK&'!CD7Q9%chWhu&YM)sj+Q-T`01D:cXI)mp5=Bc%J`s0e((EK7t1Wg%I6c;7?-Phu@BlYbYXf8QQ;i]Q''%)I`W(H^l:;UDg%gjD[\_>r++5$!WDEd\Rf@,ilgY\NfHXelS&dT$C=Q?,Q$=fVq7E2R"o7ud.Ua:*o!^;4r(YsM%S_Ud/0#1Y2o4ib_)#A?*E;ESl-%O[Q/\5m1#B.I(0qH59dO!Qm4_ooMS+"UIJ/Bd6Ek+Gp5$@uK1sP`6H)+@*$^FP(1U#=1Cd<jR5d/]k;\;=iR*[T[rJ=i9!+ALLa:%UB:K<RcQ"4;Z4h&F?P=&[.rFD-L!4C1/VI^R-?SFW<lm":)u_D@J6$k#Io"ZEYCkhE!9>5S?$+Ss/cli1@B,F[+%StOA9p,6>B[:%"Ofuu3$(HL\d_Ya,,D*mCX[R/[N.1c9-Y5uCXcBahgH>W+V)_?X_hgA"R2;?6ELWA)FP3W;5bLd#AC,H</VuKW)Zje"mDMo6."nt%E"A&YP)4ceR<fWAcSS_L3<PmAof8$iepYB,g$Gd"r`^%Q9h8\IYP%]1$Am>2kE7iJa>AblNqnB:KM$aAMD?F+2M8ESVemhilM=\;%"#iXWk$=]c!s)M+-%e?iYp!W^A\N>82(2Q?!=t_SDBge>Xk2sGcJsFa/^YAW1<FiCRhTeunt4sHcuk&]4SHE-C;d2C?t6?,U]gn`%W#A^C<]C;+4s8B?0`-N5-r+!trHTf#CV-Q0U=]oJ!`:8h#>K!,+CJJ(\8_rFiNUh3"r,MM,2+'T<Ntbqi_-[)U'PKRiePdcVaXf7%%QLMFOV=,56mWuBjK_H%%(<RD:;fCZ"D*JV3)0`:MOdpU<fKuM@\.#*[8f("+q#=F/;E_OKFgI_&:<sV]\^ZLo:YVG20TTfRS[*`%P$4T-A\@boaq<=J=VXB(B8"=4Stb;@&G]F*?X2YT6Dc8BB@%@9`hY3AYdkP%N3]%e5qV3fpCM6,eK&FhQ^AoSdBE$\Z?-YoYVo51%r]F=V6asD#&ZF6(RO/#dfr?/f[E"*E#CI)jk8-3<CKRa,"UP%)^4ekVlPITPWea-pEh^Q=pB]k90"]gIR>Qc#gl^4+HI1+/%Y69n%S]q%Mfp;]]SN%"Nn@(=HfYe-%@`j`^in80u81a4TDRHnXd7#oPlE$7R1\Fif7IY1craTL^E'MZ2el,Tob[H'I\H7bZU>M&5=Q(Ml%Q\e;26QhGo,(Km^BS"/80(HkI?)+npeKg)aW(%BQ4GGTkkR."'-JefH!4"?kd[CDQrB%ruTT@T?dHaLI8cbTGL4R'!N\psX#<gDu%qkakR!7S%DQtOql'7:ulclh2Q7LI0_A/8/QbgcJfLO&saUCg8q`7r.sCt&B(.jKui.F$Z,(m7dsO?*Mro^P`^[Ae;Q=LH)#C+09+%EEeu=3/2/"F-*<!n^tpWLbd$bMR7OZ">W8PjAN[NS/)c1^/1VYA+FrRW'Q`te3b[M#I.rWrV`Z0_G@6D#9s_4$1LJ$8o@L-Yg)9\%@0mE)b9lEn=;Zj9EfqTJTm?c+dRHT;6EqLsBF)L6\n(AiAQFVs6F_3,-[lm-@HaM5Ct$O(>gDL%KMju:d>ImfrJmk.-WC9o["WIV%H:0_N:b+jG=Qiel5>=")kc"k'M;(_!7jE1:L2)9VWpuSc"caKk91'!L4"+h\3:kko[#HTG^0+E8c;7+]qQW@$#\R[30`p1\n^r@)%0mR;S8%^@XB$_o]ormu(iYSl8&Jd]fJRMn22F^Yj+b_(36)Q*-)rbO%P,rIP6,![90N'MS[$n?m;FVGT)R3iFVC5[iZjCl-N97C:%[RdTZ>&>Z^L17,sIVDWrB0pbR@C4iF<"I'&i^k[J5D`q940/dRUf"-9l)'mKim/f/LZOrh>SIOg`AHf$5t>cGWX2OufPJo39tR@#%-?F#EH*"8YXLS3Bifb9L9A=m3qqQ;P`I^G;EB^ZV:^=+B<29Yu`bAbdBFKY7IE2_+eHhmXm>MHo:+3iJ79MIlGH1$cTh$+8''EE;%BNc<)a3(t\anMh$DDXk&6=i-ne9-A:JfN*n@hsWcQC5-j9e6+N4;TR\3C$&A*Ci<Kb3C_&;_-:e:uFOQ:d_h'j5j<_-P.>=iIUXF%U&iN!j,[]07:^Aer-Bb*71BTi;no=*SWN8J@kg=#r3`crQ=6nqEC/4U\5p(OP$+c@c/Mo%BHe!p=Db]r<&\haZN9'!3,bDa1XM<#%&m'@&RsMd^51WWa1/g)H)JNADX>]9qJ1'DZ@mQO^>]`YQ"`?ec-@&QB.4Zli63i6GoVP*Ld&DTc(A,hnJuT\sMa@"Jls/,),&GZY%(Gm?TJTjq"9/H-Tdn8kBnZ*NJ-\JFoQif,IM+5qSQkb\-k[Dk0RYH06\V5%h&mV$Y79uhFj=lLtA:[laREgUY_U"&gdi$Ci>%-RY%$c`GsMak+r`0KF=<"LUm]%L5.-&]u.jGC:CBL^g2#1?J6fln8+[NKEqM=2=Y.>X:U+,1t\%A\t3:KR'81-m.Q%G('j,<[R%O?Bne%&CDg[-a<01(.7A>Losup/;k)"1H[[Nd3.gMC!A>h&Oo+lGbZCN&YWL8nrVsE<dJY^,J^;bEA%Bb-"fbE>8hL9(@H-4/UWj/p+/8B%C&6+p$rmGW'GtSNZd/__^fV<0%F,MX)FoEm1[D?9;$3_9ZqOHE,$a7:%aq*E[X)V\i[_FRd0#Hnl+dSC4D\2IL)I8MX21%M0Nsq0%o8#hg'p3d0)'sWcUD8&=O!AGdi2p4pFb[!GXqVT/=Ks0h!kkanN[6&4-I[WG4!aG,RnK5ZdR9LcUW0n]iSCjh6Z`sSgSPQGQ,`EK%1'3hVLo6281bb[-(%iWM$V,'*"r<hr(FrBOK4%knY]2cQe<e$?.rTDo+T\rI2aeB0>XaXJ_73`0a!S-#i<XP=qYmh`<4ZAT@@hUA%:*mCu-4X+>`kZ3rbKOYW_2=NR[uGQEAF5d3/Job$79?Lp/s-If>r!pll,tEO)0%_IV.H087f8(5?_])K*825^.IqReH4%A9`C*dB%nQG/"Go=!_$l&d@V@n5Fr"+E9XB<pOo7HHqPS%HD`4:L;Qj2"8.!V5JKuI]'`j#.?&K<:_5im_"0XOem+K[3#'r;%'(*;0afON^I%."\ja31@q8fq*F/B`-kH?*L$56fVkE<m@?g3t8!>eKWJ(`Fk:X1@i*5b2TbU4#!iW4_j&.XCb)C)QIdhSL5*"!V9o`h<pXI<AbUW%Mk8G`Z]^Z;T-El+/[Wh#e7Ks,23sP7W`\8^cmeD-%/X%7C$A[D)FD?QbMOsJ^W_OGB6u46oAB"K^]L2icRQr&>np/,U7eU\V:/Pb%<(DB$:e@<t90"o:">-I`aE"kmQqi(eo+iiK<%'lY/B9Jj`u7QcQ7GA2[Z+(&D\h")6Z!$2OJGAlX[H`29$*=]-;C]:ZS%dP;+3&+%BR%M$R5JYHa,6G-)RPYc>aX@fCMCY;>%J5@c&4V_Mu4\l^6\D[]N2.#.kulLL.pp&?n>LOWVht.X(`f/:=#a[jfpN[/=$Dl2mE^l%LbVa]X?sfZPq4mA(6q@46a_h-B8[Bt'*//;[%L`9e]79?^k/GcH))6aU$i.J(YY7@1#W;`M7u\AFtEVKMpR@SY_]G%k8HWg:bP"G%KK5"Q"d?E")%Dq#bU5\&+-p2ES/0%71m"#/F,L;f/OM$kdR=q-)Q"gt/.5;rFJ8](Be(a0Ab/Qr<u.geU#D8>Ji.O5AW_gcBo&Q"%nL=&pAd+J(Op*b:#\-,(_ibluoei)8@iZHpnuMh>6&@cLBg(/R2Ep]]fMMcY;lc.%Cg\Pmn&Z^m)mp<\B:/t=3jB;,<L"60H5DAR%<7.C-F7/hP-4H\$$rhG>&7"_J&P5?djiV8hK&SpQql$ll=C\V[-=5t56].OlHW4T*qHVU&7ZURHaa2B5[*nHLTToP?1g%pR).l"q%1t>FcJj(]EUksK,6(V/DU6Xlr"Wc&18BZJ97>1*+J[B6M?;NkhJM^nf-XI<*F5;TFZ,cq<)G"qGZDbg@/n5s.9$e2?>!uL'%&7t5%bq3T[e1fULQ-qe'nKl*$f'"H,83-q^&.Ok$fB^O`<A1KXLmGHrnV/S:es5,]5[c$=d2o'&Zo35?eUhn<`mG\ukf0[>4bZ4;enL+R%/$hq];3iS66sFC\)X:*L['4?e4+'Y#L^6!TUWp3cA3i5O(8J]')=5#PMU=3L]HD-gOgIf,/6K_,8OFBcAEV4=7]W7!c.1:gV-gZr%_6#bCZ3n'YYEIHHXdr9[)/i^+K;=VdUa>gl<ofSY8OKn&gN[Dm!_+HW7Xja+l):]E'rqPY,79\TZZ0bNH&Yh9%R!UoQtNVo8F<Fb%6UcPW<isL+r*7VgJ3Y%<\bj[4odiYOZ%9lgCYr6UL)OlO@B=-Lej(/M**@R"p*4o198HE?YuRT2ITtlc<hr$]>'+>0[b">JY.PL0%bg?(H2)H^k@DELcEVJ157_O^/]Y_b:MDQ"t19A0`S"XQ??uR\IAtVhUIM\GVgLM%5&L<OkY6AXe<k[=2Z%B=`fg=6O.stP1V*UGg%Fg!Ln23`jN%eD[NQE22<Tj.dJ<lD*sPa2O+MG%_5%D@rV4q[ZmB#V&s[oS_D0U<JKBe(B/I5TMTPV=eU(,9HaY`,7Bm]]PsQ(P7R%NII49=N@$+BNQ^iboJ>RNMWI">LCciZ*_^fXQ.6F[,#q='o9i:>fVOkFa)T*5mnD"%P6'CURR9`aa^D52/"NM"q.L#A8\Uq%I[cj%q9I?;U9QQ-;b]X.$0b+Y[_ece=;j5D(,Zt1=<iWuV>%8j1ECN"[r0U=Zk[0#)G<H<No+;W9j1Ek/(48491sb:#2%YPA\CeHFg#c4%23o#LcT2/>!JQ2-!uC[6W7]Zt)G9#Vf?TR;]k`D1VMs-[<X;*]F[_/Z6:on,dX7e,[A*4i6YVoYSNZOuU,9Lj$U_#b;-$m;/%`,u%Xtf';*6s&,@pE'q1`ScZY,FtWm!h1^1OfFq6&F78rotcSB`BPV_'I;K$=h(V&nc0\XF!$B`#1.\1ic5#B='(F=l^jRBZ37Vll_-@%OA[*Op4`0nW%hX`&8,CTWXVd]1Kjsr$p3I-7\@f5E8V/#/ZZmC2hO]%eLcJ6KAM6K#%@"50[h$,iOg$b5qo[6]G[Nn3hsl[2hP9D%@mL69B'_W;QFn)K;7:*aDe?uPObOL]R18+op!/.J1T6c#Bni*C\V=7RNggonIucfEE&20<TQ_He)2(r>R9+Id$j*7G@5u)mJKA9B%,'bt047pI3,]C]bf8_eB:2XN9S2[4ghEhL)o4FZh=MPfa)(h.cpR1&R[,A@T'0C)$Ig*6JiF]HI`R$)pS&(0pbXVkTL;s]6A%3E+%_mHib6"@Qq6/B\'#FrVL2R]CbE(6n^=QeYY)3dpWL2dRY$k2U]DJR%U[<%Kr!bXE0rXI`.W)5M!FQ^oAnj<U\J%kMd[%OG^&p)og%epskmGV^:j[sX@sc"q4JX1T<\[i4cWcC9CV]915J]G[gmh;`*(gSiMa`6BFW^%UN(3,Sq3_8KddD$D<27qjd%7j:FABes^$b_Q\]%%'#DdNRGaY1GH3f<>;g.VYMS!aK/G<\p,l5ct4Dir#Ih9#2';)iPa!6hhAfhEAK;V\2XRL"$hLtQ3&uI4ZD_@1Me>rP;mDkDUu7b%YaGrW3k\S2AmdQ=5m2!.mAh2Z<<8S?PV?]A^h+/9@G=2eAi/hjhr(^V#k;U[X;SMZ14`"e1"Hc6[nM(/2+'CE[i2Igo]agt.Bj]"%!N%+^2M8G_^RW2RZlFbs.>Q13/D3][%:6'KGlr?=B!clSNT!0m;9"Y?F%De:XDX6D;PVJbcY8nm[$a2f&;cNhg5K':Z%OH;1M^L4%8#=J3Le%&l"`7jMm*VC_"/!bd"FCMQ(!9?V^h-CW.R":_c=&N-oeb^c@5D*d8TjF))15;7X4AL5Cdo@&=[he`):Y#<01je)l:.nS%dU=qFYjU1niij;"IW"IJ@5F!D<p8PI)6FdQK5Rn2D*4>2?l_--=_;5>%\$=U*AtCFAl,<a:[E3]g<?Ka@dKjJg'gRijX%,kQ*_DC%!`FA+C^.:kemN%H!*$34ClooV"r`@c4]!ru-17l_cVQEr\a.makGT8;9igto3GJctN:lTAC.?KX#@W^+-<F/4RLp4Q4-H*j_g">6%>=b2KS!2C<4)&;`\_s8$-rPA?6(.fdO"l5/c(HA'@^3D+AsV:6A3lYeZo"5*fLD;q\J]Ca:7B!mRmp,X)JM\*3Xa+DNAQ8HWY&2X%c"Qq>^aX&p)-"b)ENkR;:_YuqTrOeu7]l/o/FOfuAlS\_8h`c[TO)d4)DdZb!1RCKk(]<jNGQpsKqi7e=`@pRSu<MhkdI]4_GE$J%1leX^1=Q^^IttJ;-AAi.pc2B)A#'tD'@^N4dL>OkWh&eqX:%:EYH\;%1kTM]3/)usE5XM/jNNQTAXJj-AO-;KZrm$+3A\6SR]6h[%big&/HZ@=>B"B?&SMN(fZS<97=oadfG#\CbR/t.@jGS(k:o;lYP8Is;Kn`&OF3r.07F7!k&Mu:Y/]CmZ1S[QG?JIe%.+&aRXT9sT%c&AtE>jBk!0quXrQ2iVc$qc?1`^#N7Al/'B\?'[^nFjk65nBjmPncTOa>buCeJh_dS25dbVK/4`UZLcqSh\M!ADY1PGmDSZHs10Z%K4[UGId'QGBh#/cg%4O.),(4)9?EVg61<=(e2,[7enq]>_c\co+!C\qbtNbl`+7,+R2BM:ZXtNuij8+'=YhK!&m_7X)l(Yk)-Ru9%N%s#pMWpWN&<qY)`?s$RS2Q"-(sDQ72M:S4J^?9Pc"Q$cFG6C4.!:04%]@S8X.>*\1"a^K;5n+3RmFMK@k]<=1D")_A-pls>:?G>%#b-B?'AJ,r%+l!$=R%5gc0/gY7)iUjkg>c3n-*VtEFiZK->Wl@^5ZKBedPg"D;DO12Jr9HZ"?g?3cB2c=>LW_eRZH4A'L\1EpX1k%1"M;X.G.<8X;R7ZNh,-FaI:L<YSoQ)1FUoC"qh`(27&$1OfTEOfOcBGB?_Q=di%2b=YnD19Y)Kb#-,l1(WMn0?Noi;ABhp3T(sU_%21lg`KgnV;AgS#j-#3^.bXNjR^h,WL.B2!,?o)Ipk$(O3$qathm/f2@h/=680F"#odM&Cs3,Ad6%3#a*K?Z[X)5A`k1FV[!`\([U%.$8EPTQ/\EP'&[W@%9+W,L7,jct8rkf5=*J6)jW5lsV[MOr3I/BJX^?*/leN*=lD16(<EWhujsrbqrEb]Vj4jn@Tbb00u)T^/g9*%dq7*ARe\($Ro,qp,Jh<<1[p=IA-q$"bkoXsZ/K<%T7#\G3Go%ePK"Q)2hOR]dgJI3J\UY%R6]%?A5=mN&80A#ZE64J$oKQ/-;L(^%*c5^q$fVS@!(8j=(l:%.A7;P^c<uJ\XG\dl%$[QqCBnka(9auH'0.iZSoQ@&R4a"eJXdT;,Bq'Dq.qBI.#B`!>?!(lVPjAsLbfmY%_/;NrN4-I%I't0CXB9/s$9<)14dB&2'uV!^s6C%A`#6)<eo@.s):VO.WrJ8BK6C4s6O1mF$7Xo#4)d[N\tQPP37G7JS5+hAB/E=J%,sgGtqLUU-1-':XA)=Bl+ujNGSMK]G%LR/e<(MW^1ZAhMT/Gp\Eb=+Z(giC]8=1q20fX1X3QU%e3H>=hiDe'^SC+`TljlV3@+7-L%SNtIKm;grPH84L)TZ!dHLR^X\ZerW^1P<]!8AB0*%%<7nVF[7<UE-F@&]pP/hmP7;S2g]28M_KL1M9\^*eDUqX3^frcCiM90B^\"%<&/Wuq$uVIEp='r'@<.RHO^@GETi@ihigdpbSep+Y]qF\1FSH[Vj,CC1ka7L#j)O(6#)'\c7#cNB*E;[\-Sf]JiJBTYb#C",gN&=%A`>ElcCgbg3UK/'kr"$3:l$p+?QTP-$KR/#]8-c5j:#cL>"@"6+D27\ct/B])3cZk,:/F-BYUf"$02LU.4E,t3J57V\'Q:BjpX"b%,SN7\7LQEA!t+0!S6s-Z"$*]4N%'lFkf018OU^:Yatt%D0i"7dqW!us(amTON&;/!jMVq4GM8\pE<c69NF%)GB?!2p-#mPDElN_5%SDfFi"$:HkQFGL9N'._3K;s/HM$r;Og**j8X<;/_d"d:55gCe*fuDg01E'cb2[qaAfq6RB\d"Zj)2U7=,]H6-Iea`\3&=&M+b2B&%WQjsUi/HNUH.Du@TY/LCD?68A>?(VKE!E-FK3cfS1Os;G"Z(ukD=J\6+O7bfAUHXt1S@ihZ8uq/?Y"19JMWBCUB+gD37BUA>'Mh/%FGh6]dmh[ObH#?QqugpBY+-YK*&iLbiR(IZNgin"_eBstRDH0eM49'T=a4!*Ag"&)]Uu\OA;+`_->j#OK*e'`c+ouhHkCq!61g!4%;;u2L<?M_nEAR4Mf]g2ri$UDaa9+AR(-F)*`6COuZ:!8a1W\-\(9HM-5^QTB"_5%[dM[9eVp->n[Lke:Zl.q!R)q"gRF0b(Ou<D'%KgB%82M:\4*ML_OPK0_p2M4b87NmsRUOCPqPr40oeOYdDY\'OsLrN*=9XCPVN\rV<m\@R0d*5A%[)6KPDo7EqYSlMFHR$?<2M5(&%a!t1I-o>/\cQ9/*D6C+43bnr_=i_di1FNggN$75_)73P.Dk*mHNO3\mJi/1$:ZH?rCSh7C.9JAC'>ri5Ce!1CM=WFR9K.9(5@?8s%8gkhb2Udm,a12ng)3(ZdLBVL+l9,-;YaJoEeY'ck+C@Za%+l!:1%^/42PUe!,T)0Yo\DgpbTO=>DM.#oFH&H*Keifee4Ob61BU"o%ffR$<l(Vf73AYoF`a3]2%+9b4eHjG/H3-,o:lI14$+TdSkKJ%!r(G<DhL3_,*h4)oR.K,=B1?_OEdNBoK4>Ql,KZ>kBS]^7%#l_7%DLc>,er_YUTUA>0(XbuDMOZMu-8>V]8X`dEYeMF-Li20WNAQ:,2"c#P,L'V](r>#o1K[=7^Do)ZZl=um('Dh>OOu2Hd26PO;VU+c%K5I9eGQVH-AtYKX@L16f9_6r?k+!;g(5rr%_3ol5ljr*K)8J-)_LaRr<O`MaaH/3Q!@0;Ti65j7MjY%;bk-h"glaIGh?X>9Ou(Q)%7\kQH'O96<XTC>S-&,Y<!Lc==KMCG+bq+LJZinXHSA=[k%[rg4'P*%3"3htJ@dpK"c&DJ4*&OG`D-Zp'RVB%c9p0*BR`s#&Bh%JR%T&u[`A@`U.:XDd&@knW7!Lc:US;HM6bolDi5,&&%kl+/n-SWo+p/)9biA&[fNZ!-h3&?IW>[h:\K\(HEVp$i75\Q'SAmj:H\X&JJ%)2<ajBUgh6#Mh0b1Pd^3IL4.*6k)e0Otm-7M%:DaR7V6cI^;j_X?j3iAk)6X/sr'So:Ll-J^[8_SsYqFZ(n[8Afrdqdj8X=o.@Q]%B;Q8':cU=qXf3=R#5VlgGCq]X-J?C!1[sM*^'\Mm2^SsW%#cen@[WI%bRA4l(`3V(9G_goM4)bi]WkoI1BYB\21!*_,Ub&p1C24K%j@]Vg"umNRN$N%Jo0e#cbb2%o9VpgoXBp@@S=,X,B?-EC==q,ec-2W/fPtMh!2UrRAnHt[N\_>+'886;8QFn+K/5<0<2"8C(/H)!%B4eQ;ai)CGQ9dub?tOM1$+B($Ak"em9EPE07LOr1s*'\Fp@K_D#3(t@Q))Vh%hO>YPSmIl7YPj)$sZ<Fs.mm&V?:R>-=mDIDX7%]%)&0r.`snrjN"MmWap^rn"sfBf1X'_]-Y3KrGg[T?AO^_iHG,uqBGhfq0.A[`<(Y;-n,$*4Ak'%G"LL.#7VaY;[f\Dgkt(\40f*c)%R#F\^$qcV[-j)9#S5pCY#%e)*_DYR)bRC"1(S?_U;1FhT#D&:WWi1c`1!C((@OjQ:bR@t5/C$u6$pk,`Rh*`ePU)a6bb,3,-:MBU%?n4u&cZ@;=9!8YM(75uAZ_pP)bRDWXBT!+-"u]\([rBP"X:b/T->!H?,rL-\Ami_WdNiG%T=rZ10f,b"R>_O6Ql/;<HL_pT1XhC[%l:]>0,*[2q"#JDhJJ+=f/TnEjEQej>B.T`Jbfg(Gf^T`;R8GbB0,Kk@@<'mO0f(4f-IXn.1T7h>paC]])587m0f(4;i34S@7PP[3%LBM2nL%^HX-Y>h,GAhiRN7L=7l`8sfBE\Zu)Sqh-i5(I7B1@f+=@a$o)0GWeM%H0p,jUD]':bIC!k?@?l(V$;3A\_uPLU_E)==ZY%n5jXB=u=PQB*LrKO]7.pbb-Z/TIn!J6!TPD>]OGR5"7"]1T4;40Lg(pB'-3GB*MqN)lm,31P=]6eK3C(1PjI71RFULPW;mk8T88a%c,d\>bRAiB2HI@*B;X:(,H_F;bTJc")cOX?1Is]d&^+YoRR(^HXmH,5^gH>Q5)GJ8OG>V!8<@HA9eeYtU`$*EDA\P4)-)CncZ@Nn%1/`p=$IXm!no8t;Bh"ZPhAA"CRXnU4p4SWA>')5?BkFa!?U`45@D*H+badi"C1d29RmbMo>EJ6TM40i5D_b&<N2Bc/BEhllQM`aU%B(CqV'/QDg@1m\a1S\A0cCD\oT[\cPiP`rR&KL%!_3k<DJ5nQ8RR'f6$)7LF^a(V-'qcFeV@@HRTG[n@CjXM;1/(/5$.+Wk(-sRu%R6e'&Y[btH62_@;<,uTDqZ\g_Jhr&SQ;)2YbTKGfFhGPY)7Z[U0a#&')#o/S))>_9L`,UB1MW=&As>MM7l(]4)B,kL*Jg,+Fej4*%AcSE3q,\bPOJ#qU^&g#FpYMX.LmcB#+r)gg=YXtdbTKKsZsH&BN:'%;@`Fn_P;!)Y`'p&H)0J-b8I<6Br*T_UP;"d\CbH)N5]Vt!%Q&$;OfTFZ$,KshSN`GX9QpGCR$_ie<!uK#OR7bDV-;1g2@KmP[ZbE#_R)+(dpt^Oh1$>b`Ak%9],g<@(lB3iRQ"Yu97*K%;B;0Vj%0r%a$guL%(1D!6epl[@a_&8&cE5i;s\64^jRH_*rHfKB0(Qa(6#<U6S1W\<H`%)('#5N[_^'`"VYN@<)^aM!$`"?t2$uTK#78d_Y%CC.),)3k%94if?6#f'PP?!q7U0XL^X&i50upI_5LE+Y1=2-*=iB&J4R'b[%)R7:-:bTPE[ZtjVme/bEKR[b8Jg7s'T3&;.]:X0@g%<"`r915#@Fa5$cK15!^mnct@6dgb0#CQt5no.>Wn3+\u=>!ahBVp+(YR;!>!)&.L8K99f*18B9$$`PgLR=Sg+;_][VgAGi)(T5Jj%9h$A$.4?uC7M<;$PSk<m[T&bPUN%!670I0+d`p0$Ng[^U?H.Q:$o<O$[o%SWAu8WM8hNeFAt&T)"Z%qq;^WtLW!'@O'pKSH`MqT!%AnIaaGQ]fY)PSK21KYa!H4r*`;i+Jt$jo9<$r"kR?m**r:hGfjU4o2'R4e1I:!*l`,IAk_1=MXY<%0W%=JKf!PSl`_fOYkd)>LlQ%$!iCUR=&)n`6=2!1FHc=L2:LY)WT$a7&&KDKenABheX%K_3mS0$.6bH1P7Sq%RG,I2HJB4B1BL&35j+1d9I@\DTS;L(Mh&_bR>m*%bXX!l#$H4U.#F@[*<T@s1TRo<-=s&WceoDXN%u;$AS,rL?8+0fLKb-u#$EPK?32nb7:H`(M4%LP0dLCd-(FgME+Yt7kMeI5#-NY'%C'$2Drng9^^11cZ3c3c>i65lgO7,:n1T8&/NCW$!)>Ji+[?ED!Fi&=?jNN.`@f2/Bbi"=J2(O87"']O^p7*!OD.AJ.B*OKB\duoN%_>ILsaMF:\*&eR#E+[\XrNYG-TV@OO4"rIp93D@`R$lM!c:Z:hCfSBn3+W:QBSM4\b`%i=Z=Z6R1Kmd5m4gEgl7(B(bb/'jC>1I!%..(LL=^l!iO2dSn0Ja7Sp2l%Wd13b<cngEE5lai+>f"Y"jCsk)JXIC_m[HS1R$jo+/XVsRMnfBM"6%)P%MCQ"+k,1_"#CUj+u(mP%ct/,:?tO^jjX]":NgTotMJb[gB$a=0o/*Ah?rYe)QBW8O4OGD`ap\?BXQN-s$j)t&^F!LrTjbC+-Y5ahM1ZV/R;)/]nrba1GDTc`%-o3QXA7FsU1WYPl"H#0ML4K=W;5;@N3UGBe(mGp593,%-PSs-Z<[5onAS1U=[_U+c^U2]H!]./;RSY^pO;?'a-Y<R_`&K)pR6e?g%Z]0VI1UHjOQ\h,]'?flAEb8-PjQAO9"s><u5J``gC4Z?=adLPd1EeH'R=WPuBb?`#QB7iZb`!T&%EqM4=;]*&.,%+^2^gJDA&dC5%b)H$W&g%gPR3>9%TZiM=7*XYS)3m<)8(]7H#TU0u-Qk46!3rGCaGe-%%C;7[RGNkc$=j>I!8\k91LopuS1t*P[+`DXA#>m3Jj(#-%"o/jk)-F$\c,F)7TPiJ68'.,a5reTt9#qEA03e#\14s%'Aq^mRK-l(`G'(e6>Ysu''/BZ^K_9*eRF-HihDQK4d,qYTF3"au!@();%A7ge/]qEUAMmjuZA-UX3s2,^1#gAa-%E8fK2lNL80f'@9+O6??k(5UoAB\^Zi[A;KE9^L[Afr0t30oMk.3qM@Au<G9EQ3t2jJe^8%O;Zk%G%PYm5\:d-1F?W:eMjT$9?>=botM4sK*!!h@M1GKEZ&o2'/BY<94Qj\5\<h-8jSc))&0eY)ikkI-F\%fapc#,9%B`]5ba?K%&s/M98pujXK+p"L,_[ue-:FQO/7+rH-o4eDKdC;Bn4aga1=J<kECZG%G03.>_)pUi'f'8L.NgOl[/U`Z9RpaW1=HJO,p5!7A[:'d%5\<J%gB!`,Aui*dN1%MY;)2apfW%+Q1T4J4HqlA-3_&Zj@Klus`fphK9K,#"U+g2\20$[(C$lEX@g9aLefH)HVOP7e4rH/tda6]?%`f't"-teJnKD6$O;j/r2Ki&Of_3dN:3i=\L1T2phpBRWjBE(*rQPlbZG&S>,+%F/[3*ZZem!_,"Q\dl[$<ni9JP*@EK'*au;jc6p%Q7:2I7*?-E@*dkHR>rRrKe.l7e]*W^,g0j\T5hCabM\bu.=mdN",o66_3WLD#_d*!A^F1^gTCcc#+[`+!A'0]K?ICK,hOkeNZ%#t%fJ7m=m)#'F>qqKoP?U<W>GgogJh;VF[5C],>6YKE,E;n37[p,taOi8YGA"3mPfplJ+^1a.*s4)n2Y.6^9Hh^c>,H#2H/,*)ZpL:J%(P.n")P_c;Tk-%o9r/D7)<FLJ_q,`0VJO?fC`./AWGJ!Xp!DAI#m3u39Q$PhCmcoUa+>n<Q-9I.EOJPLaTl%I:c+@fKB:7O8[)cH%Mpi\N`qDB7[S5A8HcMF,aBHGlOFUfK/`AHU)imC:3*ZZA*9/g@i%c]Qlt=UoJBJ)X3S6)@";Xai@*@WVQ,/d6,-m&U(h_%Q[X&7H%8WmMtAMe'a).(5=1738$*tGkUfe>#A11d5hUs%iM-:sP\%DDlrPK:1cb9Z46i%iDH9Xmb?*tp8jm/Ma^j9@q4\BNMC2oOZ1\oB`[%=MSLpfZ+8>ct0(+emd!;d',U3Xp_lNEZdbV#$qKif!s4\Qbi7Z=gJ`cR0#GX]F=GD;4%G="6F&)il'"_FN5emo48QeQ@,)'QoeXZ%W=#&tAA:*2##XHA69"Zp4j-)??3Z-,hdOlCEa+Hpb@mJj1YlJ]RBlWnct0TUV:dSubEVr1N@n-fNX<9*AEUgo<mYF9A@Wlk\kH6S%:7"6`DAr4jRG9tUkq\*"::a+SI[r)iLu*]L.2uPP?3YOb<d3hRR<"VRA_?^oqBEi#@#RQu=ufod+>Fli;mt(m]StE%ZhN2D11d(l%a3,0c^Z/me!O.NoiFU0/aGuUdLC>h7p3(DfN"Wq9CP1YYTZn>9Ek2\U#co<-kq_HlR$Y);A]c?tcBftJHidoa@Y_eR"'IBU(9@UM%+=F;Yf`<m?cQNP;PRTr!0N/OP:70-\id_nh-"ktGg8Y=>f4ogR*&5g<"(o[k&dF^hO/q`\C4I1=HaP1-"3cu5mXQ0;Ju([O0N/OG%%[\]WgGiT<9igO!J=3i8Yg!2)7?.s6;ms_i^eC.:%[b@DJt+JmG&)-4N0ZeLdk0b+@&5dtru#.?8.rh`PV"4&02ki.iFV9a5DGN(%qjA=.VXAD7GaZ-MR.4bQmP2_JWLJ18^@+b`;7:aE5Tn8k0N/;T,g;LTI@MuiUaug.AbSnHb\/DViE.JOPTB1_0N5ErFi$fqS3(/V%&9aTu!u"f?XiB-eQmpc^3+3$bLA<>hQmkqY#rBQQE5E$"E_C72@A^[W-d68$O'9[41YUa0.MaDUBRd?sP_kbV41dI]VJ0&Lb4l"D%s1.<G,A%9eh%;F];e.h=,A,(6&WW5-2!3=IQYA'bSM5\XjhbI_-d38t`sFP559D,oTM%Z-ek2;q(PqI;C4r"\;5P"=:k_T.l%#0f%o?"!V*&%KLL^MH'1+;ZMZ;C%%O:JSS=R]n/R>^,?_on;#NWLkt$t6'W^p^M*Q(Z<b]fq$#;hd=%1:^mfct/(S%D#6dmk!ZXq2,S5%PC'P<>Gh22cB\Lb@&$((CmhSm8?cZG?emujPW`N//YfG.N-5A/#$Pj1`uSArcnrJ:OC68)I7]Bc*Er`M8leXMC`0afEd5Wj.9hfl%>GgaH&Sr=%/KH?iJh9p:qSAIh\oXNUb#W>0QGG<!n-*!mm,;JgRBdE3TOl7qGI3<`^KBS5BUKLf#dd9r?B1>N`uH\[Pbi*FMkO\h%a?.a(9m^/GGWAs)Cp+ReRBg>4ULf[0_FT-KA]e>cJX/Tg=2--+^ipKfDF^#?^<4R=01M6V>B9sN7Op1F//;id@Y?aE7]X,!dR]Zi%RG5_\F-'tUc7_JLJK80iLI%6Bb:s]5OC\uF@jOBjA]j^0!LCPWV\0B?9X0n8.ta+jH*?;O'MBja16#]I*[=`5G9mTt%(jaNVM:?b%Ogj8keCEhhR6`\;LYTEqBL"BMF`:p=a0?%`D&HDE5r`sgJh%Kh`8Je&Xh'*7UJ:?g=Igt+S+[%eVJJa7=;b6*dmQ4Z>a_tD!\4@C%?UKI&Ppnf("BMC9q<hLUZA2%kAVsJ&>T"hn&>8&c)6>c`?B1:"]28]3VG9.laqPdK\2$d*%1Pnh>aaBTfsrk_Kc<%&_3I;&O#<(^%=/L8*6""7<28McI`6)bI-*\)CQ-k=SUNAIr7f-&0K>(Ge9dq*bmBA?7CH,@l"Qfb9;Z_Q2Ppp^u^rhntMukMn4+%33V?Dp3.\ihk%[+^*];mmSOWXKNpc.F%+Q-m_^_mVO)VYKs^Q)VO7WA7(2@+7081B$o:W_>%sUroY%YjJAEkgJOp'+'qT-=Os>%P#q0VnJkJ/?8ec%8<q"BZ/WBgb#Fgj;.[+iMfq]hAHm#J+pfR"1<%9CY0:9&Q-,@0BAX[X\M>k*fs-fIR>=NA<X'"hC_'+=$jp@m@>C+6Bkg/d:gdj4%O!IaQK-,r88V8n*1A*cMarok?+dlFM"9=6#0riGW'>(NEb,ilaFfZ#JB+9GoYVM^:%@16:=>juZ9s+oQdBg)dN%7inl/^!c7nI<K%F(M_&Ea-YS0s6JtlWG\O>a]%X3ERX&]F(f8EAW:uP<1rS<sC*M>%Pg@ah<+c/!Co],Zc>$$;.NrmZ!K>RG9d>_(o3#7P\"pATA`^%!6aS4pDX,d%[P4RjUs,.]>u=$-A,Y+Q7:Rrm(bC-/!=;.g`A8e1)[i"YRLF:L/aZo;kn;,Q73ci"Be3@Qs#?4BURZ"0$uF#,33:&%ZrI/Z;hD6)Q;Q2r[l(P:m[0_[b(e2mQ79q[5g/N>F0nX/HC8H7g^POV1?;O`<<e"40)_HcTKpHJb"e3Nl(Ocm5g#%E1'LZ)<H(cG%:t\4c8jHs\]NJB8TJE#*.@O5(ET,ZN<11h.,ZH+7j%H<ZMScnq7mLVsa'7+X<$nB&%[G.<84$lKZ`jd;7dGM*p_?o!gtXcc11fq9%TZUq:1hD&2ATm7!.YG^MEZ:^Fb$Zr-nRk[0;?/"D-9(9aX@riV&hB`]^N#$o.6f#T1)VH1Wf5(4ni).MPPN(gb*7:1;e<=2NTmpF%as^GFD3dYVd1.c9lD2R5;C/:t)7E,:%*EqMf+q='R$0ZX5!bHbkr`oc#?@WH\=G*Jp;.0:N-Ytg-o.e2%f'BN/Ye>^4gCbni.u%\%Z(bf[8RZ-nd5&db3k32V1,,XC2RsX29^Kt=BULROP:Vo%KfWA6kkudMTR(]#p10R,OG>+)-r$%EOW_giDe<c4a>.-:G=T_0Beolp%VBdjI/>F.e0Y$.R)9A\#2*?h[Aa2T:ZA]PUEoYsub7ml4a>++D@,4nIA\_n9Ak8"pEp*9ebKN"kocA[MadnOr/V>$dD\s?^b@nPQ%h__VI+<U5?K.KrK]RlH+Y\uhN9\r%*BUOh1-<^Ur,)e,Y>=Ns+N1i\K9\J/^fJ<-](gEl[5A/.RdG\c,&lVB/$n@-/&d;Gc_[hTi%8])h$11dTn>,Da0LS&+Fg]Ta\14Zm='Jd`b-$ncc)$C/GNA&@.V7n7s10&EU=[pRF7uCbGbG_10:F4CDRE[<sRE4%qZqTi4RV8*'%Sq33L6sl["d`kFn9Q'9gE#Flj&QP*<)=<,%*$FH#C&K>`-A-b=QcZa`dUeN2VAU"g)78aLh'H@(Ib!sDR2/?+9GshFbFh+bH2kh+%AGe1P17@;u]M-e=-BC/nVEBdA#:uI=GaWl8j(0u'<U_d5/NK8VQO,*An1p.#::s8<<ET#O+V]P^;bCYl02qe8i6/ni[N%^)ARMuO%6Zqs2@W1/BbJ5bdN(2`:d`P+n%,;W@XMi;t]ibd/icpm8)*2%MF+6cJWE4/P9R'W1Q`2o_\kG9LFICo#39`2dUJ&0lL;T0,P@[]Z%Q[oI[?LbtW+AbVQ>Ms'J0G/CEX916ZJhEfkSFP"Fb:H!\Cn*,AOeeerT^&uU8V/RY43/dT#4W76UB3'3as5k#\SZK+A[9J%i%ejS%c@jA_K3,T2>UI.lKZg1Q&TF-f`Z-U0ZM+Bd.6Hl#>QtPc>&46mP=jEZ18U-hfJ:'K`g01Z(20+^K0[U&)pB:+U1K5K%($Gu(fEs=%/X)Z^-<^U.Q'%"A8'>G*A"mOl9FS:%VFM7NPF8jIb93`Cm`@6BYV>&TA/Pi_dW5o(%%L)I\1kuZMR"p>Oca44<uY\<h.bG2M.>8'%<QHq,j67]0oL\0QZ:rqs3lj)'d3chb/5tsKA=;7:N%>'PPhVoX=[q-]fZbLKRE/_\==,dFad'sg65(o6=fDPIUkt7B)5pR;fb5pc%7J=a;16EJLY"T`mad't1G]74*h_o6q\M>":^9QV=BH3PS<WlJ.P@EHf%)J2XQ;MU4b,3&WQ9cuFfJNl!.Fl37QJ!97YRD-m[RI-I%AMD6-*&PJeR1Doo9^\dI?l=2hCr8fJ$pki=D\F[cqdLpTVGrg?=@V+hemTn-"slD'\c^-?8`jEKZ<MX*AMj5&$D.=A+O/PYGOm*'%.*#$A\4MuP5^+p9N0@h[+bPggA/QXqW-sj\K8p?j7WYjDY$k:m+Nn.@W.'p]UO*C_HkU$.KFCs%T4AgmTXR'd#2\UQkK9S4?+;Xu%V^GOMSbUGH2rr+lD.7Ns1<5VaR7q*9=!eYVEb3Z-8?PVnhrMq5s,gD$^oH#eQ"6<<niY8Sp$%tuP9N6E1)]OT[S6L7Y[u6>::<ja%_jbH[Us%G\O_gG3T!N!+,6_9u2mQ2e9IBLs/JC.[ABSLl;mKu]<^Nc+BGj3o8MC[^$t=Iij4+Vk@g/NVQ79e9cBhC?/&SX.QXLsX%Teqdr5us!TQ%>:$=*)"_PeI=i&hfH<E@5'>GBZiq%.#J'+qlV.<(#ST12`S+R4NbY]M(@eM3l<k6-%/j95lP909^DAjNH%_cBmc"%2eS=-e&??'^'k>mC#UCF-9[7ib[fEc!&M$!blBO&_Pkln^eF9F!\dPFDZ_\W/Mt;1.7F6YQc[4;J/S!jPIqodR8Ob6J/N%"Q(*Xm%?j;l'eh.qm):V^2%$1^%VOrInQ[kJ8K#s?FNJZ0d#@Bqhs2%u"?Nsf^#)!;s9YIS"A]EC\6h"Y`ON&p7jND'J1AEUqV-E,0nmsS]%'RUdOE\00gHl7T'-Ru:[b@o'DE@o"n6.g"]ZH1tITIQ3l+m7%AJsU6qpbF-k*IO:'BUF1812EF6;jrc!02mJ/6("Vrl@^#hgfT4a%#W!mo0cfP4),5.7FqfUteD*W_6!0P`<>&n_.l(!(0U!D8#rBX`DB-tFbeUi&PW/t*AVN6SVO2X#Qq8Yc#r>fK)s%32VY!jl@0RS_%0faO'#W$!eY]SD%1YI5BKGabRC_&rB/!LC*,g=%oT+"KTKGfH1QQ9J2AB4g+@oYkV^DL>_K49+/-d5t<:ReV'N%fnTT><FHFM^_.%lj%!3G<&%7TO>lbW"-b)@\Hn$)2O]DkR5=&#p':[VW9*E1"31Nits.Q-Aq""0nWa\)6ccP%%?rbQ8rEOFEn%!VW:el0nU*ujTo<B%X7?X-7X+Gu`([GE!\mV?m"q+O._TB:Uq[h,))urs_Jse>%*$RPHbl(8WK:[Q"#?Xu-DCX50iQ(J(c1.J"_+?nO9T.u0@hTm"#5GH%e'.C#5g0oQ2A%b0_^/ch*Xft]3$ub7ab'Ctb[gDi(c.%ml<)UXN#BPram;U=%%8<KVbf-\&8YmLmZ'"X9K^Q21JKePD7lA^AkK[<%+D+6=,S2aL'1p,9k,/kIP9gWoR&QEn`(YpZOti/S(s//ehM?j/^s,u@*oiKQ#`C$?"qB*V7jMWB]Us_uUj\JhRAcHq`_<aI-"83\%njL]4M-N?j7(t/`1QX/`dfa)+qksj1-Ht[!bUg"8@1m0-pDS^Qb[Uca#1\pGog9:&TZJ1aiIi(#!+,J$#L"=\9<06;1\I+;B%0L!%!\+I3+>g<J57'-e9=$Z*#W$u^;"l;F#1A@?V^>gVPR6?8P;#q]F2CV^\Oi/+@lrZmbS8em#rC7KP(]71<.clgJc$e;KT-q$R1acS%^s(./>e0oI(>mq'!Adm1P^o1g_G%a=\r@#`6#.+.9ECMPWL\^1Tl\FD&nWg$#0t42bb4*-<7;rr1YS=kSph5_8s)gjB!eda@Y]gc%B)4AeZ[nJmRar$+73;bD7O`boA=YI(CO)$3A;i6A1@g,RPJ9!m1Kau\(c,$K'TAH2qc'm8`Z[,d27Cu(0iM[[0P7U1.iC,M"Qs$0%a:&:!ga7g#oNF^R`fNQ"HEC<qT#MX()Q6m6N#Aj53+nF0"0ZPqG)S4hT_sW8#fI-t8(b\JL`,ud/2Bu=%(9.^SA5^m>Engb@0Uki%Pb.uD6&caje%qA:Wsu-("##;"-j'rNQU1(n6!0X0PJQjdb@J_;ianhc5Njj7j@HdSf)$^t"s$-;2[Pg:;P)D@$'uM;+NE@q/N0=u%\4kK3-X8!nc3]iZ^.*n$AC#51A`*eKL*(4L=>mU+9X86VEjKn8[S00.OtDl+nmopS\2N"qd*d)u@*:rS.F9j/![Lnq)\nMee"X8o%d5"+I"B?eUE^F=m\XZKadOZ/1R7t+9<!FLm.YrVtF;pK=L!#W]&5\c#o-[Ka-"0&MH<ob<m5S&LVPu2P!gP3+R"3>PLqsFe""I5[%TgND<RUOm\TZZol0D7M?<#JfG"#o3KW_BU:P*=e&1;tFIX:-/h2E_>I%,A"BTngG+^qR%qeA04kGYDLVMJjS=RGG1d<i4Jc.k-bc%/!DT?@q@EA&6P>u:mP4O9\'1oK:P6G4RUQ\N.>t^s6Dt;Ba6jD+SCQo_#GC%]O8oqq7f_;K<HeN7RKL_b)ST:beW;qohM(r<*ZcW%5KGWqTK%tOd5._JTBsK=cRb(b0'F/q54+GaB/$JX'6*@J+r1S\(%0;MHFP-61GEcbjsPCCpK:s-4MWba:Ek4H!70jMMq5u<i#1AM%J:QkacR9r[fRmfJ.(,_.K4f-`SL=Y(_lXr9J2$I$!8]N8jkL`,-chNFmL7<qmKe"@r`UOC,e,WS%IDID4/3gAlQ/.:@U%1>c?-cd%^lCLo%fG81+@aLpS2u;[_.Z;9B=>otW003:Tl)&*Ji\PG_C"3:c=iIM+"aEIR]J^*0kWCV?jh$F/(1r+OuY>pL6F^]N7D8Mk)=/"%;j]A.'qEi:jpWo/a;O>0b3)=V%%Pq+\=,\.C]T1qj:'1R\^t^AB2G^EG`=u6TET9YL<#B3h!pni!]^A[MOPFdEX&#:gC?;rS3c\7%Q.74%#'F.iE!kY7PR/l%'01[Scj8Y?k)AH#%7:fQ)+8Jdi<eYjkSrk'jpV=,SA319)9daaaI1RlX@\r0D3DF$K/eKYZe<DV:7OTb%'HojFS:OdSX'5X<'_K9Zk/8-.IbNaPS3`$mq[3UJ-8DYpS:UIt8^<ekp<3M6ad[kO598_-9\`f.Bet8`N(1!jg'i_(Sn$,Z7bp@\%V`ASuL*5<[Us2:/]?k.*#<O;MAdub%dUj&AjYr_f1Bhq_=YiXs9@aN?G*lHTedN`)oGWoNK:i9-A=PLZmu>"lM4,;DO3]1gAm@IS%Su`grqaV/W@5B<--O;/'1\2GS)Fr$P/&Q5]&iI"u:4Gga%!49-=H8itIP.C;3GJaa9B5@AC'O>`A53rj9J2Akbs5;$7o2"Hs2>I*%@r[?WR[FunWi2?-\(M5?N:+@&R#[qRP]+E(WhX1K=b3"BX2#&\*Amr(_H@bT)73W](7D*=Ct6BN@\@=6Y@MV%$m(!@(eL0IbcoZJ%-dBkQ\iFI/,p7BL8MfIiP@bB,-9!>D1YNAUG$QK?^uf3*:nVF-23<g3Ng`6iU%NgqC'Kn<qPAb36"k/u^=l!"+LT.`8>'R8[3fW8%8eV:a"#Wl<3)DD]['A(@:bue$AlX>RAo`k6CBcdKDO;6A):VbDdGq;Gc&8jc^f`IL#a-9FX;S-/@K!13As=]*N]Yfc0(<8nN.Y>f%_4"4l)Crn"21o.s*HK_i[WC-9Q7Ns$(0th(kcC2:@`Fi;RY+>5_4&LA&Zcia^$f)[bJsD#_OAm/Z#7UN5nqR%(3J2&aqBKS+@F*;%%+n6g'o1&,ViS6t!Lj)qgc!5nfSjte$p3+c*4<ffS&sn,YSdT4\E@,4B'.?^g'H>iL?+(0C^/`h`rr<VAe5oW&.I2b86KHI/=k+?%@*N)S;YlcsRR%0Yj-DQV27%/"JWhrI(hFph1XKGh2Zbk3c7c0>Ngf4'=dQ(TJITYNROM,e:bufs"DUDcAW&tqC*m:^TOt(R1G)EZ%P=E:s$>B^$>FsoO)+7a=YO&&&<(AbAm\H7jo?:g.Au8*4"_e27<6p)YP@i/q7&Sd)1YV,0%^D40[.eFnO_0^LTMPpBN*A9,1LkDN%kKIW6lFQ$"W"hn/DO_TSn=qVii69!RSI)'2d#:$Y3p$I3)79Z<\Md3OBnOUY6CL3GpgD.161g!N!XHt\LK]:A&@l`8N\lC>i5MWP%:7BQnO,f<6@[IfcK5eN/c%7d9;D^p#]%\E=@R6G3n&S<]8H)`1I^!FAgZtpYjDZGH@OGr'Zmru9RaGF,oQc'HK2>W*c0DAJ'[4l*%BeI]")117o4BXIt5LG=SX;P.2/G;ii%%=B11K^knd*Xfk7)i@cG]^B5#AXN2aL7IDc+m_k*KlUDK>Me`MN]oMU-7KdJi/2-&d]P/%RaD1.N_,mU;#!:qkboB?AsRKaC*lu,OCfWtHbsfT1m?=G,gDS<'r77</4_S<DR"RH8Mce;l?LNE1Q(^iG,-!1;(SE'U_u-'S2UqH%JVr3@+QK+46imgW';-5Mo25'*Ba4PS)p+:#K.&:'LP7Pu<cK;-9V/1RdS)C4!]>UbBC;U4W0uG/,>g6Q2?pQB3bh-2k=JJWe-tUG%43m+VbpXO$oVGs?B`0G_CTqEt<Pg5BK[$='Pcu%]`JSTS@5DU)-#?'2^'ejpYaHs(NJ09CZ;]&*TZom//R^GH\HZk>Vm&I$*&[mI%%;TSh2M3G:n817'#'j5^h%DX+@DdcCTW*a,*X+INe(NWpB(/1kb8>%"$eTVu9A#1-X8#Tq2A=)5_Ih0NdHt$l;!FNJC7I0!X6M?W%f$"c=H6m>RNN-O6TH7faHe=9pfuN7bfF1^qSYCe^PXu[qRBuu.2R?,4mnVFBZLP",#hBD6$45HXedU[cboL<=%,O-F@5F:mHs$K>%5tgI^,^7+;Y].TFCM""%EjB:R]%7Unl):"L)NL78n[M!3A/$^o1E"n?e-rE(B>Z]D#+=/,=I!:=7'&@F1J;Q6Su<ON+%BlV27$Jd%]:`auCKaRkl/r:dVYl0:c)eSV%Q+?r5h&Q%An%khBa.jJCon)nN+,E3e/G9R61YngIQ2'HrNjsD309nI'_0fA4@@AdOkA;OJXW"$%\h$Z6Rdi6DN2("C:9i_=;)?23%FbgOBh$NJ!]>UleP)Q'TOq"gC3(b!1Du/^edVC>VOmQ#B?`8e=m]<I#eP<0&_9WhP/<ZEkf8]@%@n(6Bc'7gO21r[c-X!`eOGG,u`F(JEK5lGGCBjWVjI@pT%+^roK>O'cK=5c2XF=HeS%4;NY\)8W-P+@0cC.=o3a"9.n2J)#ABgdb%`L&L-RSe+U7#Hr0B$t?"f$"ag+=(bM*R0,Z@#E?k:"Tj];(.562M:3P-%3XB'I#sX'<mmMER&aUB!a;,,LFGE1KrEtmZZ%1E-o$;%,]-"46o^a-2M9@=U[LdDdCp(H+DEX$n,8QZR>cV1g<A\"P(bfHF9TWcct9Xja$@F3S$<N2U!4_/8l1MpAniG@BJV&IjHcH1RmHUt%&=.jkJ2fdr3FO^$-KMP%1ff2dP@<*oc"O@"EMii,fc=#D%&Arm[2%=f8Upt\Ap9iaAn701,B:S4OHEp6H,=082^?&U+O7d$@88D2%1N8s63u5c&8.GfC#1Y(0&LDED'ladtVV%[mOY^B;/F<?Hj9uC7QlSf[%&.>:!X*Kidjg3EBd9tL'fgp?J0W"#Sd"AD30QX"-dH6n%U_%13f>ocSif'amLcu+(%,RMJ6ioBDqp:L!&]gA_pAIf$3E+6[jNQ>j4X6(FB^oR:0p"1?LCuVR`2cYo9ZH$(3J/k.IJcLYP[>$H%R>_t.F/B+BCr`&c?:-J\,&7h8R4VPk_492QahjH%kR(p5=>FMO[?AIr%,W=M#+K#Jl3QAX['+TV#'!*EW8']jLbg?`mDKlAbZOin%Lbha3C*^n430R>q_4/i3_3bW;hMc>obaR/Ac+kI.i(icRRMJ+"bMp/P=;lP=N:)bPB/S76=T-@16/``Y9sS@tmjDlT-49q<adUWA%aVt@u#'$hL-#d;;+@<]%581+96jks12HVbD1B_J?1Dg9QK7#d!.ZTs##8`ebROJW_;)9UNgrQU;dS*iE8X`f"SkmeYdLu';U`&e@%Y_FJr1T6>p5.F1Q=VcaW$Y`)b$YH\QS2@QU91V@nBOUh!1fGC,,gBlH[ub2uND0gVP%Gn?>=^R6QD_etdL>+MC=!)tAdJs5P@ht<%ER7AkHNBQa![C5l),j,T$nR?k[rftj"s4I7P;Z!aAoaIJB*LH1ds"C1N2HUa[;V]U=N%<3#gc6O*]ds=pA3"HlN8tBl<+0F;^I0N%B!f+$,TA7>LOQ]fgr.EI+u_54RBB-*bQ9dn[R";5;I1\^-F/#UR0aBW.5NC!1<<!_Al,tQ,/0ksJ-EdgVPMG3eX)MgN;"W0-=c=4%R2IS8;CF>9r0(XNOI>r>LWj9q+<`OPS,tH%c+_Y<6=r"DR#m`[n0MTL;);65-"Nl8M`sU`ne3cW:N=HLVPFh[K8uYY!&Y7S8bnX5%RETn'A4A)6M=sN^9SgRfR>E,UKZo,0;BRcoHfDaP!L_?kDTOF9a:*aJbf:+6%!o,p!`-s4)AYo45lf(n-:+'IL+@CZP;8?T6Dr%<%dP!%*okI6i8\Z`01\D6<RAn4H1UCc\)bDrJRE=f#@V.A.<\Q=,3>Io!P]SVXQ^F0q2D>K^9Sl@EB*M8F)u4QG1BY$oESKQu+9Tc(%Ylr<>(b%I$9p:6#3&=sbCjXG9QBih)'/UB6UOZs\k7f!k5r2BlAY>Hblb/@SJ7_9V5`UA,bY]m`R4p]0BI3mcJ7^Q\T:d&5o2t7D%TGch[W/VEHP<(Tm1L<&/S=)M!PaPK[M4#fZ&'W617I5l!.Ddkp1OofD=d#-iA9A.3Fi?'kg-oK')T0d09k.XEMGt#.9]eeW1QuO]%`6=1RgX4-2_$6Z)3&A-;-5DSOAi(oJ0AA3;0L?3Pl'RmucN[unGFDrPE3-O>BH/hWFD#]I9H5j`d50nr!],J]T$n2i1BS(L'+5hJ%R<"A(bj=b+R$k5NfNM`r;#A&!4qf`9WJfi]AD/7o1T9ZK?#Kd$P=__Vc(p2ZTGbg7lBMLsTRE8f%HGZCAi)e0C"stI-I^lRRaJ6N%mDfEE#%]']?4,$fU5W,j'qcGgMMW*EJ7a[M'VH<`gR(G:d#<R<2M*+m1fLE("#R>GAtU$Ms0I[%5VlU?D\XDrR`Sf2Jn@+G<^ANt%+'DT7J7_WH@1X:=bb1;=l,\p*c:fZ88^7`\C4[X]1P;8TWp/HcPZd.=);TLs'pQP&d61R@]Rr#8h53#JP;BO^>_J@uZ`W*EQ^eq\%[G);=%!m7jj3]i!#.4SE/3%8H\$]P3jNJaoZ>`PBB1Ap<\-R[B,KCc>&tBh^rs=cAcA_189-QWOB#9?6bY5:i'/Que5sd?N9U$hM%AL<U68X[[/7T*hrb9UXGXam4kV!Lgu9R7e;RF,lMLd29j%)<"#fl>50I6>QoUrZ?U9La=A1K2",R$fdk'/K`;^sGW'R=X,:cs^Bq%l?SDX8W=FO)'jc9'pP)R9^=!:-I[IdRE;2#jNPCNlAS6nTU?NdFiopOc,?cb"Z-nST*7%bV32=WJa9>t4Zh$77)?M\btMGk;b/]i%\KK.i7;Up4$doG]!K8ERBa,MsE\H`(bok37g39)E;fkBgAhn%hUmWc^9%$Bo=%Sk&qEQFQ_!Yf/?]o"VAt>`cHH\r:K*Gu^U`$C%%\4^t-Al(o]3Kp8,F>&e6'04efBZ=i=$>@HQ,V>[Wn9k?p;[RFNBI5cP$>Cgo!0T1&$Tq!:;t%Ce6(05[5s^r**3c%cBLXeRCtB0D%9QQi;J7`aoSsm#'"3hN/(o/%G`3G^o82EkkCZIlCBgu%C/6*,,bjN27RVCIU`+)9*_/1c''r761Igja6ZB0rlW2,hT.OAd5n^>^#%iM7?%7%%a\dL=o"k/!3;"+uO)bXn6hgmAgQ6(7&k5u9j'RAE[*%!#PD3"e&H-EVo49!_BFAkH#\5VmOJ*Al5e.qN&43&>dqNIb9n%b\2JE2h"NI9PX"Vb\4S(A%ed[B"3?H[KFbgPoQG7:%`G50;3YR8G-0u.mPn5L,s"FR!B",8N421AnHcV.qg7KW=!;C'tZUP2%H&m%SUHfsRHV+0S=/$l3'f?'IZg?A%CD9gj.%"*^mgI+$oCng@f`%GI3KNq$IF_5O4ej<TGak"+SNo;1H8ppM;ZUBLjj;TG#qmqQa97X%eq0=;9e7-=$-Z(7nHEO%":kSj;j%cRRF,1CG17jN-7e9m1BY<SNB>A.TTDanVCH2t)S6>g-5*A9RH[(1-"\JSndB%V.Y8*cPNGnT%Ahq)lR$fMQ9?^)@X+?\dZAXPpcnR<n46JjhAu6$48(7SrUH>K[;`m#qAO(l(PKmNcAkN#8J7da:XIYnpTGdN!h.4P71fJeS"O3_Q%Q_9ambX"&LR3ZGmX6goa;j%@h1_\\'$(:lP`^g[JRd$4!WM#YkLk?&';7/m!6'>h\^8aeoaYpINc"*n$82D,!8^^;pV3<a"jU4YK%WL%\S9Lec>1m:oV8XdcHLa:4f[)>+jP;JK.d6u6Pg5dF7;)@;C"_o@nUdWI<`O)s`Z3;ae1MN:*CaMg9&iLC@Y@PnZROfZ.`F1RU%8QB.S@7hn`#,Q\U.OAoNPHKJ*a]q<.ArmS33'j3L:^#B1c,NU:fTD!40j-<ei/W5kB'M*`bs6fA4HZ]_PkL0<OHMK-`O;8PRZZLH%B(JF8TJ4=1En&=5"m.qn;)@l-8'Rj-S#D`lV%6C"1ML)AC*rgO$>Ln]eO7YM35;+u_TFI3R0^MBedSWl5"S&baQ^?iULpg5.8_nS%J=3@(F<)#PK4:^',$2c\1F]jJ2$5Bm4%t5_K>&4u^]\?UL)AYsP;Io+cR;_RB!T3!5VpR[Ua6_J)6M=3"#W>"7FrGkVJ,#jbqs:s%,b`4;1KlADld\!OSr$7a9`E=JbXCDW11mfr.2ap<7PgB>0P1k<DB.J_b`mAdOI<2e9#qF@el_,OO;XF5_aaH7O;XE;j'Z4OaG_;p%9G@_C"r0bcPU%\60L@1FP;8of,8cE[.5Q53ZbG#/bUd6\o)rY0f&sQ@bTLWF*Qag,K9GWLO=ZE[l*Uhgq`R#R#1_Qn3N3%J6)"(t%%G$.gK5tl\IneE$(*Y[d9[l`?d$$>N("^QraVt)-c"*UpBeroWPI)21m"cHLfZXQ*J=[O\R8fFXRmEA[ql1;fP=>6QS&r`m_Ig*Y%d:"ia2&rh</34Qg"`-YD=Z<s[_e-pP%SGAI`l&KJPG.Q#c"+mR@5Fk'Zj.)n9LbD$2Ns.dib#K!+`T<lEmJ_4ge=$P-$(E`F$aLp%fppEWdPhrgR7t@@FCnbZhrE'$[$aT+ZqfgYGng@Nad@QUB2U2`FTs2\5lW721V+Y:_otE;.63fhcKL!5%%miJV?fYhc6uGCL<T\P%g=`pC$:Ah2'BD6F2aRn]['n]Ih(-Yi&3;_\N]Xa(8uS/!<%Ti:>JL-^8W9oYDkUZp+uqgO5:6sgdJds]1RaM;l@jr;BWQAU4r-1H%*Uh\"!/E+IVDC8NTek`6UG,j7bh.q%44"lD!r8gH&6\4U>FK8o1S&6/bFI7LdP,>+RqYRJka4/D^1!EcDBY]bc?(*VF3L'G^<Je[%_(G7%_sIj,n-/pK^gBg#M.jIB6@^43Ca.C-1,S%XYN\<=7q^-WHXalPnbo;/=7@/)1VAl;4HsO`^J'M$+t6I\NbRi1L\Ig34)6fg%N9E3].@WZ-&!)2o\KI+8j#X=)CGq4HM(p)*0YomH,Il-rGu@0D"VEMbd)3;pKsH2[[`K\0D9rdX4HB"n-s)%RZ,^g(XlVs]_)LH'%5Wa'2ooFckmU/p5E]U>a7%N:4LNT5P7%uo>P&(n'H@gXtab$o;(6]h.E37++jedS]R3T5q?@6GoT:<u0CY3DM21&`fC)BTdOfqbk%Q!E`2@,?dN0Gp.1i#Cn!8H_ViXe^POoie4MDNq/Y4pK279oln=X0(pX@AfteI>YMXb7&^'=hJ(U(5ke)3kKD(8($Dta'7WXZSIPn%nM/(pG\[0%n]RZ(r8oft`C[SN/CQW:#rrhVcb&5*=A#0'KOe61rs@Up8YX-=It::N)Jb.ZqRLns$gqK[4n%t8ML>K-bPTf~>%AI9_PrivateDataEnd